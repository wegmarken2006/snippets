{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Runnable Snippets","text":"<p>Languages:</p> <ul> <li>C# 8.0</li> <li>Dart 3.9.0</li> <li>Flutter 2.5.0</li> <li>Go 1.17</li> <li>Julia 1.7</li> <li>Kotlin 1.3</li> <li>Nim 1.0</li> <li>Odin dev-2025-08</li> <li>Python 3.7.1</li> <li>Rust 1.89.0</li> <li>Sing 0.41.0  Singlang website</li> <li>Typescript 4.0.3</li> <li>V 0.3</li> </ul> <p>Still updating.</p>"},{"location":"Android/","title":"Android","text":""},{"location":"Android/#flutter","title":"Flutter","text":""},{"location":"Android/#use-dynamic-libraries-ie-rust-generated-in-flutter-plugin","title":"Use dynamic libraries (i.e. Rust generated) in Flutter plugin","text":"<pre><code>flutter create --template=plugin native_add\ncd native_add\nmkdir example\\android\\app\\src\\main\\jniLibs\\x86_64\nmkdir example\\android\\app\\src\\main\\jniLibs\\x86\nmkdir example\\android\\app\\src\\main\\jniLibs\\arm64-v8a\nmkdir example\\android\\app\\src\\main\\jniLibs\\armeabi-v7a\n\ncopy &lt;dyn lib project&gt;\\target\\x86_64-linux-android\\release\\libxxx.so example\\android\\app\\src\\main\\jniLibs\\x86_64\ncopy &lt;dyn lib project&gt;\\target\\i686-linux-android\\release\\libxxx.so example\\android\\app\\src\\main\\jniLibs\\x86\ncopy &lt;dyn lib project&gt;\\target\\aarch64-linux-android\\release\\libxxx.so example\\android\\app\\src\\main\\jniLibs\\arm64-v8a\ncopy &lt;dyn lib project&gt;\\target\\armv7-linux-androideabi\\release\\libxxx.so example\\android\\app\\src\\main\\jniLibs\\armeabi-v7a\n\ncd example\nflutter run\n</code></pre>"},{"location":"Android/#rust","title":"Rust","text":""},{"location":"Android/#compile-for-android","title":"Compile for Android","text":"<pre><code>rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android\ncargo install cargo-ndk\ncargo ndk --target aarch64-linux-android --android-platform 21 -- build --release\ncargo ndk --target armv7-linux-androideabi --android-platform 21 -- build --release\ncargo ndk --target i686-linux-android --android-platform 21 -- build --release\ncargo ndk --target x86_64-linux-android --android-platform 21 -- build --release\n</code></pre>"},{"location":"Async/","title":"Async","text":""},{"location":"Async/#c","title":"C#","text":"<pre><code>using System;\nusing System.Net;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var task = SumPageSizesAsync();\n        task.Wait();\n    }\n\n    static async Task SumPageSizesAsync()\n    {\n        var total = 0;\n        var urls = new List&lt;string&gt;\n            {\n            \"https://wegmarken2006.github.io/snippets/\",\n            \"https://wegmarken2006.github.io/snippets/Cross/\",\n            \"https://wegmarken2006.github.io/snippets/Dict/\",\n            \"https://wegmarken2006.github.io/snippets/Execution%20time/\"\n            };\n\n        foreach (var url in urls)\n        {\n            var content = await GetURLContentsAsync(url);\n            total += content.Length;\n        }\n        Console.WriteLine(\"{0}\", total);\n    }\n\n    static async Task&lt;byte[]&gt; GetURLContentsAsync(string url)\n    {\n        var content = new MemoryStream();\n\n        var webReq = (HttpWebRequest)WebRequest.Create(url);\n\n        using (WebResponse response = await webReq.GetResponseAsync())\n        {\n            using (Stream responseStream = response.GetResponseStream())\n            {\n                await responseStream.CopyToAsync(content);\n            }\n        }\n        return content.ToArray();\n    }\n}\n</code></pre>"},{"location":"Async/#dart","title":"Dart","text":"<pre><code>\nimport 'package:http/http.dart' as http;\n\nvoid main() async {\n  var urls = [\n    \"https://wegmarken2006.github.io/snippets/\",\n    \"https://wegmarken2006.github.io/snippets/Cross/\",\n    \"https://wegmarken2006.github.io/snippets/Dict/\",\n    \"https://wegmarken2006.github.io/snippets/Execution%20time/\"\n  ];\n\n  var futures = urls.map((url) async {\n    try {\n      final response = await http.read(Uri.parse(url));\n      //print(url);\n      return response.length;\n    } catch (e) {\n      print(\"Failed to fetch $url: $e\");\n      return 0; \n    }\n  }).toList();\n\n  final results = await Future.wait(futures);\n  final total = results.fold(0, (sum, len) =&gt; sum + len);\n\n  print(\"Total size: $total bytes\");\n}\n</code></pre>"},{"location":"Async/#julia","title":"Julia","text":"<pre><code>#import Pkg; Pkg.add(\"HTTP\")\n using HTTP\n using Printf\n\n urls = [\n    \"https://wegmarken2006.github.io/snippets/\",\n    \"https://wegmarken2006.github.io/snippets/Cross/\",\n    \"https://wegmarken2006.github.io/snippets/Dict/\",\n    \"https://wegmarken2006.github.io/snippets/Execution%20time/\",\n]\n\nmutable struct Atomic{Int64}; @atomic x::Int64; end\n\ntot = Atomic(0)\n\n@sync for url in urls\n    @async begin\n        resp = HTTP.get(url)        \n        @atomicreplace tot.x  (@atomic tot.x + length(String(resp.body)))\n    end\nend\n\n@printf \"Size: %s\\n\" @atomic tot.x\n</code></pre>"},{"location":"Async/#nim","title":"Nim","text":"<pre><code>\nimport strformat\nimport httpClient\nimport asyncdispatch\n\nproc sumPageSizesAsync() {.async.} =\n  let urls = [\n    \"https://wegmarken2006.github.io/snippets/\",\n    \"https://wegmarken2006.github.io/snippets/Cross/\",\n    \"https://wegmarken2006.github.io/snippets/Dict/\",\n    \"https://wegmarken2006.github.io/snippets/Execution%20time/\"\n  ];\n  var total = 0;\n\n  var client = newAsyncHttpClient()\n  for url in urls:\n    let text = await client.getContent(url)\n    total = total + text.len()\n\n  echo &amp;\"{total}\"\n\nwaitFor(sumPageSizesAsync());\n</code></pre>"},{"location":"Async/#python","title":"Python","text":"<pre><code># pip install aiohttp\nimport aiohttp\nimport asyncio\n\nasync def sum_page_sizes():\n    urls = [\n        \"https://wegmarken2006.github.io/snippets/\",\n        \"https://wegmarken2006.github.io/snippets/Cross/\",\n        \"https://wegmarken2006.github.io/snippets/Dict/\",\n        \"https://wegmarken2006.github.io/snippets/Execution%20time/\"\n    ]\n    total = 0\n    for url in urls:\n        async with aiohttp.ClientSession() as session:\n            async with session.get(url) as response:\n                text = await response.text()\n                total = total + len(text)\n    print(total)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(sum_page_sizes())\n</code></pre>"},{"location":"Async/#rust","title":"Rust","text":"<pre><code>\n//[dependencies]\n//async-std = \"1.0.1\"\n//surf = \"1.0.3\"\n\nuse async_std::task::*;\nuse surf::{get};\n\nfn main() {\n    block_on(sum_page_sizes());\n}\n\nasync fn sum_page_sizes() {\n    let urls = vec![\n        \"https://wegmarken2006.github.io/snippets/\",\n        \"https://wegmarken2006.github.io/snippets/Cross/\",\n        \"https://wegmarken2006.github.io/snippets/Dict/\",\n        \"https://wegmarken2006.github.io/snippets/Execution%20time/\",\n    ];\n    let mut total = 0;\n    for url in urls {\n        let response = get(&amp;url).recv_string().await.unwrap();\n        total = total + response.len();\n    }\n\n    println!(\"{}\", total);\n}\n</code></pre>"},{"location":"C%20Call/","title":"C Call","text":""},{"location":"C%20Call/#dart","title":"Dart","text":"<pre><code>\n//Copy test_ffi.dll into the project root\n\n//dependencies:\n//  ffi: ^2.1.4\nimport 'dart:ffi';\nimport 'dart:typed_data';\nimport 'package:ffi/ffi.dart';\n\ntypedef NativeDoubleFunction = Double Function(Double);\ntypedef DartDoubleFunction = double Function(double);\n\ntypedef NativeIncFunction = Void Function(Pointer&lt;Void&gt;, Int32);\ntypedef DartIncFunction = void Function(Pointer&lt;Void&gt;, int);\n\nvoid main() {\n  final dylib = DynamicLibrary.open('test_ffi.dll');\n\n  final mul2 = dylib\n      .lookupFunction&lt;NativeDoubleFunction, DartDoubleFunction&gt;('mul_2');\n\n  final result = mul2(3.0);\n  print('Result of mul_2: $result');\n\n  final incU8Vec = dylib\n      .lookupFunction&lt;NativeIncFunction, DartIncFunction&gt;('inc_u8_vec');\n\n  final data = Uint8List.fromList([1, 2, 3, 4]);\n  print('Original data: $data');\n\n  final pointer = calloc&lt;Uint8&gt;(data.length);\n  pointer.asTypedList(data.length).setAll(0, data);\n\n  incU8Vec(pointer.cast&lt;Void&gt;(), data.length);\n\n  final updatedData = pointer.asTypedList(data.length);\n  print('Updated data: $updatedData');\n\n  calloc.free(pointer);\n}\n</code></pre>"},{"location":"C%20Call/#odin","title":"Odin","text":"<pre><code>\n//copy test_ffi.dll, test_ffi.dll.lib\n\npackage main\n\nimport \"core:fmt\"\n\nforeign import test_ffi \"test_ffi.dll.lib\"\n\nforeign test_ffi {\n    mul_2 :: proc \"c\" (f64) -&gt; f64 ---\n    inc_u8_vec :: proc \"c\" (^[]int, int) ---\n}\n\nmain :: proc() {\n    fmt.println(mul_2(3.0))\n    in_vec := []int{1, 2, 3, 4}\n    fmt.println(in_vec)\n    inc_u8_vec(&amp;in_vec, 4)\n    fmt.println(in_vec)\n}\n</code></pre>"},{"location":"C%20Call/#python","title":"Python","text":"<pre><code>\nfrom ctypes import cdll, c_double\n\nlib = cdll.LoadLibrary(\"test_ffi\")\nmul_2 = lib.mul_2\nmul_2.restype = c_double\nres = mul_2(c_double(3.0))\n\nprint(res)\n</code></pre>"},{"location":"C%20Callable/","title":"C Callable","text":""},{"location":"C%20Callable/#rust","title":"Rust","text":"<pre><code>\n//[lib]\n//name = \"test_ffi\"\n//crate-type = [\"cdylib\"] #dynamic library\nuse std::os::raw::c_double;\nuse std::os::raw::{c_uchar, c_int};\nuse std::slice;\n\n#[unsafe(no_mangle)]\npub extern \"C\" fn mul_2(val: c_double) -&gt; c_double {\n    val * 2.0\n}\n\n#[unsafe(no_mangle)]\npub extern \"C\" fn inc_u8_vec(in_vec: *mut c_uchar, len: c_int) {\n    assert!(!in_vec.is_null(), \"Null pointer in function\");\n\n    let in_vec: &amp;mut[c_uchar] = unsafe{slice::from_raw_parts_mut(in_vec, len as usize)};    \n\n    for elem in in_vec {\n        *elem = *elem + 1;\n    }\n} \n</code></pre>"},{"location":"CSV/","title":"CSV","text":""},{"location":"CSV/#dart","title":"Dart","text":"<pre><code>\nimport 'package:csv/csv.dart';\nimport 'dart:io';\nimport 'dart:convert';\n\nFuture&lt;void&gt; main() async {\n  const csvPath = 'tmp001.csv' ;\n\n  var llWrite = [['FirstName', 'SecondName'], ['John', 'Doe'], ['Mark', 'Smith']];\n  String csv = const ListToCsvConverter(fieldDelimiter: '\\t').convert(llWrite);\n\n  var f = File(csvPath);\n  var sink = f.openWrite();\n  sink.write(csv);\n  await sink.close();\n\n  var input = File(csvPath).openRead();\n  var llRead = await input\n    .transform(utf8.decoder)\n    .transform(CsvToListConverter(fieldDelimiter: '\\t'))\n    .toList();\n\n  for (var elem in llRead) {\n    print('First: ${elem[0]}, Second: ${elem[1]}');\n  }\n}\n</code></pre>"},{"location":"CSV/#go","title":"Go","text":"<pre><code>\npackage main\n\nimport (\n    \"encoding/csv\"\n    \"fmt\"\n    \"io\"\n    \"os\"\n)\n\nfunc main() {\n    records := [][]string{\n        {\"FirstName\", \"SecondName\"},\n        {\"John\", \"Doe\"}, {\"Mark\", \"Smith\"},\n    }\n    fileName := \"tmp001.csv\"\n    file, err := os.Create(fileName)\n    if err != nil {\n        fmt.Printf(\"Can't create %s\\n\", fileName)\n        os.Exit(0)\n    }\n\n    w := csv.NewWriter(file)\n    w.WriteAll(records) // calls\n    file.Close()\n\n    file, err = os.Open(fileName)\n    if err != nil {\n        fmt.Printf(\"Can't open %s\\n\", fileName)\n        os.Exit(0)\n    }\n    defer file.Close()\n\n    r := csv.NewReader(file)\n\n    for {\n        record, err := r.Read()\n        if err == io.EOF {\n            break\n        }\n        if err != nil {\n            fmt.Println(\"Record reading error\")\n            os.Exit(0)\n        }\n        fmt.Printf(\"First: %s, Second: %s\\n\", record[0], record[1])\n    }\n}\n</code></pre>"},{"location":"CSV/#julia","title":"Julia","text":"<pre><code>#import Pkg; Pkg.add(\"CSV\"); Pkg.add(\"DataFrames\")\nusing CSV, DataFrames\n\nfilename = \"tmp001.csv\"\ntouch(filename)\ndf = DataFrame(FirstName=[\"John\", \"Mark\"], SecondName=[\"Doe\", \"Smith\"])\nCSV.write(filename, df)\n\ncsv_reader = CSV.File(filename)\nfor row in csv_reader\n    println(\"First: $(row.FirstName), Second: $(row.SecondName)\")\nend\n</code></pre>"},{"location":"CSV/#odin","title":"Odin","text":"<pre><code>\n#+feature dynamic-literals\npackage main\n\nimport \"core:encoding/csv\"\nimport \"core:fmt\"\nimport \"core:os\"\n\nmain :: proc() {\n    ll_words := [dynamic][]string{\n        {\"FirstName\", \"SecondName\"}, \n        {\"John\", \"Doe\"}, \n        {\"Mark\", \"Smith\"}}\n    defer delete(ll_words)\n\n    file_name := \"tmp001.csv\"\n    f, err := os.open(file_name, (os.O_CREATE | os.O_RDWR), 0o644)\n    if err != nil {\n        fmt.println(err)\n    }\n\n    w: csv.Writer\n    csv.writer_init(&amp;w, os.stream_from_handle(f))\n\n    for str_vec in ll_words {\n        csv.write(&amp;w, str_vec)\n    }\n    os.close(f)\n\n    fr, err2 := os.open(file_name, (os.O_RDWR), 0o644)\n    if err2 != nil {\n        fmt.println(err2)\n    }\n    defer os.close(fr)\n\n    r: csv.Reader\n    csv.reader_init(&amp;r, os.stream_from_handle(fr))\n    defer csv.reader_destroy(&amp;r)\n    records, _ := csv.read_all(&amp;r)\n\n    fmt.println(records)\n}\n</code></pre>"},{"location":"CSV/#python","title":"Python","text":"<pre><code>\nimport csv\n\nCSV_PATH = 'tmp001.csv'\n\nwith open(CSV_PATH, 'w', newline='') as csvfile:\n    wr = csv.writer(csvfile, delimiter='\\t')\n    wr.writerow(['FirstName', 'SecondName'])\n    wr.writerow(['John', 'Doe'])\n    wr.writerow(['Mark', 'Smith'])\n\nwith open(CSV_PATH) as csvfile:\n    rd = csv.reader(csvfile, delimiter='\\t')\n    for rw in rd:\n        print(f\"First: {rw[0]}, Second: {rw[1]}\")\n</code></pre>"},{"location":"CSV/#rust","title":"Rust","text":"<pre><code>\n//[dependencies]\n//csv = \"1.1.2\"\n\nuse csv::{ReaderBuilder, WriterBuilder};\n\nfn main() {\n    const CSV_PATH: &amp;str = \"tmp001.csv\";\n\n    let mut wtr = WriterBuilder::new()\n        .delimiter(b'\\t')\n        .quote_style(csv::QuoteStyle::NonNumeric)\n        .from_path(CSV_PATH)\n        .expect(\"Error opening\");\n\n    //write Header\n    wtr.write_record(&amp;[\"FirstName\", \"SecondName\"])\n        .expect(\"Error writing header\");\n\n    wtr.write_record(&amp;[\"John\", \"Doe\"])\n        .expect(\"Error writing record\");\n    wtr.write_record(&amp;[\"Mark\", \"Smith\"])\n        .expect(\"Error writing record\");\n\n    wtr.flush().expect(\"Error flushing\");\n\n    let mut rdr = ReaderBuilder::new()\n        .delimiter(b'\\t')\n        .from_path(CSV_PATH)\n        .expect(\"Error reading CSV\");\n    for result in rdr.records() {\n        let record = result.expect(\"No record\");\n        let first: String = match record[0].parse() {\n            Ok(st) =&gt; st,\n            Err(_) =&gt; String::from(\"\"),\n        };\n        let second: String = match record[1].parse() {\n            Ok(st) =&gt; st,\n            Err(_) =&gt; String::from(\"\"),\n        };\n        println!(\"First: {}, Second: {}\", first, second);\n    }\n}\n</code></pre>"},{"location":"CSV/#rust-with-serialization","title":"Rust (with serialization)","text":"<pre><code>//[dependencies]\n//csv = \"1.1.2\"\n//serde = \"1.0.125\"\n//serde_derive = \"1.0.125\"\n\nuse csv::{ReaderBuilder, WriterBuilder};\nuse serde_derive::{Deserialize, Serialize};\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Record {\n    FirstName: String,\n    SecondName: String,\n}\nfn main() {\n    const CSV_PATH: &amp;str = \"tmp001.csv\";\n\n    let mut wtr = WriterBuilder::new()\n        .delimiter(b'\\t')\n        .quote_style(csv::QuoteStyle::NonNumeric)\n        .from_path(CSV_PATH)\n        .expect(\"Error opening\");\n\n    //write Header\n    wtr.write_record(&amp;[\"FirstName\", \"SecondName\"])\n        .expect(\"Error writing header\");\n\n    let rec1 = Record {\n        FirstName: \"John\".to_string(),\n        SecondName: \"Doe\".to_string(),\n    };\n    wtr.serialize(rec1).expect(\"Error writing record\");\n    let rec2 = Record {\n        FirstName: \"Mark\".to_string(),\n        SecondName: \"Smith\".to_string(),\n    };\n    wtr.serialize(rec2).expect(\"Error writing record\");\n    wtr.flush().expect(\"Error flushing\");\n\n    let mut rdr = ReaderBuilder::new()\n        .delimiter(b'\\t')\n        .has_headers(true)\n        .from_path(CSV_PATH)\n        .expect(\"Error reading CSV\");\n    for result in rdr.deserialize() {\n        let record: Record = result.expect(\"No record\");\n\n        println!(\"{:?}\", record);\n    }\n}\n</code></pre>"},{"location":"CSV/#v-vlang","title":"V (vlang)","text":"<pre><code>import encoding.csv\nimport os\n\nfn main() {\n    records := [[\"FirstName\", \"SecondName\"], [\"John\", \"Doe\"], \n        [\"Mark\", \"Smith\"]]  \n\n    file_name := \"tmp0.txt\"\n    mut f1 := os.create(file_name) or {panic(\"cannot create $file_name\")}\n\n    mut writer := csv.new_writer()\n    for record in records {\n        writer.write(record) or {}\n        to_write := writer.str()\n        f1.write(to_write.bytes()) or {panic(\"cannot write $file_name\")}\n    }\n    f1.close()\n\n    lines := os.read_lines(file_name) or {panic(\"cannot read $file_name\")}\n\n    for ind, line in lines {\n        //skip header\n        if ind == 0 {\n            continue\n        } \n        line_nl := \"$line\\n\"\n        mut parser := csv.new_reader(line_nl)\n        items := parser.read() or { break }\n        println(\"First: ${items[0]}, Second: ${items[1]}\")\n    }\n\n}\n</code></pre>"},{"location":"Channels/","title":"Channels","text":""},{"location":"Channels/#c","title":"C#","text":""},{"location":"Channels/#dart","title":"Dart","text":"<pre><code>\nimport 'dart:io';\nimport 'dart:isolate';\n\nimport 'package:http/http.dart' as http;\n\nvoid main() async {\n  var urls = [\n    \"https://wegmarken2006.github.io/snippets/\",\n    \"https://wegmarken2006.github.io/snippets/Cross/\",\n    \"https://wegmarken2006.github.io/snippets/Dict/\",\n    \"https://wegmarken2006.github.io/snippets/Execution%20time/\",\n  ];\n\n  var receiverPort = ReceivePort();\n  var isolates = urls.map((url) async {\n    await Isolate.spawn((List&lt;dynamic&gt; args) async {\n      var url = args[0];\n      var sendPort = args[1];\n      try {\n        final response = await http.read(Uri.parse(url));\n        //print(url);\n        sendPort.send(response.length);\n      } catch (e) {\n        print(\"Failed to fetch $url: $e\");\n        sendPort.send(0);\n      }\n    }, [url, receiverPort.sendPort]);\n  });\n\n  // join like \n  await Future.wait(isolates);\n\n  num total = 0;\n  int count = 0;\n  receiverPort.listen((respLen) {\n    count = count + 1;\n    total = total + respLen;\n    if (count == urls.length) {\n      print(\"Total size: $total bytes\");\n      exit(0);\n    }\n  });\n}\n</code></pre>"},{"location":"Channels/#go","title":"Go","text":"<pre><code>\npackage main\n\nimport (\n    \"fmt\"\n    \"io\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc main() {\n    fmt.Printf(\"\\n%d\", sumPageSizes())\n}\n\nfunc sumPageSizes() int {\n    urls := []string{\n        \"https://wegmarken2006.github.io/snippets/\",\n        \"https://wegmarken2006.github.io/snippets/Cross/\",\n        \"https://wegmarken2006.github.io/snippets/Dict/\",\n        \"https://wegmarken2006.github.io/snippets/Execution%20time/\",\n    }\n\n    var ch = make(chan int)\n\n    for _, url := range urls {\n        go getTextLen(url, ch)\n    }\n\n    total := 0\n    for range urls {\n        ln := &lt;-ch\n        total = total + ln\n    }\n    return total\n}\n\nfunc getTextLen(url string, ch chan int) {\n    resp, err := http.Get(url)\n\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer resp.Body.Close()\n    bodyBytes, _ := io.ReadAll(resp.Body)\n    ch &lt;- len(bodyBytes)\n}\n</code></pre>"},{"location":"Channels/#odin","title":"Odin","text":"<pre><code>// git clone https://github.com/laytan/odin-http.git\n// in this same folder\n\npackage main\n\nimport \"core:fmt\"\nimport \"core:sync/chan\"\nimport \"core:thread\"\nimport \"odin-http/client\"\n\n\nmain :: proc() {\n    urls := []string {\n        \"https://wegmarken2006.github.io/snippets/\",\n        \"https://wegmarken2006.github.io/snippets/Cross/\",\n        \"https://wegmarken2006.github.io/snippets/Dict/\",\n        \"https://wegmarken2006.github.io/snippets/Execution%20time/\",\n    }\n\n    ch, err1 := chan.create(chan.Chan(int), 1, context.allocator)\n    assert(err1 == .None)\n\n    defer chan.destroy(ch)\n\n    threads: [dynamic]^thread.Thread\n    defer delete(threads)\n\n    for url in urls {\n        th := thread.create_and_start_with_poly_data2(url, chan.as_send(ch), get_text_len)\n        //defer thread.destroy(th) //NOOO, it makes threads sequential\n        append(&amp;threads, th)\n    }\n\n    total := 0\n    for i in 0 ..&lt; len(urls) {\n        value, ok := chan.recv(ch)\n        if !ok {\n            break\n        }\n        total = total + value\n        fmt.println(\"Received:\", value, total)\n    }\n\n    thread.join_multiple(..threads[:])\n\n    for th in threads {\n        thread.destroy(th)\n    }\n\n    fmt.println(\"Total: \", total)\n}\n\nget_text_len :: proc(url: string, ch: chan.Chan(int, .Send)) {\n    to_send := 0\n\n    resp, err := get(url)\n    if !err {\n        to_send = len(resp)\n    }\n\n    success := chan.send(ch, to_send)\n    if !success {\n        fmt.println(\"Failed to send\")\n    }\n}\n\nget :: proc(url: string) -&gt; (string, bool) {\n    res, err := client.get(url)\n    if err != nil {\n        fmt.printf(\"Request failed: %s\\n\", err)\n        return \"\", true\n    }\n    defer client.response_destroy(&amp;res)\n\n    body, allocation, berr := client.response_body(&amp;res)\n    if berr != nil {\n        fmt.printf(\"Error retrieving response body: %s\\n\", berr)\n        return \"\", true\n    }\n    resp := body.(client.Body_Plain)\n    defer client.body_destroy(body, allocation)\n    //fmt.println(\"[get] \", url)\n    return body.(client.Body_Plain), false\n}\n</code></pre>"},{"location":"Channels/#rust","title":"Rust","text":"<pre><code>//[dependencies]\n//ureq = \"0.11.2\"\n\nuse std::io::Read;\nuse std::sync::mpsc;\nuse std::sync::mpsc::{Receiver, Sender};\nuse std::thread;\n\nfn main() {\n    sum_page_sizes();\n}\n\nfn sum_page_sizes() {\n    let urls = vec![\n        \"https://wegmarken2006.github.io/snippets/\",\n        \"https://wegmarken2006.github.io/snippets/Cross/\",\n        \"https://wegmarken2006.github.io/snippets/Dict/\",\n        \"https://wegmarken2006.github.io/snippets/Execution%20time/\",\n    ];\n    let (tx, rx): (Sender&lt;usize&gt;, Receiver&lt;usize&gt;) = mpsc::channel();\n    let mut children = Vec::new();\n    let urls_len = urls.len();\n\n    let mut total = 0;\n    for url in urls {\n        let tx_chan = tx.clone();\n\n        let child = thread::spawn(move || {\n            let resp = ureq::get(url).call();\n            let status = resp.status();\n            if status != 500 {\n                let mut buffer = String::new();\n                resp.into_reader()\n                    .read_to_string(&amp;mut buffer)\n                    .expect(\"Reading error\");\n                let ln = buffer.len();\n                tx_chan.send(ln).expect(\"Transmitting error\");\n            } else {\n                tx_chan.send(0).expect(\"Transmitting error\");\n            }\n        });\n        children.push(child);\n    }\n\n    //Receive messages\n    for _ in 0..urls_len {\n        total = total + rx.recv().expect(\"Receiving error\");\n    }\n\n    // Wait for the threads to complete any remaining work\n    for child in children {\n        child.join().expect(\"Join error\");\n    }\n\n    println!(\"{}\", total);\n}\n</code></pre> <pre><code>//channel receiver shared between threads\n//using std::thread::scope and crossbeam_channel\n//[dependencies]\n//ureq = \"2.5.0\"\n//crossbeam-channel = \"0.5.6\"\n\nuse std::io::Read;\n\nfn main() {\n    std::thread::scope(|s| {\n        let urls = vec![\n            \"https://wegmarken2006.github.io/snippets/\",\n            \"https://wegmarken2006.github.io/snippets/Cross/\",\n            \"https://wegmarken2006.github.io/snippets/Dict/\",\n            \"https://wegmarken2006.github.io/snippets/Execution%20time/\",\n        ];\n        let (tx, rx)= crossbeam_channel::unbounded();\n        let mut children = Vec::new();\n        let urls_len = urls.len();\n\n        for url in urls {\n            let tx_chan = tx.clone();\n\n            let child = s.spawn(move || {\n                let r_resp = ureq::get(url).call();\n                let resp = r_resp.expect(\"Error url\");\n                let status = resp.status();\n                if status != 500 {\n                    let mut buffer = String::new();\n                    resp.into_reader()\n                        .read_to_string(&amp;mut buffer)\n                        .expect(\"Reading error\");\n                    let ln = buffer.len();\n                    tx_chan.send(ln).expect(\"Transmitting error\");\n                } else {\n                    tx_chan.send(0).expect(\"Transmitting error\");\n                }\n            });\n            children.push(child);\n        }\n\n        //Receive messages\n        let receiver = s.spawn(move || {\n            let mut sum = 0;\n            for _ in 0..urls_len {\n                sum = sum + rx.recv().expect(\"Receiving error\");\n            }\n            sum\n        });\n\n        // Wait for the threads to complete any remaining work\n        for child in children {\n            child.join().expect(\"Join error\");\n        }\n        let total = receiver.join().expect(\"Join error\");\n\n        println!(\"{}\", total);\n    });\n}\n</code></pre>"},{"location":"Channels/#v-vlang","title":"V (vlang)","text":"<pre><code>\nimport net.http\n\nfn main() {\n    sizes := sum_page_sizes()\n    print(\"\\n$sizes\")\n}\n\nfn sum_page_sizes() int {\n    mut urls := []string{}\n    urls = [\n        \"https://wegmarken2006.github.io/snippets/\",\n        \"https://wegmarken2006.github.io/snippets/Cross/\",\n        \"https://wegmarken2006.github.io/snippets/Dict/\",\n        \"https://wegmarken2006.github.io/snippets/Execution%20time/\",\n    ]\n\n    ch := chan int{}\n\n    for _, url in urls {\n        go get_text_len(url, ch)\n    }\n\n    mut total := 0\n    mut resp_count := 0\n    for {\n        select {\n        ln := &lt;-ch {\n            resp_count++\n            total = total + ln\n            if resp_count == urls.len {\n                return total\n            }\n        }\n        }\n    }\n    return total\n}\n\nfn get_text_len(url string, ch chan int) {\n    resp := http.get(url) or {panic(\"get error $err\")}\n\n    //close?\n    ch &lt;- resp.body.len\n}\n\n</code></pre>"},{"location":"Charts/","title":"Charts","text":""},{"location":"Charts/#go","title":"Go","text":"<pre><code>\n//go.mode\n//require github.com/go-echarts/go-echarts/v2 v2.2.4\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n    \"os\"\n\n    \"github.com/go-echarts/go-echarts/v2/charts\"\n    \"github.com/go-echarts/go-echarts/v2/opts\"\n)\n\nfunc main() {\n    var yLineVals []opts.LineData\n    var yBarVals []opts.BarData\n    var xVals []string\n\n    //prepare data\n    for ind := -314; ind &lt;= 314; ind += 10 {\n        xVals = append(xVals, fmt.Sprintf(\"%d\", ind))\n        yLineVals = append(yLineVals, opts.LineData{Value: math.Sin(float64(ind) / 100.)})\n        yBarVals = append(yBarVals, opts.BarData{Value: math.Sin(float64(ind) / 100.)})\n    }\n\n    line := charts.NewLine()\n    line.SetGlobalOptions(\n        charts.WithXAxisOpts(opts.XAxis{Name: \"X\"}),\n        charts.WithYAxisOpts(opts.YAxis{Name: \"Sin(x)\"}),\n\n        charts.WithTitleOpts(opts.Title{\n            Title:    \"Sin(x)\",\n            Subtitle: \"\",\n        }))\n    line.SetXAxis(xVals).AddSeries(\"Sin(x)\", yLineVals)\n    f, _ := os.Create(\"line.html\")\n    line.Render(f)\n\n    bar := charts.NewBar()\n    bar.SetGlobalOptions(\n        charts.WithTitleOpts(opts.Title{\n            Title:    \"Sin(x)\",\n            Subtitle: \"\",\n        }))\n    bar.SetXAxis(xVals).AddSeries(\"Sin(x)\", yBarVals)\n    g, _ := os.Create(\"bar.html\")\n    bar.Render(g)\n}\n</code></pre>"},{"location":"Charts/#julia","title":"Julia","text":"<pre><code>#import Pkg; Pkg.add(\"Plots\")\nusing Plots\n\nxi = range(-314,314,100)\nx = Float64[]\ny = Float64[]\nfor ind in 1:lastindex(xi)\n    xf = xi[ind]/100.0\n    push!(x, xf)\n    push!(y, sin(xf))\nend\n\nylabel!(\"y = sin(x)\")\nplot(x, y, title = \"y=sin(x)\", label = \"y = sin(x)\")\n</code></pre>"},{"location":"Charts/#rust","title":"Rust","text":"<pre><code>\n//[dependencies]\n//plotters = \"0.2.12\"\nuse plotters::prelude::*;\n\nfn main() {\n    let root =\n        BitMapBackend::new(\"tmp0.png\", (640, 480)).into_drawing_area();\n    root.fill(&amp;WHITE).unwrap();\n    let mut chart = ChartBuilder::on(&amp;root)\n        .caption(\"y=sin2(x)\", (\"sans-serif\", 50).into_font())\n        .margin(5)\n        .x_label_area_size(30)\n        .y_label_area_size(30)\n        .build_ranged(-4f32..4f32, -1f32..1f32)\n        .unwrap();\n\n    chart.configure_mesh().draw().unwrap();\n\n    let x_list = (-314..314).step_by(10);\n    let x_list_f = x_list.map(|x| x as f32/100.0).map(|x| (x, x.sin()));\n    //let xx = (-50..=50).map(|x| x as f32 / 50.0).map(|x| (x, x * x));\n\n    chart\n        .draw_series(LineSeries::new(x_list_f, &amp;RED))\n        .unwrap()\n        .label(\"y = sin(x)\")\n        .legend(|(x, y)| PathElement::new(vec![(x, y), (x + 20, y)], &amp;RED));\n\n    chart\n        .configure_series_labels()\n        .background_style(&amp;WHITE.mix(0.8))\n        .border_style(&amp;BLACK)\n        .draw()\n        .unwrap();\n}\n\n</code></pre>"},{"location":"Charts/#typescript","title":"Typescript","text":"<pre><code>\n//npm install --save plotly.js-dist\n//npm install --save @types/plotly.js\n//browserify hello.js -o hello2.js\nimport * as Plotly from 'plotly.js-dist';\n\nfunction range(start, end, step) {\n    var ans = [];\n    for (let i = start; i &lt;= end; i = i + step) {\n        ans.push(i);\n    }\n    return ans;\n}\nlet x = range(-314, 314, 10);\nlet y = x.map((x) =&gt; Math.sin(x / 100.));\nvar trace1: Partial&lt;Plotly.PlotData&gt; = {\n    x: x,\n    y: y,\n    name: 'Sine',\n    type: ''\n};\n\nvar data: Partial&lt;Plotly.PlotData&gt;[] = [trace1];\nvar layout: Partial&lt;Plotly.Layout&gt; = { yaxis: { 'title': 'sin(x)' } };\n\nPlotly.newPlot('myDiv', data, layout);\n</code></pre> <pre><code>&lt;!-- hello2.html --&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n &lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id=\"myDiv\"&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;script src=\"hello2.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"Conversions/","title":"Conversions","text":""},{"location":"Conversions/#dart","title":"Dart","text":"<pre><code>\nimport 'dart:convert';\nimport 'dart:typed_data';\n\nvoid main() {\n  // i32 &lt;-&gt; bytes\n  var v1 = i32ToBytes(112);\n  var i1 = bytesToI32(v1);\n  print(i1);\n\n  // str &lt;-&gt; bytes\n  var v2 = strToBytes(\"113.45\");\n  var s2 = bytesToStr(v2);\n  print(s2);\n\n  // i32 &lt;-&gt; str\n  var s3 = i32ToStr(114);\n  var i3 = strToI32(s3);\n  print(i3);\n\n  // f32 &lt;-&gt; bytes\n  var v4 = f32ToBytes(115.67);\n  var f4 = bytesToF32(v4);\n  print(f4);\n}\n\n// Converts int (i32) to bytes (big endian)\nList&lt;int&gt; i32ToBytes(int num) {\n  var b = ByteData(4);\n  b.setInt32(0, num, Endian.big);\n  return b.buffer.asUint8List();\n}\n\n// Converts bytes (big endian) to int (i32)\nint bytesToI32(List&lt;int&gt; buf) {\n  var b = ByteData.sublistView(Uint8List.fromList(buf));\n  return b.getInt32(0, Endian.big);\n}\n\n// Converts float (f32) to bytes (big endian)\nList&lt;int&gt; f32ToBytes(double num) {\n  var b = ByteData(4);\n  b.setFloat32(0, num, Endian.big);\n  return b.buffer.asUint8List();\n}\n\n// Converts bytes (big endian) to float (f32)\ndouble bytesToF32(List&lt;int&gt; buf) {\n  var b = ByteData.sublistView(Uint8List.fromList(buf));\n  return b.getFloat32(0, Endian.big);\n}\n\n// Converts String to bytes (UTF-8)\nList&lt;int&gt; strToBytes(String str1) {\n  return utf8.encode(str1);\n}\n\n// Converts bytes to String (UTF-8)\nString bytesToStr(List&lt;int&gt; buf) {\n  return utf8.decode(buf);\n}\n\n// Converts String to int (i32)\nint strToI32(String str1) {\n  return int.parse(str1);\n}\n\n// Converts int (i32) to String\nString i32ToStr(int num) {\n  return num.toString();\n}\n</code></pre>"},{"location":"Conversions/#go","title":"Go","text":"<pre><code>package main\n\nimport (\n    \"bytes\"\n    \"encoding/binary\"\n    . \"fmt\"\n)\n\nfunc main() {\n    b1 := i32_to_bytes(112)\n    i1 := bytes_to_i32(b1)\n    Println(i1)\n\n    //string to bytes, bytes to string\n    s2 := \"113.45\"\n    b2 := []byte(s2)\n    s2b := string(b2)\n    Println(s2b)\n\n    //int to string, string to int\n    s3 := Sprintf(\"%d\", 114)\n    var i3 int32\n    Sscanf(s3, \"%d\", &amp;i3)\n    Println(i3)\n\n    b4 := f32_to_bytes(115.67)\n    f4 := bytes_to_f32(b4)\n    Println(f4)\n}\n\nfunc i32_to_bytes(num int32) []byte {\n    b1 := new(bytes.Buffer)\n    binary.Write(b1, binary.LittleEndian, uint32(num))\n    return b1.Bytes()\n}\n\nfunc bytes_to_i32(b1 []byte) int32 {\n    bb1 := bytes.NewBuffer(b1)\n    var i1 int32\n    binary.Read(bb1, binary.LittleEndian, &amp;i1)\n    return i1\n}\n\nfunc f32_to_bytes(num float32) []byte {\n    b1 := new(bytes.Buffer)\n    binary.Write(b1, binary.LittleEndian, float64(num))\n    return b1.Bytes()\n}\n\nfunc bytes_to_f32(b1 []byte) float32 {\n    bb1 := bytes.NewBuffer(b1)\n    var f1 float64\n    binary.Read(bb1, binary.LittleEndian, &amp;f1)\n    return float32(f1)\n}\n</code></pre>"},{"location":"Conversions/#odin","title":"Odin","text":"<pre><code>\npackage main\n\nimport \"core:c/libc\"\nimport \"core:fmt\"\nimport \"core:strconv\"\nimport \"core:strings\"\n\nmain :: proc() {\n    // int &lt;-&gt; bytes\n    b1 := i128_to_bytes(112)\n    i1 := bytes_to_i128(b1)\n    fmt.println(i1)\n\n    // str &lt;-&gt; bytes\n    v2 := str_to_bytes(\"113.45\")\n    s2 := bytes_to_str(v2)\n    fmt.println(s2)\n\n    // int &lt;-&gt; string\n    s3 := fmt.tprintf(\"%d\", 114)\n    i3: int\n    libc.sscanf(strings.clone_to_cstring(s3), \"%d\", &amp;i3)\n    fmt.println(i3)\n\n    // [^]u8 &lt;-&gt; string\n    mp1 := string_to_multip(\"hello\")\n    str1 := multip_to_string(mp1)\n    fmt.println(str1)\n}\n\ni128_to_bytes :: proc(num: i128) -&gt; []u8 {\n    buf: [16]u8\n    str := strconv.itoa(buf[:], int(num))\n    out: []u8 //stack\n    out = transmute([]u8)str\n    out2: [dynamic]u8 //context.allocator\n    for elem in out {\n        append(&amp;out2, elem)\n    }\n    return out2[:]\n}\n\nbytes_to_i128 :: proc(bs: []u8) -&gt; i128 {\n    return i128(strconv.atoi(string(bs)))\n}\n\nstr_to_bytes :: proc(str: string) -&gt; []u8 {\n    return transmute([]u8)str\n}\n\nbytes_to_str :: proc(bs: []u8) -&gt; string {\n    return string(bs)\n}\n\nmultip_to_string :: proc(mp: [^]u8) -&gt; string {\n    cs := cstring(mp)\n    str := strings.clone_from_cstring(cs)\n    return str\n}\n\nstring_to_multip :: proc(str: string) -&gt; [^]u8 {\n    return raw_data(str)\n}\n\n</code></pre>"},{"location":"Conversions/#rust","title":"Rust","text":"<pre><code>\nuse std::{str};\n\nfn main() {\n    let v1 = i32_to_bytes(112);\n    let i1 = bytes_to_i32(&amp;v1);\n    println!(\"{}\", i1);\n\n    let v2 = str_to_bytes(&amp;String::from(\"113.45\"));\n    let s2 = bytes_to_str(&amp;v2);\n    println!(\"{}\", s2);\n\n    let s3 = i32_to_str(114);\n    let i3 = str_to_i32(&amp;s3);\n    println!(\"{}\", i3);\n\n    let v4 = f32_to_bytes(115.67);\n    let f4 = bytes_to_f32(v4);\n    println!(\"{:?}\", f4);\n}\n\nfn i32_to_bytes(num: i32) -&gt; Vec&lt;u8&gt; {\n    let n1 = (num &amp; 0xff) as u8;\n    let n2 = ((num &gt;&gt; 8) &amp; 0xff) as u8;\n    let n3 = ((num &gt;&gt; 16) &amp; 0xff) as u8;\n    let n4 = ((num &gt;&gt; 24) &amp; 0xff) as u8;\n    vec![n4, n3, n2, n1]\n}\n\nfn bytes_to_i32(buf: &amp;Vec&lt;u8&gt;) -&gt; i32 {\n    let n1: u32 = (buf[0] as u32) &lt;&lt; 8;\n    let n2: u32 = (buf[1] as u32) &lt;&lt; 16;\n    let n3: u32 = (buf[2] as u32) &lt;&lt; 24;\n    let num = buf[3] as u32 | n3 | n2 | n1;\n    num as i32\n}\n\nfn f32_to_bytes(num: f32) -&gt; [u8; 4] {\n    num.to_be_bytes()\n}\n\nfn bytes_to_f32(buf: [u8; 4]) -&gt; f32 {\n    f32::from_be_bytes(buf)\n}\n\nfn str_to_bytes(str1: &amp;String) -&gt; Vec&lt;u8&gt; {\n    let bb = str1.clone().into_bytes();\n    bb\n}\n\nfn bytes_to_str(buf: &amp;Vec&lt;u8&gt;) -&gt; &amp;str {\n    str::from_utf8(buf).unwrap()\n}\n\nfn str_to_i32(str1: &amp;String) -&gt; i32 {\n    str1.parse::&lt;i32&gt;().unwrap()\n}\n\nfn i32_to_str(num: i32) -&gt; String {\n    format!(\"{}\", num)\n}\n\n\n</code></pre>"},{"location":"Cross/","title":"Cross Compilation","text":""},{"location":"Cross/#c","title":"C#","text":"<pre><code>dotnet publish -c Release -r linux-arm64 --self-contained true\n</code></pre>"},{"location":"Cross/#go","title":"Go","text":"<p>On windows:</p> <pre><code>set GOOS=linux\nset GOARCH=arm64\ngo build\n</code></pre>"},{"location":"Cross/#rust","title":"Rust","text":"<pre><code>rustup target add mips-unknown-linux-gnu\nrustup target add aarch64-linux-gnu-gcc \n</code></pre> <p>On linux, edit .cargo/config:</p> <pre><code>[target.mips-unknown-linux-gnu]\nlinker = \"mips-linux-gnu-gcc\"\n[target.aarch64-unknown-linux-gnu]\nlinker = \"aarch64-linux-gnu-gcc\"\n</code></pre> <p>To compile, run:</p> <pre><code>cargo build --target=\"aarch64-linux-gnu-gcc \"\n</code></pre>"},{"location":"Dataframe/","title":"Dataframe","text":""},{"location":"Dataframe/#go","title":"Go","text":"<pre><code>package main\n\nimport (\n    . \"fmt\"\n    \"io/ioutil\"\n    \"log\"\n    \"strings\"\n\n    \"github.com/go-gota/gota/dataframe\"\n    \"github.com/go-gota/gota/series\"\n)\n\nconst DATANAME = \"iris.data\"\nconst URL = \"http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data\"\n\nfunc main() {\n    _, err := grab.Get(DATANAME, URL)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    content, err2 := ioutil.ReadFile(DATANAME)\n    if err2 != nil {\n        log.Fatal(err)\n    }\n    ioContent := strings.NewReader(string(content))\n    df := dataframe.ReadCSV(ioContent,\n        dataframe.Names(\"Sepal_Length\", \"Sepal_Width\", \"Petal_Length\", \"Petal_Width\", \"Class\"),\n        dataframe.WithDelimiter(','),\n        dataframe.HasHeader(false))\n\n    // filter rows\n    df1 := df.Filter(\n        dataframe.F{1, \"Sepal_Length\", series.Greater, 5.4},\n    )\n    df2 := df1.Filter(\n        dataframe.F{1, \"Petal_Width\", series.LessEq, 0.2},\n    )\n    Println(df2)\n\n    //select columns\n    df3 := df2.Select([]string{\"Sepal_Length\", \"Petal_Width\", \"Class\"})\n    Println(df3)\n}\n</code></pre>"},{"location":"Dataframe/#julia","title":"Julia","text":"<pre><code>using Downloads, DataFrames, CSV\ndataname = \"iris.data\"\n\nurl = \"http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data\"\ntouch(dataname)\nDownloads.download(url, dataname)\n\ndf = DataFrame(CSV.File(dataname; header = 0))\ndf = rename(df, \"Column1\" =&gt; \"Sepal_Length\", \"Column2\" =&gt; \"Sepal_Width\", \"Column3\" =&gt;\"Petal_Length\", \"Column4\" =&gt; \"Petal_Width\", \"Column5\" =&gt; \"Class\")\n\n# filter rows\ndf1 = df[(df.Sepal_Length .&gt; 5.4) .&amp; (0.1 .&lt;= df.Petal_Width .&lt;= 0.2), :]\nprintln(df1)\n\n# select columns\ndf3 = df1[:, [1, 4, 5]]\nprintln(df3)\n</code></pre>"},{"location":"Dataframe/#python","title":"Python","text":"<pre><code>import pandas as pd\nimport urllib.request\n\ndataname = \"iris.data\"\nurl = \"http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data\"\n\nurllib.request.urlretrieve(url, dataname)\n\ncol_names = ['Sepal_Length','Sepal_Width','Petal_Length','Petal_Width','Class']\ndf =  pd.read_csv(dataname, names = col_names)\n\n# select rows\ndf1 = df[(df['Sepal_Length'] &gt; 5.4) &amp; (df['Petal_Width'] &lt;= 0.2)]\nprint(df1)\n\n# select columns\ndf2 = df1[['Sepal_Length','Petal_Width','Class']]\nprint(df2)\n</code></pre>"},{"location":"DateTime/","title":"Date &amp; Time","text":""},{"location":"DateTime/#dart","title":"Dart","text":"<pre><code>\n\n//dependencies:\n//  intl: ^0.20.2\n\nimport 'package:intl/intl.dart';\n\nvoid main() {\n  var today = DateTime.now();\n\n  // from date to string\n  var todayStr = DateFormat('yyyy-MM-dd**kk:mm:ss').format(today);\n  var dateStr = DateFormat('dd-MM-yyyy').format(today);\n  var timeStr = DateFormat('kk:mm').format(today);\n\n  // from string to date\n  var today2 = DateFormat('yyyy-MM-dd**kk:mm:ss').parse(todayStr);\n\n  var hour = today.hour;\n  var minute = today.minute;\n  var day = today.day;\n  var month = today.month;\n  var year = today.year;\n\n  // weekday\n  var days_of_week = [\"sun\", \"mon\", \"tue\", \"wed\", \"thu\", \"fry\", \"sat\"];\n  var weekday = days_of_week[today.weekday];\n\n  var tomorrow = today.add(Duration(days: 1));\n\n  // difference between dates\n  var next_week = today.add(Duration(days: 7));\n  var delta_w = next_week.difference(today).inDays;\n  var next_year = today.add(Duration(days: 366));\n  var n_year = next_year.year;\n  var delta_y = n_year - year;\n\n  print(today);\n  print(todayStr);\n  print ('$day-$month-$year  $hour:$minute');\n  print(dateStr);\n  print(timeStr);\n  print(today2);\n  print(weekday);\n  print(tomorrow);\n  print(delta_w);\n  print(delta_y);\n}\n</code></pre>"},{"location":"DateTime/#go","title":"Go","text":"<pre><code>\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    today := time.Now()\n    year := today.Year()\n    month := today.Month()\n    day := today.Day()\n    hour := today.Hour()\n    minute := today.Minute()\n    second := today.Second()\n\n    // from date to string\n    todayStr := fmt.Sprintf(\"%d-%02d-%02d**%02d:%02d:%02d\",\n        year, month, day, hour, minute, second)\n    dateStr := today.Format(\"2006-01-02\")\n    timeStr := today.Format(\"15:04:05\")\n\n    // from string to date\n    today2, _ := time.Parse(\"2006-01-02**15:04:05\", todayStr)\n\n    // weekday\n    weekday := today.Weekday()\n\n    tomorrow := today.AddDate(0, 0, 1)\n\n    // difference between dates\n    nextWeek := today.AddDate(0, 0, 7)\n    deltaW := nextWeek.Sub(today).Hours() / 24\n    nextYear := today.AddDate(1, 0, 0)\n    nYear := nextYear.Year()\n    deltaY := nYear - year\n\n    fmt.Printf(\"%v\\n\", today)\n    fmt.Printf(\"%v\\n\", todayStr)\n    fmt.Printf(\"%v\\n\", dateStr)\n    fmt.Printf(\"%v\\n\", timeStr)\n    fmt.Printf(\"%v\\n\", today2)\n    fmt.Printf(\"%v\\n\", weekday)\n    fmt.Printf(\"%v\\n\", tomorrow)\n    fmt.Printf(\"%v\\n\", deltaW)\n    fmt.Printf(\"%v\\n\", deltaY)\n}\n</code></pre>"},{"location":"DateTime/#julia","title":"Julia","text":"<pre><code>using Dates\n\ntoday = Dates.now()\nyear = Dates.year(today)\nmonth = Dates.month(today)\nday = Dates.day(today)\nhour = Dates.hour(today)\nminute = Dates.minute(today)\nsecond = Dates.second(today)\n\n# from date to string\ntoday_str = \"$(year)-$(month)-$(day)**$(hour):$(minute):$(second)\"\ndate_str = Dates.format(today,\"yyyy-mm-dd\")\ntime_str = Dates.format(today,\"H:M:S\")\n\n# from string to date\ndf = Dates.dateformat\"y-m-d**H:M:S\"\nstr = \"2020-05-01**13:32:02\"\ntoday2 = Dates.DateTime(str, df)\n\n# weekday\nweekday = Dates.dayname(today)\n\ntomorrow = today + Dates.Day(1)\n\n# difference between dates\nnext_week = today + Dates.Day(7)\ndelta_w = Dates.Date(next_week) - Dates.Date(today)\nnext_year = today + Dates.Year(1)\ndelta_y = Dates.Date(next_year) - Dates.Date(today)\n\nprintln(today)\nprintln(today_str)\nprintln(date_str)\nprintln(time_str)\nprintln(today2)\nprintln(weekday)\nprintln(tomorrow)\nprintln(delta_w)\nprintln(delta_y)\n</code></pre>"},{"location":"DateTime/#odin","title":"Odin","text":"<pre><code>\npackage main\n\nimport \"core:time/datetime\"\nimport \"core:fmt\"\nimport \"core:time\"\nimport \"core:time/timezone\"\nimport \"core:c/libc\"\n\nmain :: proc() {\n\n    l_date := local_date()\n    weekday := datetime.day_of_week(i64(l_date.day))\n\n    tomorrow, _ := datetime.add_days_to_date(l_date, 1)\n\n    // difference between dates\n    next_week, _ := datetime.add_days_to_date(l_date, 7)\n    delta_w, _ := datetime.subtract_dates(next_week, l_date)\n\n    fmt.println(l_date)\n    fmt.println(weekday)\n    fmt.println(tomorrow)\n    fmt.println(delta_w.days)\n}\n\nlocal_date :: proc() -&gt; datetime.DateTime {\n    t := libc.time(nil)\n    local := libc.localtime(&amp;t)\n\n    l_now := datetime.Time{hour=i8(local.tm_hour), minute=i8(local.tm_min), second=i8(local.tm_sec)}\n    l_date := datetime.DateTime{day= i8(local.tm_mday),year=i64(local.tm_year)+1900, month=i8(local.tm_mon)+1, time=l_now}\n    return l_date\n}\n</code></pre>"},{"location":"DateTime/#python","title":"Python","text":"<pre><code>\nimport datetime as dt\nfrom dateutil import relativedelta\n\ntoday = dt.datetime.today()\n\n# from date to string\ntoday_str = dt.datetime.strftime(today, '%Y-%m-%d**%H:%M:%S')\ndate_str = dt.datetime.strftime(today, '%d-%m-%Y')\ntime_str = dt.datetime.strftime(today, '%H:%M')\n\n# from string to date\ntoday2 = dt.datetime.strptime(today_str, '%Y-%m-%d**%H:%M:%S')\nhour = today.hour\nminute = today.minute\nday = today.day\nmonth = today.month\nyear = today.year\n\n# weekday\ndays_of_week = [\"mon\", \"tue\", \"wed\", \"thu\", \"fry\", \"sat\", \"sun\"]\nweekday = days_of_week[today.weekday()]\n\ntomorrow = today + dt.timedelta(days=1)\ntomorrow_str = dt.datetime.strftime(tomorrow, '%d-%m-%Y')\n\n# difference between dates\nnext_week = today + dt.timedelta(days=7)\ndelta_w = (next_week -today).days\nnext_year = today + dt.timedelta(days=366)\ndelta_y = (relativedelta.relativedelta(next_year, today)).years\n\nprint(today)\nprint(today_str)\nprint (f'{day}-{month}-{year}  {hour}:{minute}')\nprint(date_str)\nprint(time_str)\nprint(today2)\nprint(weekday)\nprint(tomorrow_str)\nprint(delta_w)\nprint(delta_y)\n</code></pre>"},{"location":"DateTime/#rust","title":"Rust","text":"<pre><code>\n// chrono = \"*\"\nuse chrono::{Datelike, Duration, NaiveDateTime, Timelike, Utc};\n\nfn main() {\n    let today = Utc::now();\n\n    //from date to string\n    let today_str = format!(\"{}\", today.format(\"%Y-%m-%d**%H:%M:%S\"));\n    let date_str = format!(\"{}\", today.format(\"%d-%m-%Y\"));\n    let time_str = format!(\"{}\", today.format(\"%H:%M\"));\n\n    // from string to date\n    let today2 =\n        NaiveDateTime::parse_from_str(&amp;today_str, \"%Y-%m-%d**%H:%M:%S\").expect(\"Error parse\");\n    let hour = today.hour();\n    let minute = today.minute();\n    let day = today.day();\n    let month = today.month();\n    let year = today.year();\n\n    // weekday\n    let weekday = today.weekday();\n\n    let tomorrow = today + Duration::days(1);\n    let tomorrow_str = format!(\"{}\", tomorrow.format(\"%d-%m-%Y\"));\n\n    // difference between dates\n    let next_week = today + Duration::days(7);\n    let delta_w = next_week.signed_duration_since(today).num_days();\n    let next_year = today + Duration::days(366);\n    let nyear = next_year.year();\n    let delta_y = nyear - year;\n    println!(\"{:?}\", today);\n    println!(\"{}\", today_str);\n    println!(\"{}-{}-{} {}:{}\", day, month, year, hour, minute);\n    println!(\"{}\", date_str);\n    println!(\"{}\", time_str);\n    println!(\"{}\", today2);\n    println!(\"{}\", weekday);\n    println!(\"{}\", tomorrow_str);\n    println!(\"{}\", delta_w);\n    println!(\"{}\", delta_y);\n}\n</code></pre>"},{"location":"DateTime/#v-vlang","title":"V (vlang)","text":"<pre><code>import time\n\nfn main() {\n    today := time.now()\n    year := today.year\n    month := today.month\n    day := today.day\n    hour := today.hour\n    minute := today.minute\n    second := today.second\n\n    // from date to string\n    today_str := \"$year-${month:02}-${day:02} ${hour:02}:${minute:02}:${second:02}\"\n    date_str := today.get_fmt_date_str(time.FormatDelimiter.hyphen,\n                time.FormatDate.yyyymmdd)\n    time_str := today.get_fmt_time_str(time.FormatTime.hhmmss24)\n\n    // from string to date\n    today2 := time.parse(today_str) or {panic(\"Parse error $err\")}\n    today2_str := today2.str()\n\n    weekday_str := today.weekday_str()\n\n    tomorrow := today.add_days(1)\n    tomorrow_str := tomorrow.str()\n\n    // difference between dates\n    next_week := today.add_days(7)\n    delta_w := next_week - today\n    delta_d := delta_w.hours() / 24.0\n    mut days_per_year := 365\n    if time.is_leap_year(year) {\n        days_per_year = 366\n    }\n    next_year := today.add_days(days_per_year)\n    n_year := next_year.year\n    delta_y := n_year - year\n\n    println(today_str)\n    println(date_str)\n    println(time_str)\n    println(today2_str)\n    println(weekday_str)\n    println(tomorrow_str)\n    println(delta_d)\n    println(delta_y)\n}\n\n</code></pre>"},{"location":"Dict/","title":"Dictionary","text":""},{"location":"Dict/#c","title":"C#","text":"<pre><code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        //count words\n\n        var wordList = new List&lt;string&gt; { \"glass\", \"table\", \"chair\", \"chair\" };\n        var words = new Dictionary&lt;string, int&gt;();\n        foreach (var item in wordList)\n        {\n            if (words.ContainsKey(item))\n            {\n                words[item] = (int)words[item] + 1;\n            }\n            else\n            {\n                words.Add(item, 1);\n            }\n        }\n\n        Console.WriteLine();\n        foreach (var item in words)\n        {\n            Console.Write(\"{0}:{1} \", item.Key, item.Value);\n        }\n\n        Console.WriteLine();\n        var sorted = words.OrderBy(x =&gt; -x.Value);\n        foreach (var item in sorted)\n        {\n            Console.Write(\"{0}:{1} \", item.Key, item.Value);\n        }\n    }\n}\n</code></pre>"},{"location":"Dict/#dart","title":"Dart","text":"<pre><code>\nimport 'dart:collection';\n\nvoid main(List&lt;String&gt; arguments) {\n\n  //count words\n\n  var wordList = [\"glass\", \"table\", \"chair\", \"chair\"];\n  var words = Map();\n  for (var item in wordList) {\n      if (words.containsKey(item)) {\n        words[item] += 1;\n      }\n      else {\n        words[item] = 1;\n      }\n  }\n  print('$words');\n\n  //sort values descending order\n  var sorted = sortMap(words);\n  print('$sorted');\n}\n\nLinkedHashMap sortMap(Map map) {\n  var mapk = map.keys.toList();\n  //sort keys according to values descending order\n  mapk.sort((k1, k2) =&gt; map[k2].compareTo(map[k1]));\n  var outMap = LinkedHashMap.fromIterable(mapk, key: (k) =&gt; k, value: (k) =&gt; map[k]);\n  return(outMap);\n}\n</code></pre>"},{"location":"Dict/#go","title":"Go","text":"<pre><code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc main() {\n    //count words\n\n    wordList := []string{\"glass\", \"table\", \"chair\", \"chair\"}\n    words := make(map[string]int)\n\n    for _, item := range wordList {\n        words[item]++\n    }\n    fmt.Printf(\"\\n%v\", words)\n\n    //sort by descending value\n    keys := make([]string, 0, len(words))\n\n    for key := range words {\n        keys = append(keys, key)\n    }\n    sort.Slice(keys, func(i, j int) bool {\n        return words[keys[i]] &gt; words[keys[j]]\n    })\n\n    for i := 0; i &lt; len(words); i++ {\n        fmt.Println(keys[i], words[keys[i]])\n    }\n}\n</code></pre>"},{"location":"Dict/#julia","title":"Julia","text":"<pre><code>wordList = String[\"glass\", \"table\", \"chair\", \"chair\"]\nwords = Dict()\n\nfor word in wordList\n    try\n        words[word] += 1    \n    catch\n        words[word] = 1\n    end    \nend\nprintln(words)\n\n# sort by descending value\nfunction mapSort(mapIn)\n    ks = collect(keys(mapIn))\n    vs = collect(values(mapIn))\n    kv = Tuple{String,Int64}[]\n\n    for ind in 1:lastindex(ks) \n        tup = (ks[ind], vs[ind])\n        push!(kv, tup)        \n    end\n    kv = sort(kv, by = x -&gt; x[2],  rev=true)\n    return kv\nend\n\nprintln(mapSort(words))\n</code></pre>"},{"location":"Dict/#nim","title":"Nim","text":"<pre><code>\nimport tables\nimport algorithm as al\n\n\n# count words\n\nvar wordList =  @[\"glass\", \"table\", \"chair\", \"chair\"]\nvar words = initOrderedTable[string, int]()\nfor item in wordList:\n  if words.hasKey(item):\n    words[item] += 1\n  else:\n    words.add(item, 1)\n\necho words\n\n# sort by descending value\nwords.sort(proc (x, y: (string, int)): int = x[1] - y[1], order = al.SortOrder.Descending)\n\necho words\n</code></pre>"},{"location":"Dict/#odin","title":"Odin","text":"<pre><code>\n#+feature dynamic-literals\npackage main\n\nimport \"core:fmt\"\nimport \"core:slice\"\n\nmain :: proc() {\n\n    // count words\n    word_list := []string{\"glass\", \"table\", \"chair\", \"chair\"}\n    words := make(map[string]int)\n\n    for item in word_list {\n        words[item] += 1\n    }\n    fmt.println(words)\n\n    // sort by descending value\n\n    Words_struct :: struct {\n        key: string,\n        value: int\n    }\n    ws_arr: [dynamic]Words_struct\n\n    for key in words {\n        append(&amp;ws_arr, Words_struct{key, words[key]})\n    }\n\n    slice.sort_by(ws_arr[:], proc(ws1: Words_struct, ws2: Words_struct) -&gt; bool {\n        return ws1.key &gt; ws2.key\n    })\n\n    for i := 0; i &lt; len(words); i += 1 {\n        fmt.println(ws_arr[i].key, words[ws_arr[i].key])\n    }\n}\n</code></pre>"},{"location":"Dict/#python","title":"Python","text":"<pre><code>\nfrom typing import Dict, List, Tuple\nfrom operator import itemgetter\n\n# count words\n\nword_list: List[str] = [\"glass\", \"table\", \"chair\", \"chair\"]\nwords: Dict[str, int] = {}\nfor item in word_list:\n    try:\n        words[item] += 1\n    except:\n        words[item] = 1\nprint(words)\n\n# sort by descending value\nwords_l: List[Tuple[str, int]] = list(words.items())\nwords_l = sorted(words_l, reverse=True, key=itemgetter(1))\nprint(words_l)\n</code></pre>"},{"location":"Dict/#rust","title":"Rust","text":"<pre><code>\nuse std::collections::HashMap;\nuse std::cmp::Reverse;\n\nfn main() {\n    //count words\n\n    let word_list = vec![\"glass\", \"table\", \"chair\", \"chair\"];\n    let mut words: HashMap&lt;String, usize&gt; = HashMap::new();\n    for item in word_list  {\n        let count = words.entry((*item).to_string()).or_insert(0);\n        *count += 1;\n    }\n\n    //get specific key value\n    let value = words.get(\"chair\").expect(\"no key\");\n\n    println!(\"{:?} {:?}\", &amp;words, value);   \n\n    //sort by descending value\n    let mut words_v: Vec&lt;_&gt; = words.iter().collect();\n    words_v.sort_by_key(|&amp;(word, count)| (Reverse(count), word));\n    println!(\"{:?}\", &amp;words_v);   \n}\n</code></pre>"},{"location":"Dict/#sing","title":"Sing","text":"<pre><code>\nrequires \"sio\";\nrequires \"sort\";\n\npublic fn singmain(argv [*]string) i32\n{\n    //count words\n\n    let word_list [*]string = {\"glass\", \"chair\",\"glass\", \"table\", \"chair\", \"chair\"};\n    var words map(string)i32;\n\n    for (elem in word_list) {\n        var value = words.get_safe(elem, -1);\n        if (value == -1) {\n            value = 1;\n        }\n        else {\n            value = value + 1;\n        }\n        words.insert(elem, value);\n    }\n    //get specified value\n    let value = words.get(\"chair\");\n    sio.print(\"\\n\\r chair: \" + string(value));    \n\n    //sort by descending value\n\n    var sort_index [*]i32;\n    var sort_keys [*]i32;\n    var map_keys [*]string;\n    sort.indexInit(sort_index, words.size());\n    for (i in 0:words.size()) {\n        map_keys.push_back(words.key_at(i));\n        sort_keys.push_back(words.value_at(i));\n    }\n    sort.ksort_i32(sort_index, sort_keys);\n\n    var rev_index [*]i32;     // reverse sort_index\n    let i_size = sort_index.size();\n    for (i in 0:i_size) {\n        rev_index.push_back(sort_index[i_size -i -1]);\n    }\n\n    sio.print(\"\\n\\r\");  \n    for (i in rev_index) {\n        sio.print(\"\\n\\r\" + map_keys[i]);  \n    }\n    return(0);\n}\n</code></pre>"},{"location":"Dict/#typescript","title":"Typescript","text":"<pre><code>\nlet wordList: string[] = [ \"glass\", \"chair\", \"table\", \"chair\"];\nlet words: Map&lt;string, number&gt; = new Map();\nfor (var item of wordList) {\n    if (words.has(item) ) {\n        words.set(item, words.get(item) + 1);\n    }\n    else {\n        words.set(item, 1);\n    }\n}\nconsole.log(words);\n\nlet sorted = new Map(Array.from(words.entries()).sort((a, b) =&gt; \n    {return (Array.from(a.values())[0] &gt; Array.from(b.values())[0] ?  -1 : 1)}));\n\nconsole.log(sorted);\n</code></pre>"},{"location":"Dict/#v-vlang","title":"V (vlang)","text":"<pre><code>fn main() {\n    //count words\n\n    word_list := [\"glass\", \"table\", \"chair\", \"chair\"]\n    mut words := map[string]int{}\n\n    for _, item in  word_list {\n        words[item]++\n    }\n    print(\"\\n$words\")\n\n    //sort by descending value\n    map_sorted :=  map_sort(words)\n    print(\"\\n$map_sorted\")\n}\n\nfn map_sort(map_in map[string]int) []KeyVal {\n    //map to array\n    mut map_s := []KeyVal{}\n    for k, v in  map_in {\n        map_s &lt;&lt; KeyVal{k, v}\n    }\n    map_s.sort(a.val &gt; b.val)\n    return map_s\n}\n\nstruct KeyVal {\n    key string\n    val int\n}\n</code></pre>"},{"location":"Excel%20Read/","title":"Excel Read","text":""},{"location":"Excel%20Read/#python","title":"Python","text":"<pre><code>\n# pip install pandas\n# pip install numpy\n# pip install xlrd\n\nimport pandas as pd\nimport numpy as np\n\n\"\"\"\ncol0    col1    col2    col3\nxx      xx      xx      xx\nitem1      1       2       3\nitem2      4       5       6\n\"\"\"\n\ndf = pd.read_excel(\"tmp.xlsx\", \"Sheet1\")\n\n# get cols, discard firt row\ncol1 = df[\"col1\"][1:]\ncol2 = df[\"col2\"][1:]\ncol3 = df[\"col3\"][1:]\nfor num in col1:\n    print(f\"{num}\")\n\n# get item2 row, numeric values only\nnum_cols = df.columns[1:]\nrow2 = df[df[\"col0\"] == \"item2\"][num_cols]\nrow2 = row2.to_numpy(dtype=float)[0]\nfor num in row2:\n    print(f\"{num}\")\n</code></pre>"},{"location":"Excel%20Read/#rust","title":"Rust","text":"<pre><code>\n//[dependencies]\n//calamine = \"0.16.1\"\nuse calamine::{open_workbook, Reader, Xlsx};\nuse std::collections::HashMap;\n\nfn main() {\n    /*\n    col0    col1    col2    col3\n    xx      xx      xx      xx\n    item1      1       2       3\n    item2      4       5       6\n    */\n    let mut excel: Xlsx&lt;_&gt; = open_workbook(\"tmp.xlsx\").unwrap();\n\n    let content = excel.worksheet_range(\"Sheet1\").unwrap().unwrap();\n    let mut col_names: Vec&lt;&amp;str&gt; = vec![];\n    let mut rows: Vec&lt;Vec&lt;f64&gt;&gt; = vec![];\n    let mut named_rows: HashMap&lt;&amp;str, Vec&lt;f64&gt;&gt; = HashMap::new();\n\n    let mut ind = 0;\n    for item in content.rows() {\n        if ind == 0 {\n            for elem in item {\n                let col_name = match elem {\n                    calamine::DataType::String(strt) =&gt; strt,\n                    _ =&gt; \"\",\n                };\n                col_names.push(col_name);\n            }\n        } else if ind &gt; 1 {\n            let mut row: Vec&lt;f64&gt; = vec![];\n            let mut name: &amp;str = \"\";\n            for elem in item {\n                match elem {\n                    calamine::DataType::Float(num) =&gt; {\n                        row.push(*num);\n                        ()\n                    }\n                    calamine::DataType::String(strt) =&gt; {\n                        name = &amp;strt;\n                        ()\n                    }\n                    _ =&gt; (),\n                };\n            }\n            rows.push(row.clone());\n            named_rows.entry(name).or_insert(row);\n        }\n        ind = ind + 1;\n    }\n\n    // get named column\n    let col = get_column(rows, \"col1\", col_names).unwrap();\n    println!(\"{:?}\", col);\n\n    // get named row\n    println!(\"{:?}\", named_rows.get(\"item1\").unwrap());\n}\n\nfn get_column(\n    rows: Vec&lt;Vec&lt;f64&gt;&gt;,\n    col_name: &amp;str,\n    col_names: Vec&lt;&amp;str&gt;,\n) -&gt; Result&lt;Vec&lt;f64&gt;, &amp;'static str&gt; {\n    // get col index\n    let mut col_index: i32 = -1;\n    for (ind, item) in col_names.iter().enumerate() {\n        if *item == col_name {\n            col_index = ind as i32;\n            break;\n        }\n    }\n    if col_index == -1 {\n        Err(\"Column not found\")\n    } else {\n        let mut col: Vec&lt;f64&gt; = vec![];\n        for row in rows {\n            col.push(row[col_index as usize]);\n        }\n        Ok(col)\n    }\n}\n</code></pre>"},{"location":"Execution%20time/","title":"Execution time","text":""},{"location":"Execution%20time/#c","title":"C#","text":"<pre><code>\n// exe -&gt; dotnet publish -c Release -r win10-x64 --self-contained true\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\n\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var timer = Stopwatch.StartNew(); //START MEASURE\n        var perfects = classifyPerfects(20001);\n        timer.Stop(); //END MEASURE\n\n        foreach (var item in perfects)\n        {\n            Console.Write(\"{0} \", item);\n        }\n        Console.WriteLine(\"\\nElapsed: {0}ms\", timer.ElapsedMilliseconds);\n    }\n\n    public static List&lt;int&gt; classifyPerfects(int num) {\n        var perfects = new List&lt;int&gt;();\n        for (int n = 1; n &lt; num; n++) {\n            var divisors = findProperDivisor(n);\n            // list_sum\n            var sum = divisors.Sum();\n            if (sum == n) {\n                perfects.Add(n);\n            }\n        }\n        return perfects;\n    }\n\n    public static List&lt;int&gt; findProperDivisor(int n) {\n        var divisors = new List&lt;int&gt;();\n        for (int i = 1; i &lt; (n / 2) + 1; i++) {\n            if (n % i == 0) {\n                divisors.Add(i);\n            }\n        }\n        return divisors;\n    }\n}\n</code></pre>"},{"location":"Execution%20time/#dart","title":"Dart","text":"<pre><code>\n\nvoid main(List&lt;String&gt; arguments) {\n  var stopwatch = Stopwatch();\n\n  stopwatch.start(); //START MEASURE\n  var perfects = classifyPerfect(20001);\n  stopwatch.stop(); //END MEASURE\n\n  var elapsed = stopwatch.elapsedMilliseconds;\n\n  print('$perfects');\n  print('Elapsed: $elapsed ms');\n}\n\nList&lt;int&gt; classifyPerfect(int nnum) {\n  List&lt;int&gt; perfects = [];\n  for (var n = 1; n &lt; nnum; n++) {\n    var divisors = findProperDivisor(n);\n    var sum = 0;\n    if (divisors.isNotEmpty) {\n      sum = divisors.fold(0, (a, b) =&gt; a + b);\n    }\n    if (sum == n) {\n      perfects.add(n);\n    }\n  }\n  return perfects;\n}\n\nList&lt;int&gt; findProperDivisor(int n) {\n  List&lt;int&gt; divisors = [];\n  var endloop = n ~/ 2 + 1;\n  for (var i = 1; i &lt; endloop; i++) {\n    if (n % i == 0) {\n      divisors.add(i);\n    }\n  }\n  return divisors;\n}\n</code></pre>"},{"location":"Execution%20time/#go","title":"Go","text":"<pre><code>\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n\n    start := time.Now() //START MEASURE\n    perfects := classifyPerfect(20001)\n    duration := time.Since(start) //END MEASURE\n\n    fmt.Printf(\"\\n%v\", perfects)\n    fmt.Printf(\"\\nElapsed: %v\", duration)\n}\n\nfunc classifyPerfect(nnum int) []int {\n    perfects := []int{}\n    for n := 1; n &lt; nnum; n++ {\n        divisors := findProperDivisor(n)\n        sum := 0\n        for i := 0; i &lt; len(divisors); i++ {\n            sum += divisors[i]\n        }\n\n        if sum == n {\n            perfects = append(perfects, n)\n        }\n    }\n    return perfects\n}\n\nfunc findProperDivisor(n int) []int {\n    divisors := []int{}\n    endloop := int(n/2) + 1\n    for i := 1; i &lt; endloop; i++ {\n        if n%i == 0 {\n            divisors = append(divisors, i)\n        }\n    }\n    return divisors\n}\n</code></pre>"},{"location":"Execution%20time/#julia","title":"Julia","text":"<pre><code>#import Pkg; Pkg.add(\"BenchmarkTools\")\nusing BenchmarkTools\n\nfunction find_proper_divisor(n)\n    divisors = Int64[]\n    endloop = n/2 + 1\n    for i in 1:endloop\n        if n%i == 0 \n            append!(divisors, i)\n        end            \n    end\n    return divisors\nend\n\nfunction classify_perfect(nnum)\n    perfects = Int64[]\n    for n in 2:nnum \n        divisors = find_proper_divisor(n)\n        sum = 0\n        for i in 1:lastindex(divisors)\n            sum += divisors[i]\n        end\n\n        if sum == n \n            append!(perfects, n)\n        end\n    end\n    return perfects\nend\n\n@btime perfects = classify_perfect(20001)\n</code></pre>"},{"location":"Execution%20time/#nim","title":"Nim","text":"<pre><code>\n# exe -&gt; nim c -d:release  &lt;filename&gt;\nimport times as ts\nimport sequtils as sq\n\nproc findProperDivisors(n: int32): seq[int32] =\n    var divisors: seq[int32]\n    let endloop: int32 = int32(n / 2)\n    for i in 1..endloop:\n        if (n mod i) == 0:\n            divisors.add(i)\n    divisors\n\nproc classifyPerfects(num: int32): seq[int32] =\n    var perfects: seq[int32]\n    for n in 1..num:\n        let divisors = findProperDivisors(n)\n        var sumd = 0\n        if divisors.len &gt; 0:\n            sumd = divisors.foldl(a + b)\n        if sumd == n:\n            perfects.add(n)\n    perfects\n\nvar start = ts.getTime() # START MEASURE\nvar perfects = classifyPerfects(20001)\nvar endt = ts.getTime() # END MEASURE\n\necho perfects\necho endt - start\n</code></pre>"},{"location":"Execution%20time/#odin","title":"Odin","text":"<pre><code>\npackage main\n\nimport \"core:fmt\"\nimport \"core:time\"\n\nmain :: proc() {\n    start := time.now() // START MEASURE\n    perfects := classify_perfect(20001)\n    duration := time.since(start) // END MEASURE\n\n    fmt.println(\"\\n\", perfects)\n    fmt.println(\"\\nElapsed: \", duration)\n\n    delete(perfects)\n}\n\nclassify_perfect :: proc(nnum: int) -&gt; [dynamic]int {\n    perfects := [dynamic]int{}\n    for n in 1 ..&lt; nnum {\n        divisors := find_proper_divisor(n)\n        defer delete(divisors)\n        sum := 0\n        for d in divisors {\n            sum += d\n        }\n        if sum == n {\n            append(&amp;perfects, n)\n        }\n    }\n    return perfects\n}\n\nfind_proper_divisor :: proc(n: int) -&gt; [dynamic]int {\n    divisors := [dynamic]int{}\n    endloop := n / 2 + 1\n    for i in 1 ..&lt; endloop {\n        if n % i == 0 {\n            append(&amp;divisors, i)\n        }\n    }\n    return divisors\n}\n</code></pre>"},{"location":"Execution%20time/#python","title":"Python","text":"<pre><code>\nimport time\nfrom typing import List\n\n\ndef find_proper_divisors(n: int) -&gt; List[int]:\n    divisors: List[int] = []\n    for i in range(1, int((n / 2) + 1)):\n        if n % i == 0:\n            divisors += [i]\n    return divisors\n\ndef classify_perfects(num: int) -&gt; List[int]:\n    perfects: List[int] = []\n    for n in range(1, num):\n        divisors = find_proper_divisors(n)\n        # list_sum\n        sumd = sum(divisors)\n        if sumd == n:\n            perfects += [n]\n    return perfects\n\nstart_time: float = time.time() # START MEASURE\nperfects = classify_perfects(20001)\nend_time: float = time.time() # END MEASURE\n\nfor item in perfects:\n    print(f\"{item}\")\nprint(f\"Elapsed: {((end_time - start_time)*1000)} ms\")\n</code></pre>"},{"location":"Execution%20time/#rust","title":"Rust","text":"<pre><code>\n//exe -&gt; cargo build --release\nuse std::time::{Instant};\n\nfn main() {\n    let now = Instant::now(); //START MEASURE\n    let perfects = classify_perfect(20001);\n    let new_now = Instant::now();  //END MEASURE\n\n    println!(\"{:?}\", perfects);\n    println!(\"Elapsed: {:?}\", new_now.duration_since(now));\n\n}\n\nfn classify_perfect(num: i32) -&gt; Vec&lt;i32&gt; {\n    let mut perfects = vec![];\n    for n in 1..num {\n        let divisors = find_proper_divisors(n);\n\n        // list_sum\n        let sum: i32 = divisors.iter().sum();\n        if sum == n {\n            perfects.push(n);\n        }\n    }\n    perfects\n}\n\nfn find_proper_divisors(n: i32) -&gt; Vec&lt;i32&gt; {\n    let mut divisors = vec![];\n    for i in 1..((n / 2) + 1) {\n        if n % i == 0 {\n            divisors.push(i);\n        }\n    }\n    return divisors;\n}\n</code></pre>"},{"location":"Execution%20time/#sing","title":"Sing","text":"<pre><code>requires \"sio\";\nrequires \"sys\";\n\npublic fn singmain(argv [*]string) i32\n{\n\n    let now = sys.clock(); //START MEASURE\n    let perfects = classify_perfect(20001);\n    let  new_now = sys.clock();  //END MEASURE\n    let diff = sys.clocksDiff(now, new_now); //microseconds\n\n    sio.print(\"\\n\\r\");\n    if (perfects != null) {\n        for (i in 0:perfects.size()) {\n            sio.print(string((*perfects)[i]) + \", \");\n        }\n    }\n    sio.print(\"\\n\\rElapsed: \" + string(diff) + \" us\");\n\n    return(0);\n}\n\nfn classify_perfect(num i32)  *[*]i32 {\n    var perfects [*]i32;\n    for (n in 1:num) {\n        let divisors = find_proper_divisors(n);\n\n        // list_sum\n        //      mandatory pointer check\n        if (divisors != null) {\n            var sum = 0;\n            for (j in 0:divisors.size()) {\n                sum = sum + (*divisors)[j]; \n            }\n            if (sum == n) {\n                perfects.push_back(n);\n            }\n        }\n    }\n    return (&amp;perfects);\n}\n\nfn find_proper_divisors(n i32) *[*]i32 {\n    var divisors [*]i32;\n    for (i in 1:((n / 2) + 1)) {\n        if ((n % i) == 0) {\n            divisors.push_back(i);\n        }\n    }\n    return (&amp;divisors);\n}\n</code></pre>"},{"location":"Execution%20time/#typescript","title":"TypeScript","text":"<pre><code>\nconsole.time(\"Elapsed\"); //START MEASURE\nlet perfects = classifyPerfect(20001);\nconsole.timeEnd(\"Elapsed\"); //END MEASURE\nconsole.log(`${perfects}`);\n\nfunction classifyPerfect(nnum: number) {\n    let perfects = [];\n    for (var n = 1; n &lt; nnum; n++) {\n        let divisors = findProperDivisor(n);\n        var sum = 0;\n        if (divisors.length &gt; 0) {\n            divisors.forEach(x =&gt; sum += x);\n        }\n        if (sum == n) {\n            perfects.push(n);\n        }\n    }\n    return perfects;\n}\n\nfunction findProperDivisor(n: number) {\n    let divisors = [];\n    let endloop = Math.floor(n / 2) + 1;\n    for (let i = 1; i &lt; endloop; i++) {\n        if (n % i == 0) {\n            divisors.push(i);\n        }\n    }\n    return divisors;\n}\n</code></pre>"},{"location":"Execution%20time/#v-vlang","title":"V (vlang)","text":"<pre><code>// note: int seems to be a i32 also on a 64bit machine\n// so used i64 instead of int\nimport time\n\nfn main() {\n    stopwatch := time.new_stopwatch() //START MEASURE\n    perfects := classify_perfect(20001)\n    duration := stopwatch.elapsed() //END MEASURE\n\n    println(\"\\n$perfects\")\n    println(\"\\nElapsed: $duration\")\n}\n\n\nfn classify_perfect(nnum i64) []i64 {\n    mut perfects := []i64{}\n    for n := 1; n &lt; nnum; n++ {\n        mut divisors := find_proper_divisor(n)\n        mut sum := i64(0)\n        for i := 0; i &lt; divisors.len; i++ {\n            sum += divisors[i]\n        }\n\n        if sum == n {\n            perfects &lt;&lt; n\n        }\n    }\n    return perfects\n}\n\nfn find_proper_divisor(n i64) []i64 {\n    mut divisors := []i64{}\n    endloop := i64(n/2) + 1\n    for i := 1; i &lt; endloop; i++ {\n        if n%i == 0 {\n            divisors &lt;&lt; i\n        }\n    }\n    return divisors\n}\n</code></pre>"},{"location":"FaceDetect/","title":"Face Detection","text":""},{"location":"FaceDetect/#python","title":"Python","text":""},{"location":"FaceDetect/#rust","title":"Rust","text":"<pre><code>\n//compile in release for good performance\n//stream video with simple shapes overlay\n\n//[dependencies]\n//camera_capture = \"0.5.0\"\n//minifb = \"0.15.3\"\n//image = \"0.22.4\"\n//imageproc = \"0.19.2\"\n//rustface = \"0.1.2\"\n\nuse image::GrayImage;\nuse image::{imageops, DynamicImage, ImageBuffer, Rgb, RgbImage};\nuse imageproc::drawing::{draw_hollow_rect_mut};\nuse imageproc::rect::Rect;\nuse minifb::{Key, Window, WindowOptions};\nuse rustface::{Detector, FaceInfo, ImageData};\n\nconst WIDTH: usize = 200;\nconst HEIGHT: usize = 200;\n\nfn main() {\n    let mut detector = rustface::create_detector(\"seeta_fd_frontal_v1.0.bin\").unwrap();\n    detector.set_min_face_size(20);\n    detector.set_score_thresh(2.0);\n    detector.set_pyramid_scale_factor(0.8);\n    detector.set_slide_window_step(4, 4);\n\n    let cam = camera_capture::create(0).expect(\"Camera create error\");\n    //let mut cam_iter = cam.fps(0.5).unwrap().start().unwrap();\n    let mut cam_iter = cam.start().unwrap();\n    let mut window = Window::new(\n        \"image, click or press ESC to exit\",\n        WIDTH,\n        HEIGHT,\n        WindowOptions {\n            ..WindowOptions::default()\n        },\n    )\n    .expect(\"Error opening window\");\n    while window.is_open() &amp;&amp; !window.is_key_down(Key::Escape) {\n        let img = cam_iter.next().unwrap();\n        let (width, height) = img.dimensions();\n        //Resize to WIDTH, HEIGHT -&gt; a DynamicImage is needed\n        let img_r = RgbImage::from_vec(width, height, img.to_vec()).unwrap();\n        let img_d = DynamicImage::ImageRgb8(img_r);\n        let img_d_resized = img_d.resize_exact(WIDTH as u32, HEIGHT as u32, imageops::Nearest);\n\n        //To draw pixels, an ImageBuffer is needed back\n        let mut img_g_resized =\n            ImageBuffer::from_raw(WIDTH as u32, HEIGHT as u32, img_d_resized.raw_pixels()).unwrap();\n\n        let faces = detect_faces(&amp;mut *detector, &amp;img_d_resized.to_luma());\n\n        for face in faces {\n            let bbox = face.bbox();\n            let rect = Rect::at(bbox.x(), bbox.y()).of_size(bbox.width(), bbox.height());\n\n            draw_hollow_rect_mut(&amp;mut img_g_resized, rect, Rgb([255, 0, 0]));\n        }\n\n        let u32_buffer: Vec&lt;u32&gt; = img_g_resized\n            .chunks(3)\n            .map(|v| ((v[0] as u32) &lt;&lt; 16) | ((v[1] as u32) &lt;&lt; 8) | v[2] as u32)\n            .collect();\n\n        window\n            .update_with_buffer(&amp;u32_buffer, WIDTH, HEIGHT)\n            .expect(\"Error on update\");\n    }\n}\n\nfn detect_faces(detector: &amp;mut dyn Detector, gray: &amp;GrayImage) -&gt; Vec&lt;FaceInfo&gt; {\n    let (width, height) = gray.dimensions();\n    let mut image = ImageData::new(gray.as_ptr(), width, height);\n    let faces = detector.detect(&amp;mut image);\n    faces\n}\n</code></pre>"},{"location":"File%20Walk/","title":"File Walk","text":""},{"location":"File%20Walk/#dart","title":"Dart","text":"<pre><code>\nimport 'dart:io';\n\nvoid allFiles(String startingDir, String extension) {\n  final dir = Directory(startingDir);\n\n  // Check if the starting directory exists\n  if (!dir.existsSync()) {\n    print('Directory does not exist: $startingDir');\n    return;\n  }\n\n  var files = dir.listSync(recursive: true);\n\n  for (var entity in files) {\n    if (entity is File) {\n      if (entity.path.endsWith(extension)) {\n        print(entity.path);\n      }\n    } else if (entity is Directory) {\n      // print('FOLDER: ${entity.path}');\n    }\n  }\n}\n\nvoid main() {\n  allFiles('/', '.xml');\n}\n</code></pre>"},{"location":"File%20Walk/#go","title":"Go","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"path/filepath\"\n    \"strings\"\n)\n\nfunc main() {\n    allFiles(\"/\", \".xml\")\n}\n\nfunc allFiles(startingDir string, extension string) {\n\n    filepath.Walk(startingDir, func(fPath string, info os.FileInfo, err error) error {\n        if err != nil {\n            fmt.Println(err)\n            return nil\n        }\n        if !info.IsDir() {\n            if strings.HasSuffix(fPath, extension) {\n                fmt.Println(fPath)\n            }\n        } else {\n            //Println(\"FOLDER: \", fPath)\n        }\n        return nil\n    })\n}\n</code></pre>"},{"location":"File%20Walk/#odin","title":"Odin","text":"<pre><code>\npackage main\n\nimport \"core:fmt\"\nimport \"core:os\"\nimport \"core:path/filepath\"\nimport \"core:strings\"\n\nmain :: proc() {\n    outr := [dynamic]string{}\n    all_files(\"/\", \".xml\", &amp;outr)\n    fmt.println(outr)\n    delete(outr)\n}\n\nall_files :: proc(starting_dir: string, extension: string, outr: ^[dynamic]string) {\n    // no closures, must concentrate all parameters in a single struct\n    // to pass as rawptr\n    Params :: struct {\n        extension: string,\n        outr:      ^[dynamic]string,\n    }\n    params := Params{extension, outr}\n\n    filepath.walk(\n        starting_dir,\n        proc(info: os.File_Info, err: os.Error, params: rawptr) -&gt; (os.Error, bool) {\n            fpath := info.fullpath\n            if err != nil {\n                fmt.println(err)\n                return nil, false\n            }\n            if !info.is_dir {\n                extension := (^Params)(params).extension\n                outr := (^Params)(params).outr\n                if strings.has_suffix(fpath, extension) {\n                    fmt.println(fpath)\n                    ret, _ := append(outr, fpath)\n                    if ret &lt;= 0 {\n                        fmt.println(\"no append\")\n                    }\n                }\n            }\n            return nil, false\n        },\n        &amp;params,\n    )\n}\n</code></pre>"},{"location":"File%20Walk/#python","title":"Python","text":"<pre><code>import glob\n\nfor name in glob.glob(\"/\" + \"**/*.xml\", recursive=True):\n    print(name)\n\n</code></pre>"},{"location":"File%20Walk/#rust","title":"Rust","text":"<pre><code>use std::fs;\nuse std::path::Path;\n\nfn main() {\n    all_files(\"/\", \"xml\");\n}\n\nfn all_files(starting_dir: &amp;str, extension: &amp;str) {\n    let root_path = Path::new(starting_dir);\n    if root_path.is_dir() {\n        match fs::read_dir(root_path) {\n            Ok(dirs) =&gt; {\n                for entry in dirs {\n                    let entry = entry.unwrap();\n                    let path = entry.path();\n                    if path.is_dir() {\n                        all_files(path.to_str().unwrap(), extension);\n                    } else if path.extension().unwrap_or_default() == extension {\n                        let file_path = format!(\"{}\", path.display());\n                        println!(\"{}\", file_path);\n                    }\n                }\n            }\n            Err(_) =&gt; println!(\"No permissions for: {}\", root_path.to_str().unwrap()),\n        }\n    }\n}\n\n</code></pre>"},{"location":"Fltk/","title":"Fltk","text":""},{"location":"Fltk/#rust","title":"Rust","text":"<pre><code>\n//[dependencies]\n//fltk = \"0.16.5\"\nuse fltk::{app::*, button::*, frame::*, window::*};\n\nconst WIN_X: i32 = 50;\nconst WIN_Y: i32 = 50;\nconst WIN_WIDTH: i32 = 800;\nconst WIN_HEIGHT: i32 = 600;\nconst B_W: i32 = 80;\nconst B_H: i32 = 40;\n\nfn main() {\n    let app = App::default().with_scheme(Scheme::Gtk);\n\n    let mut wind = Window::new(WIN_X, WIN_Y, WIN_WIDTH, WIN_HEIGHT, \"Fltk Test\");\n    let bt1_x = WIN_X + 10;\n\n    let mut bt1 = Button::new(bt1_x, WIN_Y + 10, B_W, B_H, \"Press\");\n    bt1.set_tooltip(\"Press to increment counter\");\n\n    let ct1_y = WIN_Y + B_H + 10;\n    let mut ct1 = Frame::new(bt1_x, ct1_y + 10, B_W, B_H, \"0\");\n\n    bt1.set_callback2(move |bt| {\n        bt.set_label(\"Pressed\");\n        let count = (ct1.label().parse::&lt;i32&gt;().unwrap() + 1).to_string();\n        ct1.set_label(&amp;count);\n    });\n\n    wind.make_resizable(true);\n    wind.end();\n    wind.show();\n\n    app.run().unwrap();\n}\n\n\n</code></pre>"},{"location":"Flutter/","title":"Flutter","text":""},{"location":"Flutter/#dynamic-list","title":"Dynamic List","text":"<pre><code>\nimport 'package:flutter/material.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'MyApp',\n      theme: new ThemeData(\n        primarySwatch: Colors.green,\n      ),\n      home: Scaffold(\n        appBar: new AppBar(\n          title: new Text('MyApp'),\n        ),\n        body: BodyLayout(),\n      ),\n    );\n  }\n}\n\nclass BodyLayout extends StatefulWidget {\n  @override\n  BodyLayoutState createState() {\n    return new BodyLayoutState();\n  }\n}\n\nclass BodyLayoutState extends State&lt;BodyLayout&gt; {\n  var lst = [\"aaa - tap to copy\", \"bbb - tap to copy\"];\n\n  @override\n  Widget build(BuildContext context) {\n    return _listBuild(lst);\n  }\n\n  ListView _listBuild(List lst) {\n    return ListView.builder(\n      itemCount: lst.length,\n      itemBuilder: (BuildContext context, int index) {\n        return ListTile(\n          leading: CircleAvatar(\n            backgroundColor: Colors.lightGreenAccent,\n            child: Text('${index + 1}'),\n          ),\n          title: Text('${lst[index]}'),\n          subtitle: Text('${lst[index]}'),\n          onTap: () {\n            setState(() {\n              lst.add(lst[index]);\n            });\n          },\n        );\n      },\n    );\n  }\n}\n</code></pre>"},{"location":"Flutter/#page-navigation","title":"Page Navigation","text":"<pre><code>\nimport 'package:flutter/material.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'MyApp',\n      theme: new ThemeData(\n        primarySwatch: Colors.green,\n      ),\n      home: Scaffold(\n        appBar: new AppBar(\n          title: new Text('MyApp'),\n        ),\n        body: bodyLayout(),\n      ),\n    );\n  }\n}\n\nWidget bodyLayout() {\n  var lst = [\"aaa\", \"bbb\"];\n  var pages = [ClassPageAAA(), ClassPageBBB()];\n\n  return ListView.builder(\n      itemCount: lst.length,\n      itemBuilder: (BuildContext context, int index) {\n        return ListTile(\n          leading: CircleAvatar(\n            backgroundColor: Colors.lightGreenAccent,\n            child: Text('${index + 1}'),\n          ),\n          title: Text('${lst[index]}'),\n          subtitle: Text('${lst[index]}'),\n          trailing: IconButton(\n              icon: Icon(Icons.keyboard_arrow_right),\n              onPressed: () {\n                Navigator.push(\n                  context,\n                  MaterialPageRoute(builder: (context) =&gt; pages[index]),\n                );\n              }),\n        );\n      });\n}\n\nMaterialApp _page(BuildContext context, String text) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: text,\n      theme: new ThemeData(\n        primarySwatch: Colors.green,\n      ),\n      home: Scaffold(\n        appBar: new AppBar(\n            title: new Text(text),\n            leading: IconButton(\n              icon: Icon(Icons.arrow_back),\n              onPressed: () =&gt; Navigator.pop(context, false),\n            )),\n        body: Text('Page $text'),\n      ),\n    );\n}\n\nclass ClassPageAAA extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return _page(context, 'AAA');\n  }\n}\n\nclass ClassPageBBB extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return _page(context, 'BBB');\n  }\n}\n</code></pre>"},{"location":"Flutter/#input-fields","title":"Input Fields","text":"<pre><code>\nimport 'package:flutter/material.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'MyApp',\n      theme: new ThemeData(\n        primarySwatch: Colors.green,\n      ),\n      home: Scaffold(\n        appBar: new AppBar(\n          title: new Text('MyApp'),\n        ),\n        body: BodyLayout(),\n      ),\n    );\n  }\n}\n\nclass BodyLayout extends StatefulWidget {\n  @override\n  BodyLayoutState createState() {\n    return new BodyLayoutState();\n  }\n}\n\nclass DataToElab {\n  String f1, f2;\n  DataToElab([this.f1 = '0', this.f2 = '0']);\n}\n\nclass BodyLayoutState extends State&lt;BodyLayout&gt; {\n  final contr1 = TextEditingController(text: '0');\n  final contr2 = TextEditingController(text: '0');\n  final contr3 = TextEditingController(text: '0');\n  DataToElab _dElab = DataToElab();\n\n  String _elabFields(DataToElab dElab) {\n    var add1 = double.parse(dElab.f1);\n    var add2 = double.parse(dElab.f2);\n    var res = add1 + add2;\n    return '$res';\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Form(\n      child: ListView(\n        children: &lt;Widget&gt;[\n          TextFormField(\n            controller: contr1,\n            decoration: const InputDecoration(\n              icon: const Icon(Icons.euro_symbol),\n              hintText: 'Enter number',\n              labelText: 'First',\n            ),\n            onFieldSubmitted: (text) {\n              setState(() {\n                _dElab.f1 = text;\n                var res = _elabFields(_dElab);\n                contr3.text = res;\n              });\n            },\n          ),\n          TextFormField(\n            controller: contr2,\n            decoration: const InputDecoration(\n              icon: const Icon(Icons.euro_symbol),\n              hintText: 'Enter number',\n              labelText: 'Second',\n            ),\n            onFieldSubmitted: (text) {\n              setState(() {\n                _dElab.f2 = text;\n                var res = _elabFields(_dElab);\n                contr3.text = res;\n              });\n            },\n          ),\n          TextFormField(\n            controller: contr3,\n            decoration: const InputDecoration(\n              icon: const Icon(Icons.add_circle),\n              labelText: 'Result',\n            ),\n          ),\n          Padding(\n            padding: const EdgeInsets.symmetric(horizontal: 64.0),\n            child: RaisedButton(\n              onPressed: () {\n                _dElab.f1 = contr1.text;\n                _dElab.f2 = contr2.text;\n                var res = _elabFields(_dElab);\n                contr3.text = res;\n              },\n              child: Text('Calculate'),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"Flutter/#multiple-columns-form","title":"Multiple Columns form","text":"<pre><code>\nimport 'package:flutter/material.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'MyApp',\n      theme: new ThemeData(\n        primarySwatch: Colors.green,\n      ),\n      home: Scaffold(\n        appBar: new AppBar(\n          title: new Text('MyApp'),\n        ),\n        body: BodyLayout(),\n      ),\n    );\n  }\n}\n\nclass BodyLayout extends StatefulWidget {\n  @override\n  BodyLayoutState createState() {\n    return new BodyLayoutState();\n  }\n}\n\nclass DataToElab {\n  String f1, f2;\n  DataToElab([this.f1 = '0', this.f2 = '0']);\n}\n\nclass BodyLayoutState extends State&lt;BodyLayout&gt; {\n  final contr1 = TextEditingController(text: '0');\n  final contr2 = TextEditingController(text: '0');\n\n  Column _form1() {\n    return Column(\n      children: &lt;Widget&gt;[\n        Flexible(\n          child: TextFormField(\n            controller: contr1,\n            decoration: const InputDecoration(\n              icon: const Icon(Icons.euro_symbol),\n              hintText: 'Enter number',\n              labelText: 'First',\n            ),\n          ),\n        ),\n        Flexible(\n          child: TextFormField(\n            controller: contr2,\n            decoration: const InputDecoration(\n              icon: const Icon(Icons.euro_symbol),\n              hintText: 'Enter number',\n              labelText: 'Second',\n            ),\n          ),\n        ),\n      ],\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: [\n        Flexible(\n          child: Row(\n            children: [\n              Flexible(\n                child: _form1(),\n              ),\n              Flexible(\n                child: _form1(),\n              ),\n            ],\n          ),\n        ),\n        Flexible(\n          child: TextFormField(\n            //controller: contr3,\n            decoration: const InputDecoration(\n              icon: const Icon(Icons.add_circle),\n              labelText: 'Result',\n            ),\n          ),\n        ),\n        Flexible(\n          child: Padding(\n            padding: const EdgeInsets.symmetric(horizontal: 64.0),\n            child: RaisedButton(\n              onPressed: () {},\n              child: Text('Calculate'),\n            ),\n          ),\n        ),\n      ],\n    );\n  }\n}\n</code></pre>"},{"location":"Flutter/#persistence-keyvalue","title":"Persistence, Key/Value","text":"<pre><code>\n//dependencies:\n//  shared_preferences: ^0.5.6\n\nimport 'package:shared_preferences/shared_preferences.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'MyApp',\n      theme: new ThemeData(\n        primarySwatch: Colors.green,\n      ),\n      home: Scaffold(\n        appBar: new AppBar(\n          title: new Text('MyApp'),\n        ),\n        body: BodyLayout(),\n      ),\n    );\n  }\n}\n\nFuture&lt;SharedPreferences&gt; _getPrefs() async {\n  final prefs = await SharedPreferences.getInstance();\n  return prefs;\n}\n\nvoid _setVal(SharedPreferences prefs, String key, int value) {\n  prefs.setInt(key, value);\n}\n\nint _getVal(SharedPreferences prefs, String key) {\n  final value = prefs.getInt(key) ?? 0;\n  return value;\n}\n\nclass BodyLayout extends StatefulWidget {\n  @override\n  BodyLayoutState createState() {\n    return new BodyLayoutState();\n  }\n}\n\nclass BodyLayoutState extends State&lt;BodyLayout&gt; {\n  final contr3 = TextEditingController();\n  SharedPreferences _prefs;\n\n  @override\n  void initState() {\n    _getPrefs().then((onValue) {\n      _prefs = onValue;\n      //Init Output field with current key value\n      var tmp = _getVal(_prefs, 'key1');\n      contr3.text = '$tmp';\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Form(\n      child: ListView(\n        children: &lt;Widget&gt;[\n          TextFormField(\n            controller: contr3,\n            decoration: const InputDecoration(\n              icon: const Icon(Icons.add_circle),\n              labelText: 'Key Value',\n            ),\n          ),\n          Padding(\n            padding: const EdgeInsets.symmetric(horizontal: 64.0),\n            child: RaisedButton(\n              onPressed: () {\n                var tmp = _getVal(_prefs, 'key1');\n                tmp = tmp + 1;\n                _setVal(_prefs, 'key1', tmp);\n                contr3.text = '$tmp';\n              },\n              child: Text('Inc Key'),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"Flutter/#notification","title":"Notification","text":"<pre><code>\n//        &lt;uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\"/&gt;\n//dependencies:\n//  rxdart: ^0.24.0\n//  flutter_local_notifications: ^2.0.1\nimport 'dart:async';\nimport 'package:flutter/cupertino.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_local_notifications/flutter_local_notifications.dart';\nimport 'package:rxdart/subjects.dart';\n\nfinal FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\n    FlutterLocalNotificationsPlugin();\n\n/// Streams are created so that app can respond to notification-related events\n/// since the plugin is initialised in the `main` function\nfinal BehaviorSubject&lt;ReceivedNotification&gt; didReceiveLocalNotificationSubject =\n    BehaviorSubject&lt;ReceivedNotification&gt;();\n\nfinal BehaviorSubject&lt;String&gt; selectNotificationSubject =\n    BehaviorSubject&lt;String&gt;();\n\nclass ReceivedNotification {\n  ReceivedNotification({\n    @required this.id,\n    @required this.title,\n    @required this.body,\n    @required this.payload,\n  });\n\n  final int id;\n  final String title;\n  final String body;\n  final String payload;\n}\n\nFuture&lt;void&gt; main() async {\n  // needed if you intend to initialize in the `main` function\n  WidgetsFlutterBinding.ensureInitialized();\n\n  const AndroidInitializationSettings initializationSettingsAndroid =\n      AndroidInitializationSettings('app_icon');\n\n  /// Note: permissions aren't requested here just to demonstrate that can be\n  /// done later\n  final InitializationSettings initializationSettings =\n      InitializationSettings(android: initializationSettingsAndroid);\n  await flutterLocalNotificationsPlugin.initialize(initializationSettings,\n      onSelectNotification: (String payload) async {\n    selectNotificationSubject.add(payload);\n  });\n  runApp(\n    MaterialApp(\n      home: HomePage(),\n    ),\n  );\n}\n\nclass HomePage extends StatefulWidget {\n  @override\n  _HomePageState createState() =&gt; _HomePageState();\n}\n\nclass _HomePageState extends State&lt;HomePage&gt; {\n  int _counter = 0;\n  @override\n  void initState() {\n    super.initState();\n    _configureSelectNotificationSubject();\n  }\n\n  void _configureSelectNotificationSubject() {\n    selectNotificationSubject.stream.listen((String payload) async {\n      setState(() {\n        _counter = _counter + 1;\n      });\n    });\n  }\n\n  @override\n  void dispose() {\n    didReceiveLocalNotificationSubject.close();\n    selectNotificationSubject.close();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) =&gt; MaterialApp(\n        home: Scaffold(\n          appBar: AppBar(\n            title: const Text('Plugin example app'),\n          ),\n          body: Center(\n            child: RaisedButton(\n              child: Text('Notify $_counter'),\n              onPressed: () async {\n                await _showNotification();\n              },\n            ),\n          ),\n        ),\n      );\n\n  Future&lt;void&gt; _showNotification() async {\n    const AndroidNotificationDetails androidPlatformChannelSpecifics =\n        AndroidNotificationDetails(\n            'your channel id', 'your channel name', 'your channel description',\n            importance: Importance.max,\n            priority: Priority.high,\n            ticker: 'ticker');\n    const NotificationDetails platformChannelSpecifics =\n        NotificationDetails(android: androidPlatformChannelSpecifics);\n    await flutterLocalNotificationsPlugin.show(\n        0, 'plain title', 'plain body', platformChannelSpecifics,\n        payload: 'item x');\n  }\n}\n</code></pre>"},{"location":"Flutter/#isolate-rss-feed-nullable-values","title":"Isolate, RSS Feed, Nullable values","text":"<pre><code>\n//dependencies:\n//   http: ^0.13.3\n//   webfeed: ^0.7.0\n//   url_launcher: ^6.0.9\n//add in AndroidManifest.xml\n//    &lt;queries&gt;\n//      &lt;!-- If your app opens https URLs --&gt;\n//      &lt;intent&gt;\n//      &lt;action android:name=\"android.intent.action.VIEW\" /&gt;\n//      &lt;data android:scheme=\"https\" /&gt;\n//      &lt;/intent&gt;\n//    &lt;/queries&gt;\n//    &lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt;\nimport 'dart:async';\nimport 'package:flutter/material.dart';\nimport 'dart:isolate';\nimport 'package:http/http.dart' as http;\nimport 'package:webfeed/webfeed.dart';\nimport 'package:url_launcher/url_launcher.dart' as launch;\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatefulWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  _MyAppState createState() =&gt; _MyAppState();\n}\n\nclass _MyAppState extends State&lt;MyApp&gt; {\n  static const int MAX_LIST_LENGTH = 30;\n  late ReceivePort _receivePort;\n  late Isolate _isolate;\n  List&lt;String&gt; _titleLst = [];\n  List&lt;String&gt; _linkLst = [];\n  static bool _running = false;\n\n  void _start() async {\n    _receivePort = ReceivePort();\n    _isolate = await Isolate.spawn(_checkTimer, _receivePort.sendPort);\n    _running = true;\n    _receivePort.listen(_handleMessage, onDone: () {});\n  }\n\n  void _handleMessage(dynamic tuple) {\n    setState(() {\n      _titleLst.add(tuple[0]);\n      _linkLst.add(tuple[1]);\n      if (_titleLst.length &gt; MAX_LIST_LENGTH) {\n        _titleLst.removeLast();\n      }\n    });\n  }\n\n  static void _checkTimer(SendPort sendPort) async {\n    var period = 10;\n    Timer.periodic(new Duration(seconds: period), (Timer t) {\n      var feedUrl = \"https://hnrss.org/frontpage\";\n      http.read(Uri.parse(feedUrl)).then((text) {\n        var channel = RssFeed.parse(text);\n        //nullable values handling in Flutter 2.6.0\n        if (channel.items != null) {\n          //force channel.itens non null with '!'\n          for (var item in channel.items!) {\n            sendPort.send([item.title, item.link]);\n          }\n        }\n      });\n    });\n  }\n\n  void _stop() {\n    setState(() {\n      _running = false;\n    });\n    _receivePort.close();\n    _isolate.kill(priority: Isolate.immediate);\n  }\n\n  @override\n  void initState() {\n    _start();\n    super.initState();\n  }\n\n  @override\n  void dispose() {\n    try {\n      _isolate.kill();\n    } catch (e) {}\n\n    super.dispose();\n  }\n\n  ListView _listBuild(List lst, List links) {\n    return ListView.builder(\n      itemCount: lst.length,\n      itemBuilder: (BuildContext context, int index) {\n        return ListTile(\n          leading: CircleAvatar(\n            backgroundColor: Colors.lightGreenAccent,\n            child: Text('${index + 1}'),\n          ),\n          title: Text('${lst[index]}'),\n          onTap: () {\n            print(links[index]);\n            launch.launch(links[index]);\n          },\n        );\n      },\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Welcome to Flutter',\n      home: Scaffold(\n        appBar: AppBar(\n          title: const Text('HN Front Page'),\n        ),\n        body: _listBuild(_titleLst, _linkLst),\n        floatingActionButton: new FloatingActionButton(\n          onPressed: _running ? _stop : _start,\n          child: _running ? new Icon(Icons.stop) : new Icon(Icons.play_arrow),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"For%20Enumerate/","title":"For Enumerate","text":""},{"location":"For%20Enumerate/#c","title":"C#","text":"<pre><code>\nusing System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var lst = new List&lt;int&gt;{10, 20, 30};\n\n        foreach (var item in lst.Select((value, index) =&gt; new {index, value}))\n        {\n            Console.WriteLine(\"Index {0}, value {1}\", item.index, item.value); \n        }\n    }\n}\n</code></pre>"},{"location":"For%20Enumerate/#dart","title":"Dart","text":"<pre><code>\nvoid main() {\n  var lst = [10, 20, 30];\n  var ilist = lst.asMap();\n  ilist.forEach((index, value) =&gt;\n    print(\"Index $index, value $value\")\n  );\n}\n</code></pre>"},{"location":"For%20Enumerate/#go","title":"Go","text":"<pre><code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    lst := []int{10, 20, 30}    \n    for index, value := range(lst) {\n        fmt.Printf(\"\\nIndex %d, value %d\", index, value)\n    }\n}\n</code></pre>"},{"location":"For%20Enumerate/#nim","title":"Nim","text":"<pre><code>\nimport strformat\n\nlet lst = [10, 20, 30]\n\nfor index, value in lst:\n  echo &amp;\"index {index} value {value}\"\n</code></pre>"},{"location":"For%20Enumerate/#odin","title":"Odin","text":"<pre><code>\npackage main\n\nimport \"core:fmt\"\n\nmain :: proc() {\n\n    lst := []int{10, 20, 30}    \n    for value, index in lst {\n        fmt.printf(\"\\nIndex %d, value %d\", index, value)\n    }\n}\n</code></pre>"},{"location":"For%20Enumerate/#python","title":"Python","text":"<pre><code>\nlst = [10, 20, 30]\n\nfor index, value in enumerate(lst):\n    print(f\"Index {index}, value {value}\")\n</code></pre>"},{"location":"For%20Enumerate/#rust","title":"Rust","text":"<pre><code>\nfn main() {\n    let lst = vec![10, 20, 30];\n\n    for (index, value) in lst.iter().enumerate() {\n        println!(\"Index {}, value {}\", index, value);\n    }\n}\n</code></pre>"},{"location":"For%20Range/","title":"For Range","text":""},{"location":"For%20Range/#c","title":"C#","text":"<pre><code>\nusing System;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        for (var idx = 0; idx &lt; 10; idx ++)\n        {\n            Console.WriteLine(\"Index {0}\", idx); \n        }\n    }\n}\n</code></pre>"},{"location":"For%20Range/#dart","title":"Dart","text":"<pre><code>\nvoid main() {\n  for (var idx = 0; idx &lt; 10; idx++) {\n    print(\"Index $idx\");\n  }\n}\n</code></pre>"},{"location":"For%20Range/#go","title":"Go","text":"<pre><code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    for idx := 0; idx &lt; 10; idx++ {\n        fmt.Printf(\"\\nIndex %d\", idx)\n    }\n}\n</code></pre>"},{"location":"For%20Range/#nim","title":"Nim","text":"<pre><code>\nimport strformat\n\n# last number included\nfor idx in countup(0, 9, 1):\n  echo &amp;\"Index {idx}\"\n</code></pre>"},{"location":"For%20Range/#odin","title":"Odin","text":"<pre><code>\npackage main\n\nimport \"core:fmt\"\n\nmain :: proc() {\n\n    for index in 0..&lt;10 {\n        fmt.printf(\"\\nIndex %d\", index)\n    }\n}\n</code></pre>"},{"location":"For%20Range/#python","title":"Python","text":"<pre><code>\n# last number excluded\nfor idx in range(0, 10, 1):\n    print(f\"Index {idx}\")\n</code></pre>"},{"location":"For%20Range/#rust","title":"Rust","text":"<pre><code>\nfn main() {\n    //last number excluded\n    for idx in (0..10).step_by(1) {\n        println!(\"Index {}\", idx);\n    }\n}\n</code></pre>"},{"location":"Fyne/","title":"Fyne","text":""},{"location":"Fyne/#go","title":"Go","text":"<pre><code>//go.mod\n//require fyne.io/fyne/v2 v2.1.0\npackage main\n\nimport (\n    . \"fmt\"\n\n    \"fyne.io/fyne/v2\"\n    \"fyne.io/fyne/v2/app\"\n    \"fyne.io/fyne/v2/container\"\n    \"fyne.io/fyne/v2/widget\"\n)\n\nconst WIN_WIDTH = 800\nconst WIN_HEIGHT = 600\n\nfunc main() {\n    app := app.New()\n    wind := app.NewWindow(\"Fyne test\")\n    wind.Resize(fyne.Size{Height: WIN_HEIGHT, Width: WIN_WIDTH})\n\n    count := 0\n    lb1 := widget.NewLabel(\"Result below\")\n    lb2 := widget.NewLabel(\"\")\n    var bt1 *widget.Button\n    bt1 = widget.NewButton(\"Press\", func() {\n        count = count + 1\n        lb2.SetText(Sprintf(\"Count: %d\", count))\n        bt1.SetText(\"Again\")\n    })\n    wind.SetContent(\n        container.NewVBox(\n            container.NewCenter(\n                container.NewVBox(\n                    lb1,\n                    lb2,\n                ),\n            ),\n            container.NewCenter(bt1),\n        ),\n    )\n    wind.ShowAndRun()\n}\n</code></pre>"},{"location":"GTK/","title":"GTK","text":""},{"location":"GTK/#go","title":"Go","text":"<pre><code>\npackage main\n\nimport (\n    \"fmt\"\n    \"os\"\n\n    \"github.com/gotk3/gotk3/glib\"\n    \"github.com/gotk3/gotk3/gtk\"\n)\n\nfunc main() {\n    app, _ := gtk.ApplicationNew(\"org.gtk.example\", glib.APPLICATION_FLAGS_NONE)\n\n    count := 0\n\n    app.Connect(\"activate\", func() {\n        b, _ := gtk.BuilderNew()\n        b.AddFromFile(\"builder.ui\")\n\n        obj, _ := b.GetObject(\"window\")\n        win := obj.(*gtk.ApplicationWindow)\n        obj, _ = b.GetObject(\"button1\")\n        button1 := obj.(*gtk.Button)\n        obj, _ = b.GetObject(\"quit\")\n        bQuit := obj.(*gtk.Button)\n        obj, _ = b.GetObject(\"label1\")\n        label := obj.(*gtk.Label)\n        cStr := fmt.Sprintf(\" %d\", count)\n        label.SetText(cStr)\n\n        button1.Connect(\"clicked\", func() {\n            count += 1\n            cStr := fmt.Sprintf(\" %d\", count)\n            label.SetText(cStr)\n        })\n\n        bQuit.Connect(\"clicked\", func() {\n            fmt.Println(\"Bye\")\n            win.Destroy()\n        })\n\n        win.ShowAll()\n        app.AddWindow(win)\n    })\n\n    app.Run(os.Args)\n}\n</code></pre>"},{"location":"GTK/#nim","title":"Nim","text":"<pre><code>\n# nimble install gintro\nimport gintro/[gtk, gobject, gio]\nimport strformat\n\nvar count = 0\n\nproc hello(b: Button; lbl: Label) =\n  count += 1\n  lbl.text = &amp;\" {count} \"\n\nproc quitApp(b: Button; app: Application) =\n  echo \"Bye\"\n  quit(app)\n\nproc appActivate(app: Application) =\n  let builder = newBuilder()\n  discard builder.addFromFile(\"builder.ui\")\n  let window = builder.getApplicationWindow(\"window\")\n  window.setApplication(app)\n  var button = builder.getButton(\"button1\")\n  let label = builder.getLabel(\"label1\")\n  button.connect(\"clicked\", hello, label)\n  button = builder.getButton(\"quit\")\n  button.connect(\"clicked\", quitApp, app)\n\nproc main =\n  let app = newApplication(\"org.gtk.example\")\n  connect(app, \"activate\", appActivate)\n  discard run(app)\n\nmain()\n</code></pre>"},{"location":"GTK/#python","title":"Python","text":"<pre><code>\n# Tested in Ubuntu 18.04\nimport gi\ngi.require_version('Gtk', '3.0')\nfrom gi.repository import Gtk\n\ncount = 0\n\ndef on_button_clicked(widget):\n    global count\n    label: Gtk.Label = builder.get_object(\"label1\")\n    count += 1\n    label.set_text(f\" {count}\")\n\ndef on_b_quit_clicked(widget):\n    print(\"Bye\")\n    quit()\n\n\nbuilder = Gtk.Builder()\nbuilder.add_from_file(\"builder.ui\")\nwindow = builder.get_object(\"window\")\nbutton = builder.get_object(\"button1\")\nlabel = builder.get_object(\"label1\")\nb_quit = builder.get_object(\"quit\")\n\nbutton.connect(\"clicked\", on_button_clicked)\nb_quit.connect(\"clicked\", on_b_quit_clicked)\nwindow.show_all()\nGtk.main()\n</code></pre>"},{"location":"GTK/#rust","title":"Rust","text":"<pre><code>\n//[dependencies]\n//gio = \"0.7.0\"\n//gtk = \"0.7.0\"\n\n//rustup default stable-x86_64-pc-windows-gnu\n\nuse gio::prelude::*;\nuse gtk::prelude::*;\nuse gtk::*;\n\nuse std::cell::RefCell;\nuse std::env::args;\nuse std::rc::Rc;\n\n//utility functions\n\n//get generic object from builder\nfn get_gen_obj&lt;T: IsA&lt;Object&gt;&gt;(id: &amp;str, builder: &amp;Builder) -&gt; T {\n    let gen_obj: T = builder\n        .get_object(id)\n        .expect(&amp;format!(\"Couldn't get {}\", id));\n    gen_obj\n}\n\nfn get_num_label_val(id: &amp;str, builder: &amp;Builder) -&gt; i32 {\n    let lbl1: Label = get_gen_obj(id, builder);\n    let l1val = lbl1\n        .get_text()\n        .and_then(|s| s.trim().parse::&lt;i32&gt;().ok())\n        .unwrap_or(0);\n    l1val\n}\n\nfn set_num_label_val(id: &amp;str, builder: &amp;Builder, val: i32) {\n    let lbl1: Label = get_gen_obj(id, builder);\n    lbl1.set_text(&amp;format!(\" {}\", val));\n}\n// utility end\n\nfn app_activate(application: &amp;Application) {\n    // First we get the file content.\n    let glade_src = include_str!(\"builder.ui\");\n    // Then we call the Builder call.\n    let builder = Builder::new_from_string(glade_src);\n    let window: ApplicationWindow = get_gen_obj(\"window\", &amp;builder);\n    window.set_application(Some(application));\n    let button: Button = get_gen_obj(\"button1\", &amp;builder);\n    let label: Label = get_gen_obj(\"label1\", &amp;builder);\n    label.set_text(&amp;format!(\" {} \", 0));\n    //to avoid moving builder so that it can be accessed later\n    let builder_rc_1 = Rc::new(RefCell::new(builder.clone()));\n\n    button.connect_clicked(move |_| {\n        let builder_ptr = &amp;(*builder_rc_1.borrow());\n        //increment counter in label1 text\n        let mut count = get_num_label_val(\"label1\", builder_ptr);\n        count += 1;\n        set_num_label_val(\"label1\", builder_ptr, count);\n    });\n\n    let q_button: Button = get_gen_obj(\"quit\", &amp;builder);\n\n    //avoid ownership check to use \"window\" inside the closure\n    let window_weak = window.downgrade();\n    q_button.connect_clicked(move |_| {\n        println!(\"Bye\");\n        let window = window_weak.upgrade().unwrap();\n        window.destroy();\n    });\n    window.show_all();\n}\n\nfn main() {\n    let application = Application::new(Some(\"org.gtk.example\"), Default::default())\n        .expect(\"Initialization failed...\");\n\n    application.connect_activate(move |app| {\n        app_activate(app);\n    });\n    application.run(&amp;args().collect::&lt;Vec&lt;_&gt;&gt;());\n}\n</code></pre>"},{"location":"GTK/#builderui","title":"builder.ui","text":"<p>Generated with Glade</p> <pre><code>\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!-- Generated with glade 3.22.1 --&gt;\n&lt;interface&gt;\n  &lt;requires lib=\"gtk+\" version=\"3.0\"/&gt;\n  &lt;object class=\"GtkApplicationWindow\" id=\"window\"&gt;\n    &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n    &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n    &lt;property name=\"border_width\"&gt;10&lt;/property&gt;\n    &lt;property name=\"title\"&gt;Grid&lt;/property&gt;\n    &lt;child&gt;\n      &lt;placeholder/&gt;\n    &lt;/child&gt;\n    &lt;child&gt;\n      &lt;object class=\"GtkGrid\" id=\"grid\"&gt;\n        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n        &lt;child&gt;\n          &lt;object class=\"GtkButton\" id=\"button1\"&gt;\n            &lt;property name=\"label\"&gt;Button 1&lt;/property&gt;\n            &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n            &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n            &lt;property name=\"receives_default\"&gt;False&lt;/property&gt;\n          &lt;/object&gt;\n          &lt;packing&gt;\n            &lt;property name=\"left_attach\"&gt;0&lt;/property&gt;\n            &lt;property name=\"top_attach\"&gt;0&lt;/property&gt;\n          &lt;/packing&gt;\n        &lt;/child&gt;\n        &lt;child&gt;\n          &lt;object class=\"GtkButton\" id=\"quit\"&gt;\n            &lt;property name=\"label\"&gt;Quit&lt;/property&gt;\n            &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n            &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n            &lt;property name=\"receives_default\"&gt;False&lt;/property&gt;\n          &lt;/object&gt;\n          &lt;packing&gt;\n            &lt;property name=\"left_attach\"&gt;0&lt;/property&gt;\n            &lt;property name=\"top_attach\"&gt;1&lt;/property&gt;\n            &lt;property name=\"width\"&gt;2&lt;/property&gt;\n          &lt;/packing&gt;\n        &lt;/child&gt;\n        &lt;child&gt;\n          &lt;object class=\"GtkLabel\" id=\"label1\"&gt;\n            &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n            &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n            &lt;property name=\"label\" translatable=\"yes\"&gt;label&lt;/property&gt;\n          &lt;/object&gt;\n          &lt;packing&gt;\n            &lt;property name=\"left_attach\"&gt;1&lt;/property&gt;\n            &lt;property name=\"top_attach\"&gt;0&lt;/property&gt;\n          &lt;/packing&gt;\n        &lt;/child&gt;\n      &lt;/object&gt;\n    &lt;/child&gt;\n  &lt;/object&gt;\n&lt;/interface&gt;\n</code></pre>"},{"location":"Globals/","title":"Globals","text":""},{"location":"Globals/#rust","title":"Rust","text":"<pre><code>\n//[dependencies]\n//lazy_static = \"1.4.0\"\n\nuse lazy_static::lazy_static;\nuse std::sync::Mutex;\n\n#[derive(Debug, Clone)]\nstruct STRUCT1 {\n    x: i32,\n    s: String,\n}\n\nlazy_static! {\n    // Global unmutable initialized safe\n    static ref GLOBAL_S: STRUCT1 = STRUCT1 {\n        x: 10,\n        s: String::from(\"GLOBAL_S\")\n    };\n    // Global mutable initialized safe\n    static ref GLOBAL_S_M: Mutex&lt;STRUCT1&gt; = Mutex::new(STRUCT1 {\n        x: 10,\n        s: String::from(\"GLOBAL_S_M\")\n    });\n}\n\n//Global mutable inizialized unsafe\nstatic mut GLOBAL_MUT: Vec&lt;i32&gt; = vec![];\n\n//Global mutable uninizialized unsafe\nstatic mut GLOBAL_MUT_UNINIT: Option&lt;STRUCT1&gt; = None;\n\nfn main() {\n    println!(\"{} {}\", GLOBAL_S.x, GLOBAL_S.s);\n    let mut sm = GLOBAL_S_M.lock().unwrap();\n    println!(\"{} {}\", sm.x, sm.s);\n    sm.x = 11;\n    println!(\"{} {}\", sm.x, sm.s);\n    //unlock\n    std::mem::drop(sm);\n\n    unsafe {\n        GLOBAL_MUT.push(20);\n    }\n\n    unsafe {\n        GLOBAL_MUT_UNINIT = Some(STRUCT1 {\n            x: 30,\n            s: String::from(\"GLOBAL_MUT_UNINIT\"),\n        });\n    }\n\n    unsafe {\n        GLOBAL_MUT_UNINIT = Some(STRUCT1 {\n            x: 30,\n            s: String::from(\"GLOBAL_MUT_UNINIT\"),\n        });\n    }\n\n    unsafe {\n        match GLOBAL_MUT_UNINIT {\n            None =&gt; (),\n            Some(ref mut st) =&gt; {\n                st.x = 40;\n            }\n        }\n    }\n\n    fn1();\n}\n\nfn fn1() {\n    unsafe {\n        println!(\"Inside fn1 {}\", GLOBAL_MUT[0]);\n    }\n\n    unsafe {\n        let struct2 = match GLOBAL_MUT_UNINIT {\n            None =&gt; panic!(\"error\"),\n            Some(ref mut s) =&gt; {\n                s.x = 41;\n                s\n            }\n        };\n        println!(\"{:?}\", struct2);\n    }\n}\n\n\n</code></pre>"},{"location":"Installation%20hints/","title":"Installation hints","text":""},{"location":"Installation%20hints/#rust","title":"Rust","text":""},{"location":"Installation%20hints/#offline-installation-windows","title":"Offline Installation - Windows","text":"<ul> <li>Download both installer and sources from here</li> <li>During installation, choose Advanced to select installing rls</li> <li>To work with vscode, copy rls.exe in C:\\Users\\user\\.cargo\\bin and set the rls path in settings.json through \"rust-client.rlsPath\".</li> <li>Unpack the sources in Rust installation path\\lib\\rustlib\\src\\rust\\src</li> <li>To debug in vscode, adjust the path for stdlib sources with \"sourceFileMap\" in launch.json.</li> </ul>"},{"location":"Installation%20hints/#change-default-paths","title":"Change default paths","text":"<p>Set before running the rustup-init: CARGO_HOME RUSTUP_HOME</p>"},{"location":"Installation%20hints/#typescript","title":"Typescript","text":"<pre><code>npm install -g typescript\nnpm install -g ts-node\nnpm install -g browserify\n</code></pre> <ul> <li>put in the project folder a tsconfig.json: </li> </ul> <pre><code>{\n   \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\"es5\", \"es6\", \"dom\"]\n   },\n   \"files\": [\n       \"hello.ts\"\n   ]\n}\n</code></pre> <ul> <li>run</li> </ul> <pre><code>ts-node hello.ts\n</code></pre> <p>or</p> <pre><code>tsc\nnode hello.js\n</code></pre>"},{"location":"JSON/","title":"JSON","text":""},{"location":"JSON/#dart","title":"Dart","text":"<pre><code>import 'dart:io';\nimport 'dart:convert';\n\nclass Config {\n  String descr;\n  List&lt;int&gt; iList;\n  List&lt;String&gt; sList;\n  Config(this.descr, this.iList, this.sList);\n  dynamic fromJson(Map&lt;String, dynamic&gt; json) {\n    return Config(\n      json['description'],\n      List&lt;int&gt;.from(json['i_list']),\n      List&lt;String&gt;.from(json['s_list']),\n    );\n  }\n\n  static Map&lt;String, dynamic&gt; toJson(Config value) =&gt; {\n    'description': value.descr,\n    'i_list': value.iList,\n    's_list': value.sList,\n  };\n}\n\nvoid main() {\n  var conf = Config(\"Description\", [1, 2, 3, 4], [\"AAA\", \"BBB\", \"CCC\"]);\n  var fileName = \"tmp01.json\";\n  var f = File(fileName);\n  var encodeMap = jsonEncode(\n    conf,\n    toEncodable: (Object? value) =&gt; value is Config\n        ? Config.toJson(value)\n        : throw UnsupportedError('Cannot convert to JSON: $value'),\n  );\n  f.writeAsString(encodeMap);\n\n  Map&lt;String, dynamic&gt; data;\n  f.readAsString().then((str1) {\n    data = jsonDecode(str1);\n    print('$data');\n  });\n}\n</code></pre>"},{"location":"JSON/#odin","title":"Odin","text":"<pre><code>\npackage main\n\nimport \"core:encoding/json\"\nimport \"core:fmt\"\nimport \"core:os\"\n\nConfig :: struct {\n    descr:  string,\n    i_list: []int,\n    s_list: []string,\n}\n\nmain :: proc() {\n    conf := Config{\"Description\", []int{1, 2, 3, 4}, []string{\"AAA\", \"BBB\", \"CCC\"}}\n\n    file_name := \"tmp001.json\"\n    f, err := os.open(file_name, (os.O_CREATE | os.O_RDWR), 0o644)\n    if err != nil {\n        fmt.println(err)\n    }\n\n    if json_data, err := json.marshal(conf); err == nil {\n        os.write(f, json_data)\n    } else {\n        fmt.println(\"Couldn't marshal struct!\")\n    }\n    os.close(f)\n\n    if  read_data, ok := os.read_entire_file(file_name); ok {\n        conf2: Config\n        if json.unmarshal(read_data[:], &amp;conf2) == nil {\n            fmt.println(conf2)\n        } else {\n            fmt.println(\"Error unmarshaling\")\n        }\n    } else {\n        fmt.println(\"Failed to read JSON file\")\n    }\n}\n</code></pre>"},{"location":"JSON/#rust","title":"Rust","text":"<pre><code>// serde =  { version = \"1.0.143\", features = [\"derive\"] }\n// serde_json = \"1.0.143\"\n\nuse std::{\n    fs::File,\n    io::{Error, Read, Write},\n};\n\n#[derive(serde::Serialize, serde::Deserialize, Debug)]\nstruct Config {\n    description: String,\n    i_list: Vec&lt;i32&gt;,\n    s_list: Vec&lt;String&gt;,\n}\n\nfn main() -&gt; Result&lt;(), Error&gt; {\n    // Create a Config instance\n    let conf = Config {\n        description: \"Description\".to_string(),\n        i_list: vec![1, 2, 3, 4],\n        s_list: vec![\"AAA\".to_string(), \"BBB\".to_string(), \"CCC\".to_string()],\n    };\n\n    // Serialize to JSON and write to file\n    let json_str = serde_json::to_string_pretty(&amp;conf)?;\n    let file_name = \"tmp01.json\";\n    let mut f = File::create(file_name)?;\n    f.write(json_str.as_bytes())?;\n\n    // Read JSON from file and deserialize\n    let mut f = File::open(file_name)?;\n    let mut contents = \"\".to_string();\n    f.read_to_string(&amp;mut contents)?;\n    let decoded: Config = serde_json::from_str(&amp;contents)?;\n\n    // Print the deserialized struct\n    println!(\"{:?}\", decoded);\n\n    Ok(())\n}\n</code></pre>"},{"location":"List/","title":"List","text":""},{"location":"List/#c","title":"C#","text":"<pre><code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        //new empty list\n        var lst1 = new List&lt;string&gt;();\n\n        //new initialized list\n        var lst2 = new List&lt;string&gt; { \"str20\", \"str21\" };\n\n        //append element\n        lst1.Add(\"str10\");\n\n        //append list\n        lst1.AddRange(lst2);\n\n        //add head element\n        lst1.Insert(0, \"str00\");\n\n        //reverse\n        lst1.Reverse();\n\n        //access elem with out of bounds check\n        var elem  = lst1.ElementAtOrDefault(100);\n        Console.Write(\"Elem *{0}* \", elem);\n\n        //sublist[\"str21\", \"str20\", \"str10\", \"str00\"]-&gt;[\"str20\", \"str10\", \"str00\"]\n        //list length\n        var lst3 = lst1.GetRange(1, lst1.Count - 1);\n\n        Console.WriteLine();\n        foreach (var item in lst3)\n        {\n            Console.Write(\"{0} \", item);\n        }\n\n        //map and filter\n        var lst4 = lst1.Select((x) =&gt; x.ToUpper());\n        var lst5 = lst4.Where((x) =&gt; x != \"STR00\");\n\n        Console.WriteLine();\n        foreach (var item in lst5)\n        {\n            Console.Write(\"{0} \", item);\n        }\n    }\n}\n</code></pre>"},{"location":"List/#dart","title":"Dart","text":"<pre><code>\nmain(List&lt;String&gt; arguments) {  \n  // new empty list\n  List&lt;String&gt; lst1 = [];  \n\n  //new initialized list\n  var lst2 = [\"str20\", \"str21\"];\n\n  // append element\n  lst1.add(\"str10\");\n\n  // append list\n  lst1 = lst1 + lst2;\n\n  // add head element\n  lst1 = [\"str00\"] + lst1;\n\n  //reverse\n  lst1 = lst1.reversed.toList();\n\n  //trap out of bounds access\n  var elem = getElemAt(lst1, 100);\n  print('Elem *$elem*');\n\n  // sublist[\"str21\", \"str20\", \"str10\", \"str00\"]-&gt;[\"str20\", \"str10\", \"str00\"]\n  // list length\n  var lst3 = lst1.sublist(1, lst1.length);\n  print('$lst3');\n\n  // map and filter\n  var lst4 = lst3.map((x) =&gt; x.toUpperCase());\n  var lst5 = lst4.where((x) =&gt; x != \"STR00\");\n  print('$lst5');\n}\n\nString getElemAt(List&lt;String&gt; lst, int index) {\n  String elem;\n  try {\n    elem = lst[index];\n  } catch (e) {\n    elem = \"\";\n  }\n  return elem;\n}\n</code></pre>"},{"location":"List/#go","title":"Go","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"slices\"\n    \"strings\"\n)\n\nfunc main() {\n\n    //new empty list\n    lst1 := []string{}\n\n    //new initialized list\n    lst2 := []string{\"str20\", \"str21\"}\n\n    //append element\n    lst1 = append(lst1, \"str10\")\n\n    //append list\n    lst1 = append(lst1, lst2...)\n\n    //add head element\n    lst1 = append([]string{\"str00\"}, lst1...)\n\n    //reverse\n    slices.Reverse(lst1)\n\n    //trap out of bounds access\n    elem := getElemAt(lst1, 100)\n    fmt.Printf(\"\\nElem *%v*\", elem)\n\n    //sublist[\"str21\", \"str20\", \"str10\", \"str00\"]-&gt;[\"str20\", \"str10\", \"str00\"]\n    //list length\n    lst3 := lst1[1:]\n    fmt.Printf(\"\\n%v\", lst3)\n\n    //contains\n    if slices.Contains(lst1, \"str00\") {\n        //index of element\n        ind := slices.Index(lst1, \"str00\")\n        fmt.Printf(\"\\nIndex %d\", ind)\n    }\n\n    //map and filter\n    var lst4 []string\n    for _, elem := range lst1 {\n        lst4 = append(lst4, strings.ToUpper(elem))\n    }\n    var lst5 []string\n    for _, elem := range lst4 {\n        if elem != \"STR00\" {\n            lst5 = append(lst5, elem)\n        }\n    }\n    fmt.Printf(\"\\n%v\\n\", lst5)\n}\n\nfunc getElemAt(lst []string, index int) string {\n    defer recoverList()\n    elem := lst[index]\n    return elem\n}\n\nfunc recoverList() {\n    recover()\n}\n\n</code></pre>"},{"location":"List/#julia","title":"Julia","text":"<pre><code># new empty list\nlst1 = String[]\n\n# new initialized list\nlst2 = String[\"str20\", \"str21\"]\n\n# apppend element\npush!(lst1, \"str10\")\n\n# append list\nappend!(lst1, lst2)\n\n# add head element\npushfirst!(lst1, \"str00\")\n\n# reverse\nlst1 = reverse(lst1)\n\n# trap out of bounds access\nlocal elem = String\ntry\n    elem = lst1[100]\ncatch\n    println(\"Out of bounds\")\nend\n\n# sublist[\"str21\", \"str20\", \"str10\", \"str00\"]-&gt;[\"str20\", \"str10\", \"str00\"]\n# list length\nlst3 = lst1[2:length(lst1)]\nprintln(lst3)\n\n# map and filter\nlst4 = map(x -&gt; uppercase(x), lst1)\nlst5 = filter(x -&gt; x != \"STR00\", lst4)\nprintln(lst5)\n</code></pre>"},{"location":"List/#kotlin","title":"Kotlin","text":"<pre><code>\nfun main() {\n    // new empty list\n    var lst1 = mutableListOf&lt;String&gt;()\n\n    //new initialized list\n    var lst2 = mutableListOf(\"str20\", \"str21\")\n\n    // append element\n    lst1.add(\"str10\")\n\n    // append list\n    lst1.addAll(lst2)\n\n    // add head element\n    lst1.add(0, \"str00\")\n\n    // reverse\n    lst1.reverse()\n\n    //access elem with out of bounds check\n    val elem = lst1.elementAtOrNull(100)\n    println(\"Elem ${elem}\")\n\n    // sublist[\"str21\", \"str20\", \"str10\", \"str00\"]-&gt;[\"str20\", \"str10\", \"str00\"]\n    // list length\n    val lst3 = lst1.subList(1, lst1.size)\n\n    println(lst3)\n\n    //map and filter\n    val lst4 = lst3.map{it -&gt; it.toUpperCase()}\n    val lst5 = lst4.filter{it -&gt; !it.equals(\"STR00\")}\n\n    println(lst5)    \n}\n</code></pre>"},{"location":"List/#nim","title":"Nim","text":"<pre><code>\nimport sequtils as sq\nimport algorithm as al\nimport strutils as st\nimport strformat\n\nproc getElemAt(lst: seq[string], index: int): string =\n    try:\n        return lst[index]\n    except :\n        return \"\"\n\n# new empty list\nvar lst1: seq[string] = @[]\n\n# new initialized list\nvar lst2 = @[\"str20\", \"str21\"]\n\n# append element\nlst1.add(\"str10\")\n\n#append list\nlst1 = sq.concat(lst1, lst2)\n\n# add head element\nlst1 = sq.concat(@[\"str00\"], lst1)\n\n# reverse\nlst1 = al.reversed(lst1)\n\n# trap out of bounds access\nlet elem = getElemAt(lst1, 100)\necho &amp;\"Elem *{elem}*\" \n\n# sublist[\"str21\", \"str20\", \"str10\", \"str00\"]-&gt;[\"str20\", \"str10\", \"str00\"]\n# list length\nvar lst3 = lst1[1 .. len(lst1) - 1]\necho lst3\n\n# map and filter\nvar lst4 = map(lst3, proc (x: string): string = st.toUpper(x))\nvar lst5 = filter(lst4, proc (x: string): bool = x != \"STR00\")\necho lst5\n</code></pre>"},{"location":"List/#odin","title":"Odin","text":"<pre><code>#+feature dynamic-literals\npackage main\n\nimport \"core:fmt\"\nimport \"core:slice\"\nimport \"core:strings\"\n\n\nmain :: proc() {\n\n    // new empty\n    lst1: [dynamic]string\n\n    //new initialized list\n    lst2 := [dynamic]string{\"str20\", \"str21\"}\n\n    //append element\n    append(&amp;lst1, \"str10\")\n\n    //append list\n    append_elems(&amp;lst1, ..lst2[:])\n\n    //add head element\n    inject_at_elem(&amp;lst1, 0, \"str00\")\n\n    //reverse\n    slice.reverse(lst1[:])\n\n    fmt.println(lst1)\n\n    //trap out of bounds access\n    //elem := lst1[100] will panic, how to trap?\n\n    //sublist[\"str21\", \"str20\", \"str10\", \"str00\"]-&gt;[\"str20\", \"str10\", \"str00\"]\n    //list length\n    lst3 := lst1[1:]\n    fmt.printf(\"%v, Length %d\\n\", lst3, len(lst3))\n\n    //contains\n    if slice.contains(lst1[:], \"str10\") {\n        //index of element\n    }\n\n    //map and filter\n    lst4 := slice.mapper(lst1[:], proc(elem: string) -&gt; string {return strings.to_upper(elem)})\n\n    lst5 := slice.filter(lst4[:], proc(elem: string) -&gt; bool {return elem != \"STR00\"})\n    fmt.println(lst5)\n}\n</code></pre>"},{"location":"List/#python","title":"Python","text":"<pre><code>\nfrom typing import List\n\n# new empty list\nlst1: List[str] = []\n\n# new initialized list\nlst2: List[str] = [\"str20\", \"str21\"]\n\n# append element\nlst1 = lst1 + [\"str10\"]\ndef elem_at_index(lst: List[str], index: int) -&gt; str:\n    try:\n        return lst[index]\n    except:\n        return \"\"\n\n# append list\nlst1 = lst1 + lst2\n\n# add head element\nlst1 = [\"str00\"] + lst1\n\n# reverse\nlst1.reverse()\n\n# trap outof bounds access\nelem = elem_at_index(lst1, 100)\nprint(f\"Elem *{elem}*\")\n\n# sublist[\"str21\", \"str20\", \"str10\", \"str00\"]-&gt;[\"str20\", \"str10\", \"str00\"]\n# list length\nlst3: List[str] = lst1[1:len(lst1)]\nprint(lst3)\n\n# map and filter\nlst4: List[str] = [elem for elem in map(lambda x: x.upper(), lst1)]\nlst5 = [elem for elem in filter(lambda x: x != \"STR00\", lst4)]\nprint(lst5)\n</code></pre>"},{"location":"List/#rust","title":"Rust","text":"<pre><code>fn main() {\n    // new empty list\n    let mut lst1: Vec&lt;&amp;str&gt; = vec![];\n\n    //new initialized list\n    let lst2 = vec![\"str20\", \"str21\"];\n\n    // append element\n    lst1.push(\"str10\");\n\n    // append list\n    lst1.extend(lst2);\n\n    // add head element\n    lst1.insert(0, \"str00\");\n\n    //reverse\n    lst1.reverse();\n\n    //access elem with out of bounds check\n    let elem = match lst1.get(100) {\n        None =&gt; \"not found\",\n        Some(x) =&gt; x,\n    };\n    println!(\"Elem {}\", elem);\n\n    // sublist[\"str21\", \"str20\", \"str10\", \"str00\"]-&gt;[\"str20\", \"str10\", \"str00\"]\n    // list length\n    let lst3: Vec&lt;&amp;str&gt; = lst1[1..lst1.len()].to_vec();\n\n    println!(\"{:?}\", &amp;lst3);\n\n    //contains\n    if lst3.contains(&amp;\"str00\") {\n        let index = lst3.iter().position(|&amp;i| i == \"str00\").unwrap();\n        println!(\"Index {:?}\", index);\n    }\n\n    // map and filter\n    let lst4: Vec&lt;_&gt; = lst3.into_iter().map(|x| x.to_uppercase()).collect();\n    let lst5: Vec&lt;_&gt; = lst4.into_iter().filter(|x| *x != \"STR00\").collect();\n\n    println!(\"{:?}\", &amp;lst5);\n}\n\n</code></pre>"},{"location":"List/#sing","title":"Sing","text":"<pre><code>\nrequires \"sio\";\nrequires \"str\";\n\npublic fn singmain(argv [*]string) i32\n{\n    // new empty list\n    var lst1 [*]string;\n\n    // new initialize dlist\n    var lst2 [*]string = {\"str20\", \"str21\"};\n\n    // append element\n    lst1.push_back(\"str10\");\n\n    // append list\n    lst1.append(lst2);\n\n    // add head element\n    lst1.insert(0, 1, \"str00\"); \n\n    // reverse\n    var rev [*]string;\n    let l_size = lst1.size();\n    for (i in 0:l_size) {\n        rev.push_back(lst1[l_size -i -1]);\n    }\n    lst1 = rev;\n\n    //access elem out of bounds\n    let  elem = lst1[100];\n    if (str.len(elem) == 0) {\n        sio.print(\"\\n\\r Elem not found\");\n    }\n    else {\n        sio.print(\"\\n\\r\" + elem);\n    }\n\n    // sublist[\"str21\", \"str20\", \"str10\", \"str00\"]-&gt;[\"str20\", \"str10\", \"str00\"]\n    var lst3 = lst1;\n    lst3.erase(0,1);\n\n    for (elem2 in lst3) {\n        sio.print(\"\\n\\r\" + elem2);\n    }\n\n    //map and filter\n    var lst4 [*]string;\n    for (elem2 in lst1) {\n        lst4.push_back(str.toupper(elem2));\n    }\n    var lst5 [*]string;\n    for (elem2 in lst4) {\n        if (elem2 != \"STR00\") {\n            lst5.push_back(elem2);\n        }\n    }\n\n    sio.print(\"\\n\\r\");\n    for (elem2 in lst5) {\n        sio.print(\"\\n\\r\" + elem2);\n    }\n\n    return(0);\n}\n</code></pre>"},{"location":"List/#typescript","title":"TypeScript","text":"<pre><code>\n// new empty list\nvar lst1 = [];\n\n//new initialized list\nvar lst2 = [\"str20\", \"str21\"];\n\n// append element\nlst1.push(\"str10\");\n\n// append list\nlst1 = lst1.concat(lst2);\n\n// add head element\nlst1 = [\"str00\"].concat(lst1);\n\n//reverse\nlst1 = lst1.reverse();\n\n// sublist[\"str21\", \"str20\", \"str10\", \"str00\"]-&gt;[\"str20\", \"str10\", \"str00\"]\n// list length\nvar lst3 = lst1.slice(1, lst1.length);\n\nconsole.log(`${lst3}`);\n\n// map and filter\nvar lst4 = lst3.map((x) =&gt; x.toUpperCase());\nvar lst5 = lst4.filter((x) =&gt; x != \"STR00\");\n\nconsole.log(`${lst5}`);\n</code></pre>"},{"location":"List/#v-vlang","title":"V (vlang)","text":"<pre><code>fn main() {\n    //new empty list\n    mut lst1 := []string{}\n\n    //new initialized list\n    lst2 := [\"str20\", \"str21\"]\n\n    //append element\n    lst1  &lt;&lt; \"str10\"\n\n    //append list\n    lst1 &lt;&lt; lst2\n\n    //add head element\n    lst1.insert(0, \"str00\")\n\n    //reverse\n    lst1.reverse_in_place()\n\n    //access elem with out of bounds check\n    elem := lst1[100] or {\"elem not found\"}\n    println('$elem')\n\n    // sublist[\"str21\", \"str20\", \"str10\", \"str00\"]-&gt;[\"str20\", \"str10\", \"str00\"]\n    lst3 := lst1[1..]\n    println('$lst3')\n\n    //map and filter\n    lst4 := lst3.map(it.to_upper())\n    lst5 := lst4.filter(it != \"STR00\")\n    println('$lst5')\n}\n</code></pre>"},{"location":"Numeric/","title":"Numeric","text":""},{"location":"Numeric/#c","title":"C#","text":"<pre><code>\n//dotnet add package MathNet.Numerics\n\nusing System;\nusing System.Collections.Generic;\nusing MathNet.Numerics.Statistics;\nusing MathNet.Numerics.LinearAlgebra.Double;\nusing System.Diagnostics;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var timer = Stopwatch.StartNew(); //START MEASURE\n        double[,] x = { { 1.0, 2.0, 3.0 }, { 3.0, 4.0, 5.0 }, { 0.0, 5.0, 6.0 } };\n        var a = DenseMatrix.OfArray(x);\n        var at = a.Transpose();\n        var i = a.Inverse();\n        var v = a.ToColumnArrays();\n        //columns mean\n        var am0 = new List&lt;double&gt;();\n        //columns standard deviation\n        var as0 = new List&lt;double&gt;();\n        //columns max\n        var amax0 = new List&lt;double&gt;();\n        foreach (var item in v)\n        {\n            var stats = new DescriptiveStatistics(item);\n            am0.Add(stats.Mean);\n            as0.Add(stats.StandardDeviation);\n            amax0.Add(stats.Maximum);\n        }\n        var b = a * at;\n        var dt = a.Determinant();\n        timer.Stop(); //END MEASURE\n\n        am0.ForEach((x) =&gt; Console.Write(\"{0} \", x));\n        Console.WriteLine(\"\");\n        as0.ForEach((x) =&gt; Console.Write(\"{0} \", x));\n        Console.WriteLine(\"\");\n        amax0.ForEach((x) =&gt; Console.Write(\"{0} \", x));\n        Console.WriteLine(\"\");\n        Console.WriteLine(\"{0} \", at);\n        Console.WriteLine(\"{0} \", b);\n        Console.WriteLine(\"{0} \", dt);\n        Console.WriteLine(\"{0} \", i);\n        Console.WriteLine(\"\\nElapsed: {0}ms\", timer.ElapsedMilliseconds);\n    }\n}\n</code></pre>"},{"location":"Numeric/#go","title":"Go","text":"<pre><code>\n//go get -u -t gonum.org/v1/gonum/...\n\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n\n    \"gonum.org/v1/gonum/mat\"\n    \"gonum.org/v1/gonum/stat\"\n)\n\nfunc main() {\n    start := time.Now() //START MEASURE\n\n    a := mat.NewDense(3, 3, []float64{1.0, 2.0, 3.0, 3.0, 4.0, 5.0, 0.0, 5.0, 6.0})\n    rNum, _ := a.Dims()\n\n    //columns mean\n    am0 := []float64{}\n    //columns standard deviation\n    as0 := []float64{}\n    //columns max\n    amax0 := []float64{}\n\n    weights := []float64{}\n    for index := 0; index &lt; rNum; index++ {\n        weights = append(weights, 1.0)\n    }\n    for index := 0; index &lt; rNum; index++ {\n        var dst []float64\n        col := mat.Col(dst, index, a)\n        mean, std := stat.MeanStdDev(col, weights)\n        am0 = append(am0, mean)\n        as0 = append(as0, std)\n        amax0 = append(amax0, f64Max(col))\n    }\n\n    at := a.T()\n    var b mat.Dense // construct a new zero-value matrix\n    b.Mul(a, at)\n    dt := mat.Det(a)\n    var i mat.Dense // construct a new zero-value matrix\n    i.Inverse((a))\n\n    duration := time.Since(start) //END MEASURE\n\n    fmt.Printf(\"\\n%v\", am0)\n    fmt.Printf(\"\\n%v\", as0)\n    fmt.Printf(\"\\n%v\", amax0)\n    fat := mat.Formatted(at, mat.Prefix(\"\"), mat.Squeeze())\n    fmt.Printf(\"\\n%v\\n\", fat)\n    fmt.Printf(\"\\n%v\", b)\n    fmt.Printf(\"\\n%v\", dt)\n    fmt.Printf(\"\\n%v\", i)\n    fmt.Printf(\"\\nElapsed: %v\", duration)\n}\n\nfunc f64Max(v []float64) float64 {\n    max := v[0]\n    for index := 1; index &lt; len(v); index++ {\n        if v[index] &gt; max {\n            max = v[index]\n        }\n    }\n    return max\n}\n</code></pre>"},{"location":"Numeric/#julia","title":"Julia","text":"<pre><code>using Statistics\nusing LinearAlgebra\nusing Dates\n\ntstart = Dates.now()\na = [1. 2. 3.;3. 4. 5.;0. 5. 6.]\n\n# mean by columns\nam0 = mean(a, dims=1)\n\n# std dev by columns\nas0 = std(a, corrected=false, dims=1)\n\n# max by columns\namax0 = maximum(a, dims=1)\n\nat = transpose(a)\n\n# matrix multiplication\nb = a * at\n\n#determinant\ndt = det(a)\n\n#inverse\ntry\n    i = inv(a)\ncatch    \nend\ntend = Dates.now()\n\nprintln(am0)\nprintln(as0)\nprintln(amax0)\nprintln(at)\nprintln(b)\nprintln(dt)\nprintln(i)    \nprintln(tend-tstart)\n</code></pre>"},{"location":"Numeric/#python","title":"Python","text":"<pre><code>\nimport time\nimport numpy as np\n\nstart_time: float = time.time() # START MEASURE\n\na = np.array([[1.,2.,3.],[3.,4.,5.],[0.,5.,6.]]) \nam0 = np.mean(a, axis = 0) \nas0 = np.std(a, axis = 0)\namax0 = np.max(a, 0)\nat = np.transpose(a)\nb = np.dot(a, at)\ndt = np.linalg.det(a);\ni = np.linalg.inv(a)\n\nend_time: float = time.time() # END MEASURE\n\nprint(am0)\nprint(as0)\nprint(amax0)\nprint(at)\nprint(b)\nprint(dt)\nprint(i)\nprint(f\"Elapsed: {((end_time - start_time)*1000)} ms\")\n</code></pre>"},{"location":"Numeric/#python_1","title":"Python","text":"<pre><code>\n# pytorch\nimport time\nimport torch as pt\n\nstart_time: float = time.time() # START MEASURE\n\na = pt.Tensor([[1.,2.,3.],[3.,4.,5.],[0.,5.,6.]])\ncols = a.size()[1] \nam0 = pt.Tensor()\nas0 = pt.Tensor()\namax0 = pt.Tensor()\nfor ind in range(0, cols):\n    ac = a[:, ind]\n    am = ac.mean(dtype=pt.float).item()\n    astd = ac.std().item()\n    amax = ac.max().item()\n    am0 = pt.cat((am0, pt.Tensor([am])))\n    as0 = pt.cat((as0, pt.Tensor([astd])))\n    amax0 = pt.cat((amax0, pt.Tensor([amax])))\nat = a.t()\nb = a.matmul(at)\ndt = a.det().item()\ni = a.inverse()\n\nend_time: float = time.time() # END MEASURE\nprint(am0)\nprint(as0)\nprint(amax0)\nprint(at)\nprint(b)\nprint(dt)\nprint(i)\nprint(f\"Elapsed: {((end_time - start_time)*1000)} ms\")\n</code></pre>"},{"location":"Numeric/#rust","title":"Rust","text":"<pre><code>\n//[dependencies]\n//peroxide = \"0.18.1\"\n\nextern crate peroxide;\nuse peroxide::*;\nuse std::time::{Instant};\n\nfn main() {\n    let now = Instant::now(); //START MEASURE\n\n    let a = py_matrix(vec![vec![1., 2., 3.], vec![3., 4., 5.], vec![ 0., 5., 6.]]);\n    //columns mean\n    let am0 = a.mean();\n    //columns standard deviation\n    let as0 = a.sd();\n    //columns max\n    let mut amax0: Vec&lt;f64&gt; = vec![];\n    let cols = a.row(0).len();\n    for index in 0..cols {\n        amax0.push(max(a.col(index)))\n    }\n    let at = &amp;a.transpose();\n    let b = &amp;a * at;\n    let dt = &amp;a.det();\n    let i = &amp;a.inv().expect(\"inverse failed\");\n\n    let new_now = Instant::now();  //END MEASURE\n\n    am0.print();\n    as0.print();\n    println!(\"{:?}\", amax0);\n    at.print();\n    b.print();\n    dt.print();\n    i.print();\n    println!(\"Elapsed: {:?}\", new_now.duration_since(now)); \n}\n</code></pre>"},{"location":"Numeric/#rust_1","title":"Rust","text":"<pre><code>\n//[dependencies]\n//ndarray = \"0.13.0\"\n//ndarray-linalg = { version = \"0.12\", features = [\"intel-mkl\"] }\nuse std::time::Instant;\n\nextern crate ndarray;\nextern crate ndarray_linalg;\n\nuse ndarray::*;\n//use ndarray::prelude::*;\n//use ndarray_linalg::cholesky::{DeterminantC, InverseC};\nuse ndarray_linalg::*;\n\npub trait VecStats {\n    fn max(&amp;self) -&gt; f64;\n}\n\nimpl VecStats for Array1&lt;f64&gt; {\n    fn max(&amp;self) -&gt; f64 {\n        let mut max_el = self[0];\n        for elem in self {\n            if *elem &gt; max_el {\n                max_el = *elem;\n            }\n        }\n        max_el\n    }\n}\n\nfn main() {\n    let now = Instant::now(); //START MEASURE\n\n    let a: Array2&lt;f64&gt; = array![[1., 2., 3.], [3., 4., 5.], [0., 5., 6.]];\n    //let a = Array::from_shape_vec((3, 3), vec![1., 2., 3., 3., 4., 5., 0., 5., 6.]).unwrap();\n    let am0 = a.mean_axis(Axis(0)).expect(\"Mean error\");\n    let as0 = a.std_axis(Axis(0), 1.);\n    let mut amax0: Vec&lt;f64&gt; = vec![];\n    let cols = a.ncols();\n    for index in 0..cols {\n        amax0.push(a.column(index).to_owned().max())\n    }\n    let at = a.t();\n    let b = a.dot(&amp;at);\n    let i = a.inv().expect(\"Inversion error\");\n    let dt = a.det().expect(\"Determinant error\");\n\n    let new_now = Instant::now(); //END MEASURE\n\n    println!(\"{}\", am0);\n    println!(\"{}\", as0);\n    println!(\"{:?}\", &amp;amax0);\n    println!(\"{}\", at);\n    println!(\"{}\", b);\n    println!(\"{}\", dt);\n    println!(\"{}\", i);\n    println!(\"Elapsed: {:?}\", new_now.duration_since(now));\n}\n</code></pre>"},{"location":"Numeric/#rust_2","title":"Rust","text":"<pre><code>\n//[dependencies]\n//tch = \"0.1.5\"\nuse tch::{Tensor, Kind, IndexOp};\nuse std::time::{Instant};\n\nfn main() {\n    let now = Instant::now(); //START MEASURE\n\n    let a = Tensor::of_slice(&amp;[1., 2., 3., 3., 4., 5., 0., 5., 6.]).view([3, 3]);\n    let mut am0_v: Vec&lt;f64&gt; = vec![];\n    let mut as0_v: Vec&lt;f64&gt; = vec![];\n    let mut amax0_v: Vec&lt;f64&gt; = vec![];\n\n    let cols = a.size()[1];\n    for ind in 0..cols {\n        let ac = a.i((.., ind));\n        let am = ac.mean(Kind::Double);\n        let astd = ac.std(true);\n        let amax = ac.max();\n        am0_v.push(Vec::&lt;f64&gt;::from(am)[0]);\n        as0_v.push(Vec::&lt;f64&gt;::from(astd)[0]);\n        amax0_v.push(Vec::&lt;f64&gt;::from(amax)[0]);\n        //am0 = Tensor::cat(&amp;am0, &amp;am);\n    }\n    let at = a.transpose(-2, 1);\n    let b = a.matmul(&amp;at);\n    let dt = f64::from(a.det());\n    let i = a.inverse();\n\n    let new_now = Instant::now();  //END MEASURE\n\n    println!(\"{:?}\", am0_v);\n    println!(\"{:?}\", as0_v);\n    println!(\"{:?}\", amax0_v);\n    at.print();\n    b.print();\n    println!(\"{}\", dt);\n    i.print();\n    println!(\"Elapsed: {:?}\", new_now.duration_since(now)); \n}\n</code></pre>"},{"location":"Packages/","title":"Packages","text":""},{"location":"Packages/#c","title":"C#","text":"<p>Nuget Packages</p>"},{"location":"Packages/#dart-flutter","title":"Dart &amp; Flutter","text":"<p>Dart Packages</p>"},{"location":"Packages/#go","title":"Go","text":"<p>Go Packages</p>"},{"location":"Packages/#nim","title":"Nim","text":"<p>Nim Package Directory</p>"},{"location":"Packages/#python","title":"Python","text":"<p>Python Package Index</p>"},{"location":"Packages/#rust","title":"Rust","text":"<p>Crates.io</p>"},{"location":"Playground%20links/","title":"Playground links","text":""},{"location":"Playground%20links/#c","title":"C#","text":"<p>.NET Fiddle</p> <p>Tio C# (.NET Core)</p>"},{"location":"Playground%20links/#dart","title":"Dart","text":"<p>DartPad</p> <p>Tio Dart</p>"},{"location":"Playground%20links/#flutter","title":"Flutter","text":"<p>DartPad</p>"},{"location":"Playground%20links/#kotlin","title":"Kotlin","text":"<p>Kotlin Playground</p>"},{"location":"Playground%20links/#go","title":"Go","text":"<p>Go Playground</p> <p>Tio Go</p>"},{"location":"Playground%20links/#nim","title":"Nim","text":"<p>Nim Playground</p> <p>Tio Nim</p>"},{"location":"Playground%20links/#python","title":"Python","text":"<p>Tio Python3</p>"},{"location":"Playground%20links/#rust","title":"Rust","text":"<p>Rust Playground</p> <p>Tio Rust</p>"},{"location":"Playground%20links/#typescript","title":"TypeScript","text":"<p>Tio TypeScript</p>"},{"location":"Raygui/","title":"Raygui","text":""},{"location":"Raygui/#odin","title":"Odin","text":"<pre><code>\npackage main\n\nimport \"core:fmt\"\nimport \"core:math\"\nimport \"core:strings\"\nimport rl \"vendor:raylib\"\n\nmain :: proc() {\n    rl.InitWindow(800, 400, \"raygui - controls test suite\")\n    rl.SetTargetFPS(60)\n\n    monitor := rl.GetCurrentMonitor()\n    width := rl.GetMonitorWidth(monitor)\n    height := rl.GetMonitorHeight(monitor)\n\n    scale := rl.Vector2{f32(width)/1280, f32(height)/720}\n    cur_text_size := rl.GuiGetStyle(.DEFAULT, i32(rl.GuiDefaultProperty.TEXT_SIZE))\n    new_text_size := cur_text_size*i32(math.ceil(scale.y))\n\n    rl.GuiSetStyle(.DEFAULT, i32(rl.GuiDefaultProperty.TEXT_SIZE), new_text_size)\n\n    counter := 0\n    bt_msg := strings.clone_to_cstring(\"Press\")\n    for !rl.WindowShouldClose() {\n        // Draw\n        //----------------------------------------------------------------------------------\n        rl.BeginDrawing()\n        rl.ClearBackground(\n            rl.GetColor(\n                u32(rl.GuiGetStyle(.DEFAULT, i32(rl.GuiDefaultProperty.BACKGROUND_COLOR))),\n            ),\n        )\n\n        if rl.GuiButton(rl.Rectangle{24, 24, 240, 60}, bt_msg) {\n            counter += 1\n        }\n        if counter &gt; 0 {\n            bt_msg = strings.clone_to_cstring(\"Again\")\n        }\n        c_str := strings.clone_to_cstring(fmt.tprintf(\"Count: %d\", counter))\n        label_len: f32 = 100\n        label_x := (f32(rl.GetScreenWidth() - i32(len(c_str))) - label_len)/2\n\n        rl.GuiLabel(rl.Rectangle{label_x, 200, label_len, 60}, c_str)\n\n        rl.EndDrawing()\n    }\n    //fmt.println(scale, width, height, cur_text_size, new_text_size)\n}\n</code></pre>"},{"location":"Scaffold%20with%20CLI/","title":"Scaffold with CLI","text":""},{"location":"Scaffold%20with%20CLI/#c","title":"C#","text":"<pre><code>dotnet new console -o hello\ncd hello\ndotnet run\n</code></pre>"},{"location":"Scaffold%20with%20CLI/#dart","title":"Dart","text":"<pre><code>dart create -t cli hello\ncd hello\ndart run bin\\hello.dart\n</code></pre>"},{"location":"Scaffold%20with%20CLI/#flutter","title":"flutter","text":"<pre><code>mkdir hello\ncd hello\nflutter create .\nflutter pub get\nflutter run\nflutter run --release\n\nflutter build apk\nflutter install\n</code></pre>"},{"location":"Scaffold%20with%20CLI/#rust","title":"Rust","text":"<pre><code>cargo new hello -- bin\ncd hello\ncargo run\n</code></pre>"},{"location":"Share/","title":"Share","text":""},{"location":"Share/#rust","title":"Rust","text":"<pre><code>\nuse mod1::*;\nuse mod2::*;\nuse std::sync::{Arc, Mutex};\n\nmod mod1 {\n    use crate::mod2::*;\n    use std::thread;\n    use std::{\n        sync::{Arc, Mutex},\n        thread::JoinHandle,\n    };\n\n    pub struct ST1 {\n        pub count: i32,\n        pub name: String,\n    }\n\n    pub fn mod1_init() -&gt; ST1 {\n        ST1 {\n            count: 0,\n            name: String::from(\"MOD1\"),\n        }\n    }\n\n    pub fn run_th1(st2: Arc&lt;Mutex&lt;ST2&gt;&gt;) -&gt; JoinHandle&lt;()&gt; {\n        thread::spawn(move || {\n            thread::park();\n            println!(\"Thread 1 started\");\n\n            let mut st2_a = st2.lock().unwrap();\n            st2_a.count = st2_a.count + 2;\n        })\n    }\n}\n\nmod mod2 {\n    use crate::mod1::*;\n    use std::thread;\n    use std::{\n        sync::{Arc, Mutex},\n        thread::JoinHandle,\n    };\n\n    pub struct ST2 {\n        pub count: i32,\n        pub name: String,\n    }\n\n    pub fn mod2_init() -&gt; ST2 {\n        ST2 {\n            count: 0,\n            name: String::from(\"MOD2\"),\n        }\n    }\n\n    pub fn run_th2(st1: Arc&lt;Mutex&lt;ST1&gt;&gt;) -&gt; JoinHandle&lt;()&gt; {\n        thread::spawn(move || {\n            thread::park();\n            println!(\"Thread 2 started\");\n\n            let mut st1_a = st1.lock().unwrap();\n            st1_a.count = st1_a.count + 1;\n        })\n    }\n}\n\nfn main() {\n    let st1 = mod1_init();\n    let st1_a = Arc::new(Mutex::new(st1));\n    let st1_a2 = st1_a.clone();\n\n    let st2 = mod2_init();\n    let st2_a = Arc::new(Mutex::new(st2));\n    let st2_a2 = st2_a.clone();\n\n    let th1 = run_th1(st2_a2);\n    let th2 = run_th2(st1_a2);\n\n    th1.thread().unpark();\n    th2.thread().unpark();\n\n    th1.join().unwrap();\n    th2.join().unwrap();\n\n    println!(\"{}\", st1_a.clone().lock().unwrap().count);\n    println!(\"{}\", st2_a.clone().lock().unwrap().count);\n}\n\n</code></pre>"},{"location":"String/","title":"String","text":""},{"location":"String/#c","title":"C#","text":"<pre><code>\nusing System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var name = \"John\";\n        var age = 21;\n        var date = DateTime.Now;\n\n        // String interpolation:\n        var str1 = $\"{name} age is {age}, today is {date.DayOfWeek}, {date:HH:mm} now.\";\n        Console.WriteLine(str1);\n\n        // String formatting:\n        Console.WriteLine(\"{0} age is {1}, today is {2}, {3:HH:mm} now.\",\n            name, age, date.DayOfWeek, date);\n\n        // float, hexadecimal\n        var str2 = String.Format(\"four decimals: {0:0.0000}, hex for {1}: 0x{2:X}\", 0.123456, 16, 16);\n        Console.WriteLine(str2);\n\n        // Parse numbers in string\n        var elems = str2.Split(\" \");\n        char[] toTrim = { ':', ',' };\n\n        foreach (var item in elems)\n        {\n            try\n            {\n                var num = Double.Parse(item.Trim(toTrim));\n                Console.WriteLine(\"Found float {0} in \\\"{1}\\\"\", num, item);\n            }\n            catch (FormatException e)\n            {\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"String/#dart","title":"Dart","text":"<pre><code>\n// dependencies:\n//  sprintf: ^7.0.0\n\nimport 'package:sprintf/sprintf.dart';\n\nvoid main(List&lt;String&gt; arguments) {\n  var name = \"John\";\n  var age = 21;\n  var date = DateTime.now();\n  var day = date.weekday;\n\n  // String interpolation\n  var str1 = \"$name age is $age, weekday is $day, ${date.hour}:${date.minute}\";\n  print(str1);\n\n  // String formatting float hex\n  var str2 = sprintf(\"\\nfour decimals: %.4f, hex for %d: 0x%x\", [0.123456, 16, 16]);\n  print(str2);\n\n  // Parse number in string\n\n  // Eliminate ',', ':'\n  str2 = str2.replaceAll(',', '');\n  str2 = str2.replaceAll(':', '');\n\n  var elems = str2.split(\" \");\n  for (var item in elems) {\n    try {\n      var num = double.parse(item);\n      print(\" Found float $num in \\\"$item\\\"\");\n    } catch (e) {\n    }    \n  }\n}\n</code></pre>"},{"location":"String/#go","title":"Go","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"strings\"\n    \"time\"\n)\n\nfunc main() {\n    name := \"John\"\n    age := 21\n    date := time.Now()\n\n    // String interpolation\n    str1 := fmt.Sprintf(\"%s age is %d, weekday is %s, %d:%d\\n\",\n        name, age, date.Weekday(), date.Hour(), date.Minute())\n    fmt.Print(str1)\n\n    str2 := fmt.Sprintf(\"four decimals %.4f, hex for %d: 0x%x \\n\", 1.23456, 16, 16)\n    fmt.Print(str2)\n\n    //extract nth character\n    chn2 := str2[2]\n    fmt.Printf(\"char: %c\\n\", chn2)\n\n    //substring\n    subs := str2[0:3]\n    fmt.Println(\"subs: \", subs)\n\n    elems := strings.Split(str2, \" \")\n    var num float64\n    for _, item := range elems {\n        item = strings.Trim(item, \",:\")\n        _, err := fmt.Sscanf(item, \"%f\", &amp;num)\n        if err == nil {\n            fmt.Printf(\"Found float %f in \\\"%s\\\"\\n\", num, item)\n        }\n    }\n}\n</code></pre>"},{"location":"String/#julia","title":"Julia","text":"<pre><code>using Printf\nusing Dates\n\nname = \"john\"\nage = 21\nt = Dates.now()\n\n# string interpolation\nprintln(\"$(name) age is $(age), weekday is $(Dates.dayname(t)), $(Dates.hour(t)):$(Dates.minute(t))\\n\")\n\nstr2 = @sprintf \"four decimals %.4f, hex for %d: 0x%x \\n\" 1.23456 16 16\nprintln(str2)\n\n# extract nth character\nchn2 = str2[2]\n@printf \"char: %c\\n\" chn2\n\n# substring\nsubs = str2[1:2]\n@printf \"subs %s\\n\" subs\n\nelems = split(str2,\" \")\nfor el in elems\n    el = strip(el, [',', ':'])   \n    try\n        num = parse(Float64, el)\n        @printf \"found float %s in \\\"%s\\\"\\n\" num el      \n    catch\n    end\nend\n</code></pre>"},{"location":"String/#nim","title":"Nim","text":"<pre><code>import strformat\nimport times\nimport strutils\nimport sequtils\n\nlet  name = \"John\";\nlet  age = 21;\nlet  date = now()\n\n# String interpolation\nlet  str1 = &amp;\"{name} age is {age}, weekday is {date.weekday}, {date.hour}:{date.minute}\"\necho str1\n\n# String formatting\nlet str2 = &amp;\"four decimals: {0.123456:2.4f}, hex for {16}: 0x{16:X}\"\necho str2\n\nvar elems = str2.split(\" \")\n\n# Eliminate ',', ':'\nelems =  map(elems, proc (x: string): string = x.replace(\",\",\"\"))\nelems =  map(elems, proc (x: string): string = x.replace(\":\",\"\"))\n\n# Parse string for numbers\nfor item in elems:\n    try:\n        let num = parseFloat(item)\n        echo &amp;\"Found float {num} in \\\"{item}\\\"\"\n    except:\n        discard\n</code></pre>"},{"location":"String/#odin","title":"Odin","text":"<pre><code>\npackage main\n\nimport \"core:c/libc\"\nimport \"core:fmt\"\nimport \"core:strconv\"\nimport \"core:strings\"\n//import \"core:time\"\n//import \"core:time/datetime\"\n\n\nmain :: proc() {\n    name := \"John\"\n    age := 21\n\n    // resort to libc as core:time doesn't automatically handle localtime\n    t := libc.time(nil)\n    // Get the localtime\n    local := libc.localtime(&amp;t)\n    hour := local.tm_hour\n    minute := local.tm_min\n    weekday := local.tm_wday\n\n    /*\n    date := time.now()\n    buf: [time.MIN_HMS_LEN]u8\n    hms := time.to_string_hms(date, buf[:])\n    */\n\n    // String interpolation\n    str1 := fmt.tprintf(\"%s age is %d, weekday is %d, %d:%d\\n\", name, age, weekday, hour, minute)\n    fmt.print(str1)\n\n    str2 := fmt.tprintf(\"four decimals %.4f, hex for %d: 0x%x \\n\", 1.23456, 16, 16)\n    fmt.print(str2)\n\n    // Extract nth character\n    chn2 := str2[2]\n    fmt.printf(\"char: %c\\n\", chn2)\n\n    // Substring\n    subs := str2[0:3]\n    fmt.println(\"subs: \", subs)\n\n    elems := strings.split(str2, \" \")\n    defer delete(elems)\n\n    for item in elems {\n        titem := strings.trim(item, \",:\")\n        num, ok := strconv.parse_f32(titem)\n        if ok {\n            fmt.printf(\"Found float %f in \\\"%s\\\"\\n\", num, titem)\n        }\n    }\n}\n</code></pre>"},{"location":"String/#python","title":"Python","text":"<pre><code>\nimport datetime\n\nname = \"John\"\nage = 21\ndate = datetime.datetime.now()\n\n# String interpolation\nstr1 = f\"{name } age is {age}, today is {date.day}, {date.hour}:{date.minute}\"\nprint(str1)\n\n#  String formatting\nstr1 = \"{} age is {}, today us {}, {}:{}\".format(name, age, date.day, date.hour, date.minute)\nprint(str1)\n\n# float, hexadecimal\nstr2 = \"four decimals: {:.4f}, hex for {}: 0x{:x}\".format(0.123456, 16, 16)\nprint(str2)\n\n# parse string for numbers\nelems = str2.split(\" \")\nfor item in elems:\n    item = item.replace(\",\", \"\")\n    item = item.replace(\":\", \"\")\n    try:\n        num = float(item)\n        print(f\"Found {num} in \\\"{item}\\\"\")\n    except:\n        pass\n</code></pre>"},{"location":"String/#rust","title":"Rust","text":"<pre><code>// [dependencies]\n// chrono = \"*\"\nuse chrono::{Datelike, Timelike, Utc};\n\nfn main() {\n    let name = \"John\";\n    let age = 21;\n    let date = Utc::now();\n\n    // STring formatting: string, int, date\n    let str1 = &amp;format!(\n        \"{} age is {} weekday is, {:?}, {:?}:{:?}\",\n        name,\n        age,\n        date.weekday(),\n        date.hour(),\n        date.minute()\n    );\n    println!(\"{}\", str1);\n    //float, hex\n    let str2 = &amp;format!(\"four decimals: {:.4}, hex for {}: 0x{:X}\", 0.123456, 16, 16);\n    println!(\"{}\", str2);\n\n    //extract nth character\n    let mut chn2 = str2.chars().nth(2).unwrap();\n    println!(\"char: {}\", chn2);\n    //alternative\n    let chn2 = &amp;str2[2..3];\n    println!(\"char: {}\", chn2);\n\n    //substring\n    let subs = &amp;str2[0..3];\n    println!(\"subs: {}\", subs);\n\n    // Parse string for numbers\n    let elems: Vec&lt;&amp;str&gt; = str2.split(\" \").collect();\n\n    // Eliminate ',', ':'\n    let mut elems1: Vec&lt;String&gt; = elems.into_iter().map(|x| x.replace(\",\", \"\")).collect();\n    elems1 = elems1.into_iter().map(|x| x.replace(\":\", \"\")).collect();\n    for item in elems1 {\n        match item.parse::&lt;f64&gt;() {\n            Ok(num) =&gt; println!(\" Found float {} in \\\"{}\\\"\", num, item),\n            Err(_) =&gt; {}\n        }\n    }\n}\n</code></pre>"},{"location":"String/#typescript","title":"TypeScript","text":"<pre><code>\nlet name1 = \"John\";\nlet age = 21;\nlet date = new Date();\n\n// String interpolation (use backtick)\nlet str1 = `${name1} age is ${age}, today is ${date.getDay()}, ${date.getHours()}:${date.getMinutes()}`;\nconsole.log(str1);\n\nlet num = 16\nlet str2 = `four decimals: ${1.23456.toFixed(4)}, hex for ${num} is 0x${num.toString(16)}`;\nconsole.log(str2);\n\n// Parse string for number\nlet elems = str2.split(\" \");\nelems.forEach(item =&gt; {\n    let num = parseFloat(item);\n    if (!isNaN(num)) {\n        console.log(`Found float ${num} in \\\"${item}\\\"`);\n    }\n});\n</code></pre>"},{"location":"Structure%20or%20Class/","title":"Structure or Class","text":""},{"location":"Structure%20or%20Class/#c","title":"C#","text":"<pre><code>\nusing System;\n\nclass Person\n{\n    public string firstName;\n    public string secondName;\n    //constructor with default arguments\n    public Person(string fname = \"John\", string sname = \"Doe\")\n    {\n        firstName = fname;\n        secondName = sname;\n    }\n\n}\n\nclass Customer\n{\n    public Person person;\n    //keep  balance private\n    double balance = 0.0;\n\n    public Customer(Person p)\n    {\n        person = p;\n    }\n    //methods\n    public void AddToBalance(double sum)\n    {\n        balance += sum;\n    }\n    public double GetBalance()\n    {\n        return balance;\n    }\n}\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var p1 = new Person(\"Mark\");\n        var c1 = new Customer(p1);\n\n        //methos\n        c1.AddToBalance(100.0);\n        c1.AddToBalance(10.0);\n\n        //property\n        Console.WriteLine(\"New {0} balance: {1}\", c1.person.firstName, c1.GetBalance());\n    }\n}\n</code></pre>"},{"location":"Structure%20or%20Class/#dart","title":"Dart","text":"<pre><code>\n//file moda.dart -&gt; package moda\nclass Person {  \n   String firstName;  \n   String secondName; \n   //Default/Optional parameters between []\n   Person([this.firstName = \"John\", this.secondName = \"Doe\"]) ;\n}\n\nclass Customer {\n  Person person;\n  //starting underscore: not visible outside package\n  double _balance; \n  Customer(this.person, [this._balance = 0.0]);\n\n  void addToBalance(double sum) {\n    _balance += sum;\n  }\n\n  double getBalance() {\n    return _balance;\n  }\n}\n</code></pre> <pre><code>import 'moda.dart';\n\nvoid main(List&lt;String&gt; args) {\n  var p1 = Person(\"Mark\");\n  var c1 = Customer(p1);\n  c1.person = p1;\n\n  //Method\n  c1.addToBalance(100.0);\n  c1.addToBalance(10.0);\n\n  //Property\n  var name = c1.person.firstName;\n  var balance = c1.getBalance();\n\n  print(\"New $name balance: $balance\");\n}\n</code></pre>"},{"location":"Structure%20or%20Class/#go","title":"Go","text":"<pre><code>//file src/moda/go.mod\n//generated  by \"go mod init moda\"\nmodule moda\n\ngo 1.17\n</code></pre> <pre><code>//file src/moda/moda.go -&gt; package moda\npackage moda\n\n// all public identifier must start with Uppercase\n\ntype Person struct {\n    FirstName  string\n    SecondName string\n}\n\ntype Customer struct {\n    Person  Person\n    balance float64 //lowercase because private\n}\n\n// struct creation with optional parameters\nfunc NewPerson(args ...string) Person {\n    firstName := \"John\"\n    secondName := \"Doe\"\n    if len(args) &gt; 0 {\n        firstName = args[0]\n    }\n    if len(args) &gt; 1 {\n        secondName = args[1]\n    }\n    return Person{FirstName: firstName, SecondName: secondName}\n}\n\n// struct creation\nfunc NewCustomer(person Person) Customer {\n    return Customer{Person: person, balance: 0.0}\n}\n\n// public methods for Customer\nfunc (customer *Customer) AddToBalance(sum float64) {\n    customer.balance += sum\n}\nfunc (customer *Customer) GetBalance() float64 {\n    return customer.balance\n}\n</code></pre> <pre><code>//file src/go.mod\n//generated  by \"go mod init main\"\n//then manually modified\nmodule main\n\nrequire moda v1.0.0\nreplace moda =&gt; ./moda\n\ngo 1.17\n</code></pre> <pre><code>//file src/main.go\npackage main\n\nimport (\n    \"fmt\"\n    \"moda\"\n)\n\nfunc main() {   \n    p1 := moda.NewPerson(\"Mark\")\n    c1 := moda.NewCustomer(p1)\n\n    //method\n    c1.AddToBalance(100.0)\n    c1.AddToBalance(10.0)\n    balance := c1.GetBalance()\n\n    //property\n    fmt.Printf(\"\\nNew %v balance: %v\", c1.Person.FirstName, balance) \n}\n</code></pre>"},{"location":"Structure%20or%20Class/#julia","title":"Julia","text":"<pre><code># file moda.jl\nmodule Moda \n\nexport Person\nexport Customer\nexport add_to_balance\n\nstruct Person \n    firstname::String\n    secondName::String\nend\n\nmutable struct Customer\n    person::Person\n    balance::Float64\nend\n\nfunction add_to_balance(c::Customer, val)\n    c.balance = c.balance + val\nend\n\nfunction local_func()\n    println(\"local_func called\")\nend\n\nend\n</code></pre> <pre><code># main file\n# with \"import\" whole module visible\ninclude(\"moda.jl\")\n\nimport   .Moda as md\n\np = md.Person(\"John\", \"Doe\")\nc = md.Customer(p, 0)\nmd.add_to_balance(c, 10)\nmd.add_to_balance(c, 100)\nprintln(c)\nmd.local_func()\n</code></pre> <pre><code># main file\n# with \"using\" only exports are visibile\ninclude(\"moda.jl\")\n\nusing .Moda\np = Person(\"Mark\", \"Smith\")\nc = Customer(p, 0)\nadd_to_balance(c, 12)\nprintln(c)\ntry\n    local_func()\ncatch\n    println(\"access to not exported function\")\nend\n\n</code></pre>"},{"location":"Structure%20or%20Class/#nim","title":"Nim","text":"<pre><code>\n# file moda.nim -&gt; module moda\ntype\n    Person* = ref object # asterisk for public\n        firstName: string\n        secondName: string\n\n# getter\nproc firstName*(person: Person): string = \n    person.firstName\n\nproc newPerson*(fName: string = \"John\", sName: string = \"Doe\"): Person =\n    Person(firstName: fName, secondName: sName)\n\ntype\n    Customer* = ref object \n        person: Person\n        balance: float64\n# getter\nproc person*(customer: Customer): Person =\n    customer.person\n# getter\nproc balance*(customer: Customer): float64 =\n    customer.balance\n\nproc newCustomer*(p: Person, b: float64 = 0.0): Customer =\n    Customer(person: p, balance: b)\n\n# method\nproc addToBalance*(c: Customer, sum: float64) = \n    c.balance = c.balance + sum\n\n</code></pre> <pre><code>\nimport moda\nimport strformat as sf\n\nlet p1: Person = moda.newPerson(\"Mark\") #use default for secondName\nvar c1 = moda.newCustomer(p1) #use default for balance\n\n# method\nc1.addToBalance(100.0)\nc1.addToBalance(10.0)\n\n# property, reading only through getter\necho sf.fmt\"New {c1.person.first_name} balance: {c1.balance}\"\n</code></pre>"},{"location":"Structure%20or%20Class/#odin","title":"Odin","text":"<pre><code>//file moda.odin, same directory, same package\n\npackage main\n\nPerson :: struct {\n    first_name:  string,\n    second_name: string,\n}\n\nCustomer :: struct {\n    person:  Person,\n    balance: f64,\n}\n\nadd_to_balance :: proc(c: ^Customer, sum: f64) {\n    c.balance += sum\n}\n\nget_balance :: proc(c: ^Customer) -&gt; f64 {\n    return c.balance\n}\n</code></pre> <pre><code>\npackage main\n\nimport \"core:fmt\"\n\nmain :: proc() {\n    p1 := new_person(\"Mark\")\n    c1 := new_customer(p1)\n\n    add_to_balance(&amp;c1, 100.0)\n    add_to_balance(&amp;c1, 10.0)\n    balance := get_balance(&amp;c1)\n\n    //property\n    fmt.printf(\"\\nNew %v balance: %v\\n\", c1.person.first_name, c1.balance)\n}\n\nnew_person :: proc(f_name := \"John\", s_name := \"Doe\") -&gt; Person {\n    return Person{f_name, s_name}\n}\n\nnew_customer :: proc(person: Person, balance := 0.0) -&gt; Customer {\n    return Customer{person, balance}\n}\n</code></pre>"},{"location":"Structure%20or%20Class/#python","title":"Python","text":"<pre><code>\nfrom dataclasses import dataclass\n\n@dataclass\nclass Person:\n    first_name: str = \"John\"\n    second_name: str = \"Doe\"\n\n@dataclass\nclass Customer:\n    person: Person\n    # double initial underscore for private\n    __balance: float = 0.0\n\n    def add_to_balance(self, num: float):\n        self.__balance += num\n\n    def get_balance(self) -&gt; float:\n        return self.__balance\n\np1 = Person(\"Mark\") # use default for second_name\nc1 = Customer(p1) #use default for balance\n\n# method\nc1.add_to_balance(100.0)\nc1.add_to_balance(10.0)\nnew_balance = c1.get_balance()\n\n# property\nprint(f\" New {c1.person.firstName} balance: {new_balance}\")\n</code></pre>"},{"location":"Structure%20or%20Class/#rust","title":"Rust","text":"<pre><code>\n//private fields/methods are not visible outside the module\nmod mod1 {\n    #[derive(Debug)]\n    pub struct Person {\n        pub first_name: String,\n        pub second_name: String,\n    }\n\n    #[derive(Debug)]\n    pub struct Customer {\n        pub person: Person,\n        balance: f64,\n    }\n\n    //default accessible outside only if fields are all public\n    impl Default for Person {\n        fn default() -&gt; Self {\n            Person {\n                first_name: \"John\".to_string(),\n                second_name: \"Doe\".to_string(),\n            }\n        }\n    }\n\n    impl Customer {\n        pub fn new() -&gt; Self {\n            Customer{person: Person{..Person::default()}, balance: 0.0 }\n        }\n        pub fn add_to_balance(&amp;mut self, sum: f64) {\n            self.balance += sum;\n        }\n        pub fn get_balance(&amp;self) -&gt; f64 {\n            self.balance\n        }\n    }\n\n}\n\nuse mod1::*;\n\nfn main() {\n    let mut c1 = Customer::new(); //use person and balance default\n    c1.person.first_name = \"Mark\".to_string(); //change first_name\n\n    println!(\"{:?}\", &amp;c1);\n\n    //Method\n    c1.add_to_balance(100.0);\n    c1.add_to_balance(10.0);\n\n    //Property\n    println!(\"New {} balance: {} \", &amp;c1.person.first_name, c1.get_balance());\n}\n</code></pre>"},{"location":"Structure%20or%20Class/#sing","title":"Sing","text":"<pre><code>\nrequires \"sio\";\nrequires \"mod1\";\n\n\npublic fn singmain(argv [*]string) i32\n{\n    var c1 mod1.Customer;\n    c1.person.first_name = \"Mark\";\n\n    sio.print(\"\\n\\r\" + c1.person.first_name + \", \" + c1.person.second_name);\n\n    c1.add_to_balance(100.0);\n    c1.add_to_balance(10.0);\n\n    sio.print(\"\\n\\rNew Balance: \" + string(c1.get_balance()));\n    return(0);\n}\n\n//in a different file named mod1.sing:\npublic class Person {\n    public:\n    //members with default\n    var first_name string = \"John\";\n    var second_name string = \"Doe\";\n}\n\npublic class Customer {\n    public:\n    var person Person;\n    fn mut add_to_balance(sum f64) void;\n    fn get_balance() f64;\n    private:\n    var balance f64;\n}\n\npublic fn Customer.add_to_balance(sum f64) void\n{\n    this.balance = this.balance + sum;\n}\n\npublic fn Customer.get_balance() f64\n{\n    return (this.balance);\n}\n</code></pre>"},{"location":"Structure%20or%20Class/#typescript","title":"TypeScript","text":"<pre><code>\nclass Person {\n    firstName: string;\n    secondName: string;\n    //Default/Optional parameters \n    constructor(fname: string = \"John\", sname: string = \"Doe\") {\n        this.firstName = fname;\n        this.secondName = sname;\n    }\n}\n\nclass Customer {\n    person: Person;\n    private _balance: number = 0.0;\n    constructor(p: Person) {\n        this.person = p;\n    }\n    addToBalance(sum: number) {\n        this._balance += sum;\n    }\n    getBalance() {\n        return this._balance;\n    }\n}\n\nvar p1 = new Person(\"Mark\");\nvar c1 = new Customer(p1);\nc1.person = p1;\n\n//Method\nc1.addToBalance(100.0);\nc1.addToBalance(10.0);\n\n//Property\nvar pname = c1.person.firstName;\nvar balance = c1.getBalance();\n\nconsole.log(`New ${pname} balance: ${balance}`);\n</code></pre>"},{"location":"Structure%20or%20Class/#v-vlang","title":"V (vlang)","text":"<pre><code>// src/moda/moda.v\n\nmodule moda\n\npub struct Person {\npub mut:\n    first_name  string\n    second_name string\n}\n\npub struct Customer {\nmut:\n    balance f64\npub mut:\n    person Person\n}\n\npub fn (mut customer Customer) add_to_balance(sum f64) {\n    customer.balance += sum\n}\n\npub fn (customer Customer) get_balance() f64 {\n    return customer.balance\n}\n</code></pre> <pre><code>// src/\nimport moda as md\n\nfn main() {\n    p1 := md.Person{\"Mark\", \"Smith\"}\n    mut c1 := md.Customer{0, p1}\n\n    c1.add_to_balance(100.0)\n    c1.add_to_balance(10.0)\n\n    balance := c1.get_balance()\n    println(\"$p1.first_name balance: $balance\")\n}\n</code></pre>"},{"location":"System%20command/","title":"System command","text":""},{"location":"System%20command/#c","title":"C#","text":"<pre><code>\nusing System;\nusing System.Diagnostics;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var psi = new ProcessStartInfo();\n        var process = new Process(); //(\"cargo\", \"version\");\n        psi.Arguments = \"--version\";\n        psi.FileName = \"dotnet\";\n        psi.RedirectStandardOutput = true;\n        psi.UseShellExecute = false;\n        process.StartInfo = psi;\n        process.Start();\n\n        while (!process.StandardOutput.EndOfStream)\n        {\n            var line = process.StandardOutput.ReadLine();\n            Console.WriteLine(line);\n        }\n    }\n}\n</code></pre>"},{"location":"System%20command/#dart","title":"Dart","text":"<pre><code>\nimport \"dart:io\";\n\nvoid main(List&lt;String&gt; arguments) {\n  Process.run('cargo', ['version']).then((ProcessResult result) {\n    print(result.stdout);\n  });\n}\n</code></pre>"},{"location":"System%20command/#go","title":"Go","text":"<pre><code>\npackage main\n\nimport (\n    . \"fmt\"\n    \"os/exec\"\n    \"runtime\"\n)\n\nfunc main() {\n    if runtime.GOOS == \"linux\" {\n        out, _ := exec.Command(\"/bin/sh\", \"-c\", \"ls\").Output()\n        output := string(out)\n        Printf(\"\\n%s\", output)\n    } else {\n        //windows\n        out, _ := exec.Command(\"cmd\", \"/C\", \"dir\").Output()\n        output := string(out)\n        Printf(\"\\n%s\", output)\n    }\n}\n</code></pre>"},{"location":"System%20command/#odin","title":"Odin","text":"<pre><code>\npackage main\n\nimport \"core:c/libc\"\n\nmain :: proc() {\n    // without output capture\n    if ODIN_OS == .Windows {\n        libc.system(\"cmd.exe /C dir\")\n    }\n    if ODIN_OS == .Linux {\n        libc.system(\"/bin/sh -c ls\")\n    }\n\n    // with output capture\n    outp: []string\n    if ODIN_OS == .Windows {\n        outp = system_command(\"cmd.exe /C dir\")\n    }\n    if ODIN_OS == .Linux {\n        outp = system_command(\"/bin/sh -c ls\")\n    }\n    for elem in outp {\n        fmt.print(elem)\n    }\n}\n\nsystem_command :: proc(cmd: string) -&gt; []string {\n    outp: [dynamic]string\n\n    fp := posix.popen(strings.clone_to_cstring(cmd), \"r\")\n    if fp == nil {\n        fmt.println(\"open error\")\n    }\n\n    buffer: [4096]u8\n    // Read the output line by line\n    for {\n        out := posix.fgets(raw_data(buffer[:]), size_of(buffer), fp)\n        if out == nil {\n            break\n        }\n        out_cs := cstring(out)\n        out_s := strings.clone_from_cstring(out_cs)\n        if out_s != \"\\n\" {\n            append(&amp;outp, out_s)\n        }\n        //fmt.println(string(out_s))\n    }\n    return outp[:]\n}\n</code></pre>"},{"location":"System%20command/#python","title":"Python","text":"<pre><code>\nimport subprocess\n\noutp = subprocess.run([\"pip\", \"--version\"], capture_output=True, text=True)\nprint(outp.stdout)\n</code></pre>"},{"location":"System%20command/#rust","title":"Rust","text":"<pre><code>\nuse std::process::Command;\n\nfn main() {\n\n    let output = Command::new(\"cargo\")\n        .args(&amp;[\"version\"])\n        .output()\n        .expect(\"failed to execute process\");\n\n    println!(\"stdout: {}\", String::from_utf8_lossy(&amp;output.stdout));\n\n    //windows only\n    let output2 = Command::new(\"cmd\")\n        .args(&amp;[\"/C\", \"dir\"])\n        .output()\n        .expect(\"failed to execute process\");\n\n    println!(\"stdout: {}\", String::from_utf8_lossy(&amp;output2.stdout));\n}\n</code></pre>"},{"location":"TOML/","title":"TOML","text":""},{"location":"TOML/#go","title":"Go","text":"<pre><code>//go.mod\n//require github.com/pelletier/go-toml v1.9.4\npackage main\n\nimport (\n    . \"fmt\"\n    \"os\"\n\n    toml \"github.com/pelletier/go-toml\"\n)\n\n// all fields must be Public (Capitalized)!\ntype Person struct {\n    Name string `toml:\"name\"`\n    Val  int    `toml:\"val\"`\n}\n\ntype TomlConfig struct {\n    Person Person `toml:\"person\"`\n}\n\nconst CONF_TOML_PATH = \"conf.toml\"\n\nfunc main() {\n\n    cfg := TomlConfig{Person{Name: \"Joe\", Val: 10}}\n    Println(cfg)\n    b, err := toml.Marshal(cfg)\n\n    if err != nil {\n        panic(err)\n    }\n    Println(string(b))\n    file, err := os.Create(CONF_TOML_PATH)\n    if err != nil {\n        panic(err)\n    }\n    file.Write(b)\n    file.Close()\n\n    var cfg2 TomlConfig\n    b2, err := os.ReadFile(CONF_TOML_PATH)\n    err = toml.Unmarshal(b2, &amp;cfg2)\n    if err != nil {\n        panic(err)\n    }\n    Println(cfg2)\n}\n</code></pre>"},{"location":"TOML/#julia","title":"Julia","text":"<pre><code>using TOML\n\nstruct Person\n    name::String\n    val::Int64\nend\nconst CONF_TOML_PATH = \"conf.toml\"\n\n# form struct to TOML\np = Person(\"Joe\", 10)\n\nfunction struct_to_dict(s)\n    return Dict(key =&gt; getfield(s, key) for key in propertynames(s))\nend\n\np_dict = Dict(\"Person\" =&gt; struct_to_dict(p))\nopen(CONF_TOML_PATH, \"w\") do io\n    TOML.print(io, p_dict)\nend\n\n# from TOML ro struct\nparsed = TOML.parsefile(CONF_TOML_PATH)\n\nfunction dict_to_person(d)\n    local p = Person(d[\"Person\"][\"name\"], d[\"Person\"][\"val\"])\nend\n\nprintln(dict_to_person(parsed))\n</code></pre>"},{"location":"TOML/#rust","title":"Rust","text":"<pre><code>\n//[dependencies]\n//toml = \"0.5.8\"\n//serde = \"1.0.125\"\n//serde_derive = \"1.0.125\"\n\nuse serde_derive::{Deserialize, Serialize};\nuse std::fs::File;\nuse std::io::prelude::*; //without this, no file write\n\nconst CONF_TOML_PATH: &amp;str = \"conf.toml\";\n\n#[derive(Clone, Debug, Deserialize, Serialize)]\nstruct TomlConfig {\n    name: String,\n    val: i32,\n}\n\nfn init_conf() -&gt; TomlConfig {\n    let file_found = match File::open(CONF_TOML_PATH) {\n        Ok(_) =&gt; true,\n        Err(_) =&gt; false,\n    };\n\n    if ! file_found {\n        return TomlConfig{name: String::from(\"Joe\"), val: 10};\n    }\n\n    let mut fs_conf = File::open(CONF_TOML_PATH).unwrap();\n    let mut str1 = String::new();\n    fs_conf.read_to_string(&amp;mut str1).unwrap();\n\n    let tconf: TomlConfig = toml::from_str(&amp;str1).unwrap();\n\n    tconf\n}\n\nfn main() {\n    let mut conf = init_conf();\n    conf.val = 20;\n    let conf_str = toml::to_string(&amp;conf).unwrap();\n    let mut fs_conf = File::create(CONF_TOML_PATH).unwrap();\n    fs_conf.write(&amp;conf_str.as_bytes()).unwrap();\n}\n\n</code></pre>"},{"location":"Tuples/","title":"Tuples","text":""},{"location":"Tuples/#julia","title":"Julia","text":"<pre><code>using Printf\n\nt1 = (1, 10, \"hello\");\n@printf \"%d %d %s\\n\" t1[1] t1[2] t1[3]\n\n# delete an element\n(a, b, c) = t1;\nt2 = (a, c);\nprintln(t2);\n\n# tuple to list\nlst = collect((1, 2, 3))\nprintln(lst)\n\n#  add an element\nv3 = collect(t1)\ninsert!(v3, 2, 2)\nt3 = Tuple(v3)\nprintln(t3)\n</code></pre>"},{"location":"Tuples/#python","title":"Python","text":"<pre><code>\nt1 = (1, 10, \"hello\")\nprint(f'{t1[0], t1[1], t1[2]}')\n\n# delete an element\na, b, c = t1\nt2 = (a, c)\nprint(f'{t2}')\n\n# add an element\nt3 = (a, 2, b, c)\nprint(f'{t3}')\n\n# add tuples\nt4 = t2 + t2\nprint(f'{t4}')\n\n# tuple to list\nlst = list((1, 2, 3))\nprint(f'{lst}')\n</code></pre>"},{"location":"Tuples/#rust","title":"Rust","text":"<pre><code>\nfn main() {\n    let t1 = (1, 10, \"hello\");\n    println!(\"{} {} {}\", t1.0, t1.1, t1.2);\n\n    //delete an element\n    let (a, b, c) = t1;\n    let t2 = (a, c);\n    println!(\"{:?}\", t2);\n\n    //add an element\n    let t3 = (a, 2, b, c);\n    println!(\"{:?}\", t3);\n}\n</code></pre>"},{"location":"Union/","title":"Union","text":""},{"location":"Union/#c","title":"C#","text":"<pre><code>\nusing System;\nusing System.Collections.Generic;\n\npublic interface IComposite\n{\n    bool isComposite();\n}\n\nclass Person : IComposite\n{\n    public string firstName;\n    public string secondName;\n    //constructor with default arguments\n    public Person(string fname = \"John\", string sname = \"Doe\")\n    {\n        firstName = fname;\n        secondName = sname;\n    }\n    bool IComposite.isComposite() { return true; }\n}\n\npublic class CInt : IComposite\n{\n    bool IComposite.isComposite() { return true; }\n    public int value;\n    public CInt(int num)\n    {\n        value = num;\n    }\n}\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var p1 = new Person();\n        var c1 = new CInt(12);\n        cType(p1);\n        cType(c1); //int needs to be enveloped in CInt\n    }\n\n    public static void cType(IComposite c)\n    {\n        if (c is Person cp)\n        {\n            Console.Write(\"Person {0}\\n\", cp.firstName);\n        }\n        else if (c is CInt ci)\n        {\n            Console.Write(\"Number {0}\\n\", ci.value);\n        }\n    }\n}\n</code></pre>"},{"location":"Union/#dart","title":"Dart","text":"<pre><code>\n\n// interface to represent union\nclass IComposite {\n  bool isComposite() {return true;}\n}\n\nclass Person implements IComposite {\n  String firstName;\n  String secondName;\n  Person([this.firstName = \"John\", this.secondName = \"Doe\"]);\n\n  @override\n  bool isComposite() {\n    return true;\n  }\n}\n\nclass CInt implements IComposite {\n  int value;\n  CInt(this.value);\n\n  @override\n  bool isComposite() {\n    return true;\n  }\n}\n\nvoid main(List&lt;String&gt; args) {\n  var p1 = Person();\n\n  cType(p1);\n  cType(CInt(12)); //int needs to be enveloped in CInt\n}\n\nvoid cType(IComposite c) {\n  if (c is CInt) {\n    //cast to the actual type\n    var c1 = c as CInt;\n    var value = c1.value;\n    print(\"Number $value\");\n  } else if (c is Person) {\n    //cast to the actual type\n    var p1 = c as Person;\n    var name = p1.firstName;\n    print(\"Person $name\");\n  }\n}\n</code></pre>"},{"location":"Union/#go","title":"Go","text":"<pre><code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\ntype CompositeType interface {\n    isComposite() bool\n}\n\ntype Person struct {\n    FirstName  string\n    SecondName string\n}\n// struct creation\nfunc NewPerson(firstName string, secondName string) Person {\n    return Person{FirstName: firstName, SecondName: secondName}\n}\n\ntype CInt struct {\n    value int\n}\n// struct creation\nfunc NewCInt(num int) CInt {\n    return CInt{value: num}\n}\n\n//link Person and CInt to CompositeType\nfunc (p Person) isComposite() bool { return true }\nfunc (c CInt) isComposite() bool   { return true }\n\nfunc cType(c CompositeType) {\n    switch c.(type) {\n    case Person:\n        //cast to actual tyupe\n        fmt.Printf(\"\\nPerson %v\", c.(Person).FirstName)\n    case CInt:\n        //cast to actual tyupe\n        fmt.Printf(\"\\nNumber %v\", c.(CInt).value)\n    }\n}\n\nfunc main() {\n    p1 := NewPerson(\"John\", \"Doe\")\n    c1 := NewCInt(12) //int needs to be enveloped in CInt\n\n    cType(p1)\n    cType(c1)\n}\n</code></pre>"},{"location":"Union/#julia","title":"Julia","text":"<pre><code>using Printf\n\nabstract type CompType end\n\nstruct Person &lt;: CompType\n    firstname::String\n    secondName::String\nend\n\nstruct CInt &lt;: CompType\n    value::Int\nend\n\n\np1 = Person(\"John\", \"Doe\")\nc1 = CInt(12)\n\nfunction cType(c::CompType)\n    if typeof(c) == Person\n        @printf \"\\nPerson %s\" c.firstname\n    elseif typeof(c) == CInt\n        @printf \"\\nNumber %d\" c.value\n    end \n\nend\n\ncType(p1)\ncType(c1)\n</code></pre>"},{"location":"Union/#nim","title":"Nim","text":"<pre><code>\nimport strformat\n\ntype\n    Person = ref object\n        firstName: string\n        secondName: string\n\ntype\n    CompositeKind = enum cPerson, cInt\n    Composite = ref object\n        case kind: CompositeKind\n        of cInt: value: int\n        of cPerson: person: Person\n\nproc cType(c: Composite) =\n    if c.kind == cPerson:\n        echo &amp;\"Person {c.person.firstName}\"\n    if c.kind == cInt:\n        echo &amp;\"Number {c.value}\"\n\nlet p1 = Person(firstName: \"John\", secondName: \"Doe\")\nlet cp1 = Composite(kind: cPerson, person: p1)\nlet cnum = Composite(kind: cInt, value: 12)\ncType(cp1)\ncType(cnum)\n</code></pre>"},{"location":"Union/#python","title":"Python","text":"<pre><code>\nfrom dataclasses import dataclass\nfrom typing import Union\n\n@dataclass\nclass Person:\n    first_name: str = \"John\"\n    second_name: str = \"Doe\"\n\nComposite = Union[Person, int]\n\ndef c_type(c: Composite):\n    if type(c) == int:\n        print(f\"Number {c}\")\n    elif isinstance(c, Person):\n        print(f\"Person {c.first_name}\")\n\np1 = Person()\nc_type(p1)\nc_type(12)\n</code></pre>"},{"location":"Union/#rust","title":"Rust","text":"<pre><code>\npub enum Composite {\n    Person(Person),\n    CInt(i32)\n}\n\npub struct Person {\n    pub first_name: String,\n    pub second_name: String,\n}\n\npub fn c_type(c: Composite) {\n    match c {\n        Composite::Person(p) =&gt; println!(\"Person {}\", p.first_name) ,\n        Composite::CInt(c) =&gt; println!(\"Number {}\", c),\n    }\n}\n\nfn main() {\n    let p1 = Person {\n        first_name: \"John\".to_string(),\n        second_name: \"Doe\".to_string(),\n    };\n\n    //all types must be enveloped in the containing enum\n    c_type(Composite::Person(p1));\n    c_type(Composite::CInt(12));\n}\n</code></pre>"},{"location":"Union/#sing","title":"Sing","text":"<pre><code>\nrequires \"sio\";\n\ninterface IComposite {\n    fn isComposite() bool;\n}\n\nclass Person : IComposite {\n    public:\n    var firstName string;\n    var secondName string;\n}\npublic fn Person.isComposite() bool {\n    return (true);\n}\n\nclass  CInt : IComposite {\n    public:\n    var value i32;\n}\npublic fn CInt.isComposite() bool {\n    return (true);\n} \n\npublic fn singmain(argv [*]string) i32\n{\n    var p1 Person;\n    var c1 CInt;\n    p1.firstName = \"John\";\n    c1.value = 12;\n\n    c_type(p1);\n    c_type(c1);\n\n    return(0);\n}\n\nfn c_type(item IComposite) void {\n    typeswitch (ref = item) {\n        case Person:{\n            sio.print(\"\\n\\rPerson \" + ref.firstName);\n        }\n        case CInt:{\n            sio.print(\"\\n\\rCInt \" + string(ref.value));\n        }\n        default: {\n            sio.print(\"\\n\\rUnrecognized type\");\n        }\n    }\n}\n</code></pre>"},{"location":"Union/#typescript","title":"TypeScript","text":"<pre><code>\nclass Person  {\n    firstName: string;\n    secondName: string;\n    constructor(fname: string = \"John\", sname: string = \"Doe\") {\n        this.firstName = fname;\n        this.secondName = sname;\n    }\n}\n\ntype Composite = number | Person;\n\nfunction cType(c: Composite) {\n    if (c instanceof Person) {\n        // non primitive type, needs casting\n        var person = (c as Person); //tsc gives error here but generated js works\n        console.log(`Person ${person.firstName}`);\n    }\n    else if (typeof (c) == \"number\") {\n        console.log(`Number ${c}`);\n    }\n}\n\nlet p1 = new Person();\ncType(p1);\ncType(12);\n\n</code></pre>"},{"location":"Union/#v-vlang","title":"V (vlang)","text":"<pre><code>struct Person {\n    first_name  string\n    second_name string\n}\nstruct CInt {\n    value int\n}\n\ntype CompositeType = Person | CInt\nfn main() {\n    p1 := Person{\"John\", \"Doe\"}\n    c1 := CInt{12}\n    c_type(p1)\n    c_type(c1)\n}\n\nfn c_type(c CompositeType) {\n    match c {\n        Person {\n            println(\"Person: $c.first_name\")\n        }\n        CInt {\n            println(\"Number: $c.value\")\n        }\n    }\n}\n</code></pre>"},{"location":"VideoCapture/","title":"Video Capture","text":""},{"location":"VideoCapture/#flutter","title":"Flutter","text":"<pre><code>\n//dependencies:\n//  camera: ^0.5.7+3\nimport 'package:flutter/material.dart';\nimport 'package:camera/camera.dart';\nimport 'dart:async';\n\nList&lt;CameraDescription&gt; cameras;\ndouble sbHeight = 0; //status bar heigth\n\nFuture&lt;void&gt; main() async {\n  // Ensure that plugin services are initialized so that `availableCameras()`\n  // can be called before `runApp()`\n  WidgetsFlutterBinding.ensureInitialized();\n\n  cameras = await availableCameras();\n  runApp(MyApp());\n}\n\nclass MyApp extends StatefulWidget {\n  @override\n  _CameraAppState createState() =&gt; _CameraAppState();\n}\n\nclass _CameraAppState extends State&lt;MyApp&gt; {\n  CameraController _controller;\n  Future&lt;void&gt; _initializeControllerFuture;\n  //var _imageBytes;\n  static const double WIDTH = 224;\n  static const double HEIGHT = 224;\n  static const double SB_HEIGHT = 10; //? MediaQuery seems to return 0\n\n  @override\n  void initState() {\n    super.initState();\n    // To display the current output from the camera,\n    // create a CameraController.\n    _controller = CameraController(\n      // Get a specific camera from the list of available cameras.\n      cameras[0],\n      // Define the resolution to use.\n      ResolutionPreset.medium,\n    );\n\n    // Next, initialize the controller. This returns a Future.\n    _initializeControllerFuture = _controller.initialize();\n\n  }\n\n  @override\n  void dispose() {\n    _controller?.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    var appBar = AppBar(title: Text('Cam - draw') );\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      home: Scaffold(\n        appBar: appBar,\n        body: FutureBuilder&lt;void&gt;(\n          future: _initializeControllerFuture,\n          builder: (context, snapshot) {\n            if (snapshot.connectionState == ConnectionState.done) {\n              // If the Future is complete, display the preview.\n\n              _controller.startImageStream((CameraImage img) {\n                //_imageBytes = img.planes[0].bytes;\n              });\n              var _abHeight = appBar.preferredSize.height;\n              var _height = MediaQuery.of(context).size.height;\n              var _width = MediaQuery.of(context).size.width;\n              return Container(\n                  margin: EdgeInsets.only(top: 10),\n                  child: Stack(\n                    alignment: Alignment.centerRight,\n                    children: &lt;Widget&gt;[\n                      OverflowBox(\n                        maxHeight: WIDTH,\n                        maxWidth: HEIGHT,\n                        child: CameraPreview(_controller),\n                      ),\n                      //Draw a box at 0, 0 relative to the image\n                      Positioned(\n                        left: (_width - WIDTH) / 2 + 0,\n                        top: (_height - HEIGHT) / 2  - (_abHeight - SB_HEIGHT) + 0,\n                        width: 20,\n                        height: 30,\n                        child: Container(\n                          padding: EdgeInsets.only(top: 5.0, left: 5.0),\n                          decoration: BoxDecoration(\n                            border: Border.all(\n                              color: Color.fromRGBO(255, 0, 0, 1.0),\n                              width: 3.0,\n                            ),\n                          ),\n                        ),\n                      ),\n                    ],\n                  ));\n            } else {\n              // Otherwise, display a loading indicator.\n              return Center(child: CircularProgressIndicator());\n            }\n          },\n        ),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"VideoCapture/#odin","title":"Odin","text":"<pre><code>\npackage main\n// get c bindings from https://github.com/friolator/OpenCV-C\n// may need to change opencv version\n// Linux: install opencv, put libOpenCVC.so where the .odin file is\n// Windows: put OpenCVC.lib, OpenCVC.dll and the opencv dll (like opencv_world452.dll)\n// where the .odin file is\nimport \"core:dynlib\"\nimport \"core:fmt\"\nimport rl \"vendor:raylib\"\n\nwhen ODIN_OS == .Linux {\n    foreign import cv \"libOpenCVC.so\"\n} else when ODIN_OS == .Windows {\n    foreign import cv \"OpenCVC.lib\"\n}\n\nColorConversionCodes :: enum {\n    CVC_COLOR_BGR2RGB = 4,\n    CVC_COLOR_RGB2GRAY = 7,\n}\n\nVideoCaptureProperties :: enum {\nCV_CAP_PROP_FRAME_WIDTH    = 3,\nCV_CAP_PROP_FRAME_HEIGHT   = 4,\n}\n\n@(default_calling_convention = \"c\", link_prefix = \"CVC\")\nforeign cv {\n    imshow :: proc (windowName: cstring, image: rawptr) ---\n    waitKey :: proc (delay: i32) -&gt; i32 ---\n    destroyAllWindows :: proc \"c\" () ---\n    MatFree :: proc (mat: rawptr) ---\n    imread :: proc (filename: cstring, flags: i32) -&gt; rawptr ---\n    VideoCaptureCreateWithIndex :: proc (index: i32) -&gt; rawptr ---\n    MatCreate :: proc () -&gt; rawptr ---\n    VideoCaptureRead :: proc (video_capture: rawptr, image: rawptr) -&gt; bool ---\n    cvtColor :: proc (src: rawptr, dst: rawptr, code: i32, dstCn: i32) ---\n    VideoCaptureSetInt :: proc (videoCapture: rawptr, propId: i32, value: i64) -&gt; bool ---\n    MatDataPtr :: proc (mat: rawptr) -&gt; rawptr ---\n}\n\nWIDTH :: 640\nHEIGHT :: 480\n\nmain :: proc() {\n    fmt.println(\"start\")\n\n    if ODIN_OS == .Linux {\n        _, ok := dynlib.load_library(\"libOpenCVC.so\")\n        if !ok {\n            fmt.eprintln(dynlib.last_error())\n            return\n        }\n    }\n\n    video_stream := VideoCaptureCreateWithIndex(0)\n    VideoCaptureSetInt(video_stream, i32(VideoCaptureProperties.CV_CAP_PROP_FRAME_WIDTH), i64(WIDTH))\n    VideoCaptureSetInt(video_stream, i32(VideoCaptureProperties.CV_CAP_PROP_FRAME_HEIGHT), i64(HEIGHT))\n\n    rl.InitWindow(WIDTH, HEIGHT, \"raygui\")\n    rl.SetTargetFPS(60)\n    txt: rl.Texture\n\n    for !rl.WindowShouldClose() {\n        frame := MatCreate()\n        if VideoCaptureRead(video_stream, frame) {\n\n            rl.BeginDrawing()\n            rl.ClearBackground(\n                rl.GetColor(\n                    u32(rl.GuiGetStyle(.DEFAULT, i32(rl.GuiDefaultProperty.BACKGROUND_COLOR))),\n                ),\n            )\n            imshow(\"OpenCV\", frame)\n            ch := waitKey(10)\n            if ch != -1 {\n                break\n            }\n\n            converted_frame := MatCreate()\n            cvtColor(frame, converted_frame, i32(ColorConversionCodes.CVC_COLOR_BGR2RGB), 0)\n\n            data := MatDataPtr(converted_frame)\n            img: rl.Image\n            img.data = (rawptr)(data)\n            img.width =  WIDTH\n            img.height = HEIGHT\n            img.format = .UNCOMPRESSED_R8G8B8 //.UNCOMPRESSED_R5G6B5   //.UNCOMPRESSED_GRAYSCALE\n            img.mipmaps = 1\n\n\n            rl.UnloadTexture(txt)\n            pmt := rl.LoadTextureFromImage(img)\n            //rl.UnloadImage(img)\n            txt = pmt\n\n            rl.DrawTexture(txt, 0, 0, rl.WHITE )\n\n            MatFree(converted_frame)\n            //copy(&amp;txt, &amp;pmt, size_of(rl.Texture))\n        }\n        MatFree(frame)\n\n        rl.EndDrawing()\n    }\n    destroyAllWindows()\n}\n</code></pre>"},{"location":"VideoCapture/#python","title":"Python","text":"<pre><code>\n#pip install opencv-python\nimport cv2\n\nWINDOW_NAME = 'image'\nWIDTH = 200\nHEIGHT = 200\n\n\ndef on_click(event, x, y, flags, param):\n    global click_exit\n    if event == cv2.EVENT_LBUTTONDOWN:\n        click_exit = True\n\ncap = cv2.VideoCapture(0)\ncv2.namedWindow(WINDOW_NAME,cv2.WINDOW_NORMAL)\ncv2.resizeWindow(WINDOW_NAME, WIDTH, HEIGHT)\ncv2.setMouseCallback(WINDOW_NAME, on_click)\n\nwhile True:\n    global click_exit\n    click_exit = False\n\n    ret, frame = cap.read()\n    cv2.imshow(WINDOW_NAME, frame)\n    ch = cv2.waitKey(10) \n    if ch != -1 or click_exit:\n        break;\n\ncap.release()\ncv2.destroyAllWindows()\n</code></pre>"},{"location":"VideoCapture/#rust","title":"Rust","text":"<pre><code>\n//compile in release for good performance\n//stream video with simple shapes overlay \n\n//[dependencies]\n//camera_capture = \"0.5.0\"\n//minifb = \"0.15.3\"\n//image = \"0.22.4\"\n//imageproc = \"0.19.2\"\n\nuse image::{imageops, DynamicImage, ImageBuffer, Rgb, RgbImage};\nuse minifb::{Key, Window, WindowOptions};\nuse imageproc::drawing::{draw_line_segment_mut, draw_hollow_rect_mut};\nuse imageproc::rect::{Rect};\n\nconst WIDTH: usize = 200;\nconst HEIGHT: usize = 200;\n\nfn main() {\n    let cam = camera_capture::create(0).expect(\"Camera create error\");\n    //let mut cam_iter = cam.fps(0.5).unwrap().start().unwrap();\n    let mut cam_iter = cam.start().unwrap();\n    let mut window = Window::new(\n        \"image, click or press ESC to exit\",\n        WIDTH,\n        HEIGHT,\n        WindowOptions {\n            ..WindowOptions::default()\n        },\n    )\n    .expect(\"Error opening window\");\n    while window.is_open() &amp;&amp; !window.is_key_down(Key::Escape) {\n        let img = cam_iter.next().unwrap();\n        let (width, height) = img.dimensions();\n        //Resize to WIDTH, HEIGHT -&gt; a DynamicImage is needed\n        let img_r = RgbImage::from_vec(width, height, img.to_vec()).unwrap();\n        let img_d = DynamicImage::ImageRgb8(img_r);\n        let img_d_resized = img_d.resize_exact(WIDTH as u32, HEIGHT as u32, imageops::Nearest);\n\n        //To draw pixels, an ImageBuffer is needed back\n        let mut img_g_resized =\n            ImageBuffer::from_raw(WIDTH as u32, HEIGHT as u32, img_d_resized.raw_pixels()).unwrap();\n        draw_line_segment_mut(&amp;mut img_g_resized, (10.0, 10.0), (50.0, 50.0), Rgb([0, 255, 0]));\n        draw_hollow_rect_mut(&amp;mut img_g_resized, Rect::at(100, 100).of_size(20, 30), Rgb([255, 0, 0]));\n        //\n\n        let u32_buffer: Vec&lt;u32&gt; = img_g_resized\n            .chunks(3)\n            .map(|v| ((v[0] as u32) &lt;&lt; 16) | ((v[1] as u32) &lt;&lt; 8) | v[2] as u32)\n            .collect();\n\n        window\n            .update_with_buffer(&amp;u32_buffer, WIDTH, HEIGHT)\n            .expect(\"Error on update\");\n    }\n}\n\n</code></pre>"},{"location":"Webserver/","title":"Webserver","text":""},{"location":"Webserver/#dart","title":"Dart","text":"<pre><code>\nimport 'dart:io';\nimport 'dart:isolate';\n\nFuture&lt;void&gt; main() async {\n  var receivePort = ReceivePort();\n\n  var isolate = await Isolate.spawn((SendPort sendPort) async {\n\n    final server = await HttpServer.bind(InternetAddress.loopbackIPv4, 0);\n    var address = server.address.address;\n    var port = server.port;\n    sendPort.send(\"http://$address:$port\");\n\n    await for (HttpRequest request in server) {\n      var path = request.uri.path;\n      if (path == \"/\") {\n        var indexH = File(\"index.html\");\n        try {\n          var content = await indexH.readAsString();\n          request.response.headers.contentType = ContentType.html;\n          request.response.write(content);\n        } catch (e) {\n          print(e);\n        }\n      } else {\n        path = path.replaceFirst('/', '');\n        if (path.endsWith(\".js\")) {\n          request.response.headers.contentType = ContentType.parse(\n            \"text/javascript\",\n          );\n        } else {\n          request.response.headers.contentType = ContentType.html;\n        }\n        var file = File(path);\n        try {\n          var content = await file.readAsString();\n          request.response.write(content);\n        } catch (e) {\n          print(e);\n        }\n      }\n      await request.response.close();\n    }\n    await server.close(force: true);\n  }, receivePort.sendPort);\n\n  receivePort.listen((message) {\n    print(\"Serving on $message\");\n\n    print('\\nPress any key and Enter to quit');\n    stdin.readLineSync();\n    isolate.kill();\n    exit(0);\n  });\n}\n</code></pre>"},{"location":"Webserver/#odin","title":"Odin","text":"<pre><code>\npackage main\n\nimport \"core:c/libc\"\nimport \"core:fmt\"\nimport \"core:net\"\nimport \"core:os\"\nimport \"core:strings\"\nimport \"core:thread\"\n\nmain :: proc() {\n    // the system will choose the port\n    endp_0 := net.Endpoint{net.IP4_Loopback, 0}\n    socket, err := net.listen_tcp(endp_0)\n    if err != nil {\n        fmt.panicf(\"Cannot create socket listener %s\", err)\n    }\n\n    // Read the address with the chosen port\n    endp, _ := net.bound_endpoint(socket)\n    addr_str := fmt.tprintf(\"http://%s:%d\\n\", net.address_to_string(endp.address), endp.port)\n    fmt.printf(\"Server listening at %s\", addr_str)\n\n    th := thread.create_and_start_with_poly_data(socket, proc(socket: net.TCP_Socket) {\n        for {\n            conn, _, err := net.accept_tcp(socket)\n            if err != nil {\n                fmt.println(\"accept error\", err)\n                continue\n            }\n            handle_connection(conn)\n        }\n    })\n\n    fmt.println(\"\\nPress a key and ENTER to quit\\n\")\n    libc.getchar()\n\n    thread.terminate(th, 0)\n    net.close(socket)\n    thread.destroy(th)\n}\n\nhandle_connection :: proc(conn: net.TCP_Socket) {\n    buffer := [4096]byte{}\n    content_type: string\n\n    _, err := net.recv_tcp(conn, buffer[:])\n    request := string(buffer[:])\n    //fmt.println(\"Received request:\\n\", request)\n\n    lines := strings.split(request, \"\\n\")\n    for line in lines {\n        if strings.has_prefix(line, \"GET\") {\n            parts := strings.split(line, \" \")\n            file_buf: []byte\n            err: os.Error\n            if parts[1] == \"/\" {\n                file_buf, err = os.read_entire_file_from_filename_or_err(\"index.html\")\n                if err != nil {\n                    fmt.printf(\"Cannot read index.html, %s\\n\", err)\n                    continue\n                }\n                content_type = \"Content-Type: text/html\\r\\n\"\n            } else {\n                path := parts[1][1:] // eliminate initial /\n                //fmt.println(path)\n                if strings.has_suffix(path, \".js\") {\n                    content_type = \"Content-Type: text/javascript\\r\\n\"\n                } else {\n                    content_type = \"Content-Type: text/html\\r\\n\"\n                }\n\n                file_buf, err = os.read_entire_file_from_filename_or_err(path)\n                if err != nil {\n                    fmt.printf(\"Cannot read file  *%s*, %s\\n\", path, err)\n                    continue\n                }\n            }\n            request_body := file_buf[:]\n            response := fmt.tprintf(\n                \"HTTP/1.1 200 OK\\r\\n\" +\n                \"%s\" +\n                \"Content-Length: %d\\r\\n\" +\n                \"Connection: close\\r\\n\" +\n                \"\\r\\n%s\",\n                content_type,\n                len(request_body),\n                request_body,\n            )\n            net.send_tcp(conn, transmute([]byte)response)\n        }\n    }\n    net.close(conn)\n}\n</code></pre>"},{"location":"Webserver/#rust","title":"Rust","text":"<pre><code>use std::io::{BufRead, BufReader, Write, Read};\n\nfn main() {\n    let addr = start_server(\"static\".to_string());\n\n    println!(\"Serving on {}\", addr);\n\n    loop {}\n}\n\nfn start_server(rel_path: String) -&gt; String {\n    let listener = std::net::TcpListener::bind(\"127.0.0.1:0\").expect(\"tcp server error\");\n    let addr = listener.local_addr().unwrap().clone();\n\n    //let fh_name = \"static/index.html\";\n    let fh_name = format!(\"{}{}\",rel_path,\"/index.html\");\n    let content = std::fs::read_to_string(fh_name).unwrap();\n\n\n    std::thread::spawn(move || {\n        for stream in listener.incoming() {\n            let mut stream = stream.unwrap();\n\n            let buf_reader = BufReader::new(&amp;mut stream);\n\n            let http_request: Vec&lt;_&gt; = buf_reader\n                .lines()\n                .map(|result| result.unwrap())\n                .take_while(|line| !line.is_empty())\n                .collect();\n\n            let ok_response = \"HTTP/1.1 200 OK\\r\\n\";\n            let js_type = \"Content-Type: text/javascript\\r\\n\";\n\n            let strs: Vec&lt;&amp;str&gt; = http_request[0].split_whitespace().collect();\n            //println!(\"{:?}\", strs); \n            if strs[0] == \"GET\" {\n                let head = &amp;format!(\"/{}/\", rel_path);\n                if strs[1].starts_with(head) {\n                    let path = strs[1][1..].to_string(); //cut initial /\n\n                    let mut static_content = Vec::new();\n                    let mut file = std::fs::File::open(&amp;path).expect(\"Unable to open file\");\n                    file.read_to_end(&amp;mut static_content)\n                        .expect(\"Unable to read\");\n\n                    let mut response= String::new();\n                    if path.ends_with(\".js\") {\n                        response = format!(\"{ok_response}{js_type}\\r\\n\");\n                    } else {\n                        response = format!(\"{ok_response}\\r\\n\"); \n                    }\n                    stream.write_all(response.as_bytes()).unwrap();\n                    stream.write_all(&amp;static_content).unwrap();\n\n                    continue;\n                }\n            }\n\n            let response = format!(\"{}\\r\\n{}\", ok_response, content);\n\n            stream.write_all(response.as_bytes()).unwrap();\n        }\n    });\n\n    let addr_str = format!(\"http://{:?}\", addr);\n    return addr_str;\n}\n</code></pre>"},{"location":"Websockets/","title":"Websockets","text":""},{"location":"Websockets/#go","title":"Go","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"time\"\n\n    \"golang.org/x/net/websocket\"\n)\n\nfunc main() {\n    url := \"ws://echo.websocket.events/\"\n    ws, err := websocket.Dial(url, \"\", url)\n\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    defer ws.Close()\n\n    go func() {\n\n        // 512 byte buffer for storing the response\n        var response = make([]byte, 512)\n\n        // No. of bytes received\n        var received int\n        for {\n            if received, err = ws.Read(response); err != nil {\n                log.Fatal(err)\n            }\n\n            fmt.Printf(\"Received: %s\\n\", response[:received])\n        }\n    }()\n\n    for {\n        // Write the `hello` message\n        if _, err := ws.Write([]byte(\"hello\")); err != nil {\n            log.Fatal(err)\n        }\n        time.Sleep(2 * time.Second)\n    }\n}\n</code></pre>"},{"location":"Websockets/#rust","title":"Rust","text":"<pre><code>//[dependencies]\n//tungstenite = \"0.20\"\n//tokio = { version = \"1\", features = [\"full\"] }\n//tokio-tungstenite = \"0.17\"\n//futures = \"0.3\"\n//url = \"2.5.4\"\n\nuse std::time::Duration;\nuse tokio::time::timeout;\nuse tokio_tungstenite::connect_async;\nuse tokio_tungstenite::tungstenite::protocol::Message;\nuse futures::{SinkExt, StreamExt};\nuse url::Url;\n\n#[tokio::main]\nasync fn main() {\n    let url = Url::parse(\"ws://echo.websocket.events/\").unwrap();\n    let (mut ws_stream, _) = connect_async(url.as_str())\n        .await\n        .expect(\"Failed to connect\");\n\n    let (tx, rx) = std::sync::mpsc::channel::&lt;String&gt;();\n\n    tokio::spawn(async move {\n        loop {\n            match timeout(Duration::from_secs(2), ws_stream.next()).await {\n                Err(_) =&gt; {\n                    match rx.try_recv() {\n                        Ok(msg) =&gt; ws_stream.send(Message::Text(msg)).await.unwrap(),\n                        Err(_) =&gt; ()\n                    }\n                },\n                Ok(None) =&gt; {},\n                Ok(Some(msg)) =&gt; match msg.unwrap() {\n                    Message::Text(text) =&gt; {\n                        println!(\"Received: {}\", text);\n                    }\n                    _ =&gt; {}\n                },\n            }\n        }\n    });\n\n    loop {\n        std::thread::sleep(std::time::Duration::from_secs(2));\n        tx.send(\"hello\".to_string()).unwrap();\n    }\n}\n\n</code></pre>"},{"location":"Write%20%26%20Read%20lines/","title":"Write &amp; Read Lines","text":""},{"location":"Write%20%26%20Read%20lines/#c","title":"C#","text":"<pre><code>\nusing System;\nusing System.IO;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var fileName = \"tmp01.txt\";\n\n        using (var f = File.CreateText(fileName))\n        {\n            f.WriteLine(\"This is\\n\\na text\\nfile\");\n        }\n\n        try\n        {\n            using (var f = File.OpenText(fileName))\n            {\n                string s;\n                while ((s = f.ReadLine()) != null)\n                {\n                    Console.WriteLine(s);\n                }\n            }\n        }\n        catch\n        {\n            Console.WriteLine(\"Could not find {0}\", fileName);\n        }\n\n    }\n}\n</code></pre>"},{"location":"Write%20%26%20Read%20lines/#dart","title":"Dart","text":"<pre><code>\nimport 'dart:io';\n\nvoid main() async {\n  var fileName = \"tmp01.txt\";\n  var f = File(fileName);\n  var sink = f.openWrite();\n  sink.write(\"This is\\n\\na text\\nfile\");\n  sink.close();\n\n  var fRead = File(fileName);\n  var lines = await fRead.readAsLines();\n\n  try {\n    for (var line in lines) {\n      print(line);\n    }\n  } catch (e) {\n    print(\"Cannot find $fileName\");\n  }\n}\n</code></pre>"},{"location":"Write%20%26%20Read%20lines/#go","title":"Go","text":"<pre><code>\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    fileName := \"tmp01.txt\"\n    file, err := os.Create(fileName)\n    if err != nil {\n        fmt.Printf(\"Can't create %s\\n\", fileName)\n        os.Exit(0)\n    }\n    toWrite := []byte(\"This is\\n\\na text\\nfile\")\n    file.Write(toWrite)\n    file.Close()\n\n    file, err = os.Open(fileName)\n    if err != nil {\n        fmt.Printf(\"Can't open %s\\n\", fileName)\n        os.Exit(0)\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        fmt.Println(scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        fmt.Println(\"Reading error: \", err)\n    }\n}\n</code></pre>"},{"location":"Write%20%26%20Read%20lines/#julia","title":"Julia","text":"<pre><code>using Printf\n\nfilename = \"tmp01.txt\"\ntry\n    fwr = open(filename, \"w\")\n    print(fwr, \"This is\\n\\na text\\nfile\")\n    close(fwr)        \ncatch\n    @printf \"cannot open %s\\n\" filename\nend\n\ntry\n    fwr = open(filename, \"r\")\n    lines = readlines(fwr)\n    println(lines)    \ncatch\n    @printf \"cannot read %s\\n\" filename\nend\n</code></pre>"},{"location":"Write%20%26%20Read%20lines/#nim","title":"Nim","text":"<pre><code>\nimport streams\n\nlet fileName = \"tmp01.txt\"\nvar strm = newFileStream(fileName, fmWrite)\nstrm.write(\"This is\\n\\na text\\nfile\")\nstrm.close()\n\nlet strmRead = newFileStream(fileName, fmRead)\nvar line = \"\"\nif not isNil(strmRead):\n    while strmRead.readLine(line):\n      echo line\nstrmRead.close()\n</code></pre>"},{"location":"Write%20%26%20Read%20lines/#odin","title":"Odin","text":"<pre><code>package main\n\nimport \"core:fmt\"\nimport \"core:os\"\nimport \"core:strings\"\n\nmain :: proc() {\n    file_name := \"tmp01.txt\"\n\n    // Create and write to the file\n    file, err := os.open(file_name, os.O_CREATE | os.O_WRONLY | os.O_TRUNC, 0666)\n    if err != nil {\n        fmt.printf(\"Can't create %s\\n\", file_name)\n        os.exit(0)\n    }\n\n    to_write := \"This is\\n\\na text\\nfile\"\n    _, err = os.write_string(file, to_write)\n    if err != nil {\n        fmt.println(\"Write error:\", err)\n        os.exit(0)\n    }\n    os.close(file)\n\n    // Open and read the file\n    file, err = os.open(file_name, os.O_RDONLY, 0666)\n    if err != nil {\n        fmt.printf(\"Can't open %s\\n\", file_name)\n        os.exit(0)\n    }\n    defer os.close(file)\n\n    data, success := os.read_entire_file_from_handle(file)\n    if !success {\n        fmt.println(\"Read error:\", err)\n        os.exit(0)\n    }\n\n    // Split by newline and print each line\n    lines := strings.split(string(data), \"\\n\")\n    for line in lines {\n        fmt.println(line)\n    }\n}\n</code></pre>"},{"location":"Write%20%26%20Read%20lines/#python","title":"Python","text":"<pre><code>\nimport os\nimport sys\n\nfile_name = \"tmp01.txt\"\n\ntry:\n    with open(file_name, \"w\") as file:\n        file.write(\"This is\\n\\na text\\nfile\")\nexcept:\n    print(f\"Error writing  {file_name}\")\n\ntry:\n    with open(file_name, \"r\") as file:\n        for line in file:\n            print(line, end='')\nexcept:\n    print(f\"Error reading {file_name}\")\n</code></pre>"},{"location":"Write%20%26%20Read%20lines/#rust","title":"Rust","text":"<pre><code>\nuse std::fs::File;\nuse std::io::prelude::*; //without this, no write\nuse std::io::BufRead;\nuse std::io::BufReader;\nfn main() {\n    let file_name = \"tmp01.txt\";\n    let mut f = File::create(file_name)\n        .expect(&amp;format!(\"Cannot create {}\", file_name));\n\n    f.write(\"This is\\n\\na text\\nfile\".as_bytes()) \n        .expect(&amp;format!(\"Cannot write to {}\", file_name));\n\n    let f = File::open(file_name)\n        .expect(&amp;format!(\"File {} not found\", file_name));\n\n    let file = BufReader::new(&amp;f);\n\n    for line in file.lines() {\n        let str1: String = match line {\n            Ok(str1) =&gt; str1.to_ascii_lowercase(),\n            Err(_) =&gt; {                \n                String::new() //return empty string\n            }\n        };\n        println!(\"{}\", &amp;str1);\n    }\n}\n\n</code></pre>"},{"location":"Write%20%26%20Read%20lines/#v-vlang","title":"V (vlang)","text":"<pre><code>import os\n\nfn main() {\n    file_name := \"tmp0.txt\"\n    mut f1 := os.create(file_name) or {panic(\"cannot create $file_name\")}\n    to_write := (\"This is\\n\\na text\\nfile\").bytes()\n    f1.write(to_write) or {panic(\"cannot write $file_name\")}\n    f1.close()\n\n    lines := os.read_lines(file_name) or {panic(\"cannot read $file_name\")}\n    println('$lines')\n}\n</code></pre>"}]}