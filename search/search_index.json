{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Snippets Tested snippets for different languages","title":"Home"},{"location":"#welcome-to-snippets","text":"Tested snippets for different languages","title":"Welcome to Snippets"},{"location":"dictionary/","text":"C using System ; using System.Collections ; using System.Collections.Generic ; namespace hello { class Program { static void Main ( string [] args ) { var word_list = new List < string > { \"table\" , \"chair\" , \"table\" }; var words = new Hashtable (); foreach ( var item in word_list ) { if ( words . Contains ( item )) { words [ item ] = ( int ) words [ item ] + 1 ; } else { words . Add ( item , 1 ); } } foreach ( DictionaryEntry item in words ) { Console . WriteLine ( \"{0}, {1}\" , item . Key , item . Value ); } } } } Rust use std :: collections :: HashMap ; fn main () { //count words let word_list = vec ! [ \"table\" , \"chair\" , \"table\" ]; let mut words : HashMap < String , usize > = HashMap :: new (); for item in word_list { let count = words . entry (( * item ). to_string ()). or_insert ( 0 ); * count += 1 ; } println ! ( \"{:?}\" , & words ); }","title":"Dictionary"},{"location":"dictionary/#c","text":"using System ; using System.Collections ; using System.Collections.Generic ; namespace hello { class Program { static void Main ( string [] args ) { var word_list = new List < string > { \"table\" , \"chair\" , \"table\" }; var words = new Hashtable (); foreach ( var item in word_list ) { if ( words . Contains ( item )) { words [ item ] = ( int ) words [ item ] + 1 ; } else { words . Add ( item , 1 ); } } foreach ( DictionaryEntry item in words ) { Console . WriteLine ( \"{0}, {1}\" , item . Key , item . Value ); } } } }","title":"C"},{"location":"dictionary/#rust","text":"use std :: collections :: HashMap ; fn main () { //count words let word_list = vec ! [ \"table\" , \"chair\" , \"table\" ]; let mut words : HashMap < String , usize > = HashMap :: new (); for item in word_list { let count = words . entry (( * item ). to_string ()). or_insert ( 0 ); * count += 1 ; } println ! ( \"{:?}\" , & words ); }","title":"Rust"},{"location":"hello/","text":"Rust cargo new hello -- bin cd hello cargo run C dotnet new console -o hello cd hello dotnet run Dart pub global activate stagehand mkdir hello cd hello stagehand console-full pub get dart bin/main.dart","title":"Hello with CLI"},{"location":"hello/#rust","text":"cargo new hello -- bin cd hello cargo run","title":"Rust"},{"location":"hello/#c","text":"dotnet new console -o hello cd hello dotnet run","title":"C"},{"location":"hello/#dart","text":"pub global activate stagehand mkdir hello cd hello stagehand console-full pub get dart bin/main.dart","title":"Dart"}]}